#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ulleum")]
public partial class TesterDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertproject(project instance);
  partial void Updateproject(project instance);
  partial void Deleteproject(project instance);
  partial void InsertDimension_Type(Dimension_Type instance);
  partial void UpdateDimension_Type(Dimension_Type instance);
  partial void DeleteDimension_Type(Dimension_Type instance);
  partial void InsertDimension_Mode(Dimension_Mode instance);
  partial void UpdateDimension_Mode(Dimension_Mode instance);
  partial void DeleteDimension_Mode(Dimension_Mode instance);
  partial void InsertQuest_Type(Quest_Type instance);
  partial void UpdateQuest_Type(Quest_Type instance);
  partial void DeleteQuest_Type(Quest_Type instance);
  partial void Insertinter_condition(inter_condition instance);
  partial void Updateinter_condition(inter_condition instance);
  partial void Deleteinter_condition(inter_condition instance);
  partial void InsertTest_Data(Test_Data instance);
  partial void UpdateTest_Data(Test_Data instance);
  partial void DeleteTest_Data(Test_Data instance);
  partial void Inserttest_diagram(test_diagram instance);
  partial void Updatetest_diagram(test_diagram instance);
  partial void Deletetest_diagram(test_diagram instance);
  partial void InsertResume_Item_Type(Resume_Item_Type instance);
  partial void UpdateResume_Item_Type(Resume_Item_Type instance);
  partial void DeleteResume_Item_Type(Resume_Item_Type instance);
  partial void InsertParam_Value(Param_Value instance);
  partial void UpdateParam_Value(Param_Value instance);
  partial void DeleteParam_Value(Param_Value instance);
  partial void InsertTest_Results_Txt(Test_Results_Txt instance);
  partial void UpdateTest_Results_Txt(Test_Results_Txt instance);
  partial void DeleteTest_Results_Txt(Test_Results_Txt instance);
  partial void InsertConditionRangeType(ConditionRangeType instance);
  partial void UpdateConditionRangeType(ConditionRangeType instance);
  partial void DeleteConditionRangeType(ConditionRangeType instance);
  partial void InsertTest_Type(Test_Type instance);
  partial void UpdateTest_Type(Test_Type instance);
  partial void DeleteTest_Type(Test_Type instance);
  partial void InsertResume_Item(Resume_Item instance);
  partial void UpdateResume_Item(Resume_Item instance);
  partial void DeleteResume_Item(Resume_Item instance);
  partial void InsertDiagram_Type(Diagram_Type instance);
  partial void UpdateDiagram_Type(Diagram_Type instance);
  partial void DeleteDiagram_Type(Diagram_Type instance);
  partial void InsertTest_Diagram_Scale(Test_Diagram_Scale instance);
  partial void UpdateTest_Diagram_Scale(Test_Diagram_Scale instance);
  partial void DeleteTest_Diagram_Scale(Test_Diagram_Scale instance);
  partial void InsertPassport_Template(Passport_Template instance);
  partial void UpdatePassport_Template(Passport_Template instance);
  partial void DeletePassport_Template(Passport_Template instance);
  partial void InsertScoreCalcType(ScoreCalcType instance);
  partial void UpdateScoreCalcType(ScoreCalcType instance);
  partial void DeleteScoreCalcType(ScoreCalcType instance);
  partial void InsertSubScaleDimension(SubScaleDimension instance);
  partial void UpdateSubScaleDimension(SubScaleDimension instance);
  partial void DeleteSubScaleDimension(SubScaleDimension instance);
  partial void InsertDiagnosticFieldType(DiagnosticFieldType instance);
  partial void UpdateDiagnosticFieldType(DiagnosticFieldType instance);
  partial void DeleteDiagnosticFieldType(DiagnosticFieldType instance);
  partial void Insertlanguage(language instance);
  partial void Updatelanguage(language instance);
  partial void Deletelanguage(language instance);
  partial void Inserttest_category(test_category instance);
  partial void Updatetest_category(test_category instance);
  partial void Deletetest_category(test_category instance);
  partial void InsertSubScale(SubScale instance);
  partial void UpdateSubScale(SubScale instance);
  partial void DeleteSubScale(SubScale instance);
  partial void InsertItemScale_Link(ItemScale_Link instance);
  partial void UpdateItemScale_Link(ItemScale_Link instance);
  partial void DeleteItemScale_Link(ItemScale_Link instance);
  partial void InsertParam_Result(Param_Result instance);
  partial void UpdateParam_Result(Param_Result instance);
  partial void DeleteParam_Result(Param_Result instance);
  partial void InsertScale_Range(Scale_Range instance);
  partial void UpdateScale_Range(Scale_Range instance);
  partial void DeleteScale_Range(Scale_Range instance);
  partial void InsertScale_Norm(Scale_Norm instance);
  partial void UpdateScale_Norm(Scale_Norm instance);
  partial void DeleteScale_Norm(Scale_Norm instance);
  partial void InsertTest_Result(Test_Result instance);
  partial void UpdateTest_Result(Test_Result instance);
  partial void DeleteTest_Result(Test_Result instance);
  partial void InsertTest_Question(Test_Question instance);
  partial void UpdateTest_Question(Test_Question instance);
  partial void DeleteTest_Question(Test_Question instance);
  partial void InsertParam(Param instance);
  partial void UpdateParam(Param instance);
  partial void DeleteParam(Param instance);
  partial void Insertdept(dept instance);
  partial void Updatedept(dept instance);
  partial void Deletedept(dept instance);
  partial void InsertCompany(Company instance);
  partial void UpdateCompany(Company instance);
  partial void DeleteCompany(Company instance);
  partial void InsertJob(Job instance);
  partial void UpdateJob(Job instance);
  partial void DeleteJob(Job instance);
  partial void Insertuser_state(user_state instance);
  partial void Updateuser_state(user_state instance);
  partial void Deleteuser_state(user_state instance);
  partial void InsertScale(Scale instance);
  partial void UpdateScale(Scale instance);
  partial void DeleteScale(Scale instance);
  partial void Insertreport(report instance);
  partial void Updatereport(report instance);
  partial void Deletereport(report instance);
  partial void Insertuser_account(user_account instance);
  partial void Updateuser_account(user_account instance);
  partial void Deleteuser_account(user_account instance);
  partial void InsertTest_SubjectGroup_Link(Test_SubjectGroup_Link instance);
  partial void UpdateTest_SubjectGroup_Link(Test_SubjectGroup_Link instance);
  partial void DeleteTest_SubjectGroup_Link(Test_SubjectGroup_Link instance);
  partial void Insertrep_item_type(rep_item_type instance);
  partial void Updaterep_item_type(rep_item_type instance);
  partial void Deleterep_item_type(rep_item_type instance);
  partial void Insertrep_item_link(rep_item_link instance);
  partial void Updaterep_item_link(rep_item_link instance);
  partial void Deleterep_item_link(rep_item_link instance);
  partial void InsertNorm_Type(Norm_Type instance);
  partial void UpdateNorm_Type(Norm_Type instance);
  partial void DeleteNorm_Type(Norm_Type instance);
  partial void Insertinterpretation(interpretation instance);
  partial void Updateinterpretation(interpretation instance);
  partial void Deleteinterpretation(interpretation instance);
  partial void Insertrep_test_link(rep_test_link instance);
  partial void Updaterep_test_link(rep_test_link instance);
  partial void Deleterep_test_link(rep_test_link instance);
  partial void Inserttest_measure_link(test_measure_link instance);
  partial void Updatetest_measure_link(test_measure_link instance);
  partial void Deletetest_measure_link(test_measure_link instance);
  partial void Insertsubj_fill_type(subj_fill_type instance);
  partial void Updatesubj_fill_type(subj_fill_type instance);
  partial void Deletesubj_fill_type(subj_fill_type instance);
  partial void Insertsch_frequency(sch_frequency instance);
  partial void Updatesch_frequency(sch_frequency instance);
  partial void Deletesch_frequency(sch_frequency instance);
  partial void Insertschedule(schedule instance);
  partial void Updateschedule(schedule instance);
  partial void Deleteschedule(schedule instance);
  partial void Insertidea_state(idea_state instance);
  partial void Updateidea_state(idea_state instance);
  partial void Deleteidea_state(idea_state instance);
  partial void Inserttest(test instance);
  partial void Updatetest(test instance);
  partial void Deletetest(test instance);
  partial void Insertgenerator_type(generator_type instance);
  partial void Updategenerator_type(generator_type instance);
  partial void Deletegenerator_type(generator_type instance);
  partial void Insertidea(idea instance);
  partial void Updateidea(idea instance);
  partial void Deleteidea(idea instance);
  partial void Inserttest_subject_approved(test_subject_approved instance);
  partial void Updatetest_subject_approved(test_subject_approved instance);
  partial void Deletetest_subject_approved(test_subject_approved instance);
  partial void Insertsubject_group(subject_group instance);
  partial void Updatesubject_group(subject_group instance);
  partial void Deletesubject_group(subject_group instance);
  partial void Insertindicator(indicator instance);
  partial void Updateindicator(indicator instance);
  partial void Deleteindicator(indicator instance);
  partial void Insertitem(item instance);
  partial void Updateitem(item instance);
  partial void Deleteitem(item instance);
  partial void Insertcompetence(competence instance);
  partial void Updatecompetence(competence instance);
  partial void Deletecompetence(competence instance);
  partial void Insertbook(book instance);
  partial void Updatebook(book instance);
  partial void Deletebook(book instance);
  partial void Insertbook_competence_lnk(book_competence_lnk instance);
  partial void Updatebook_competence_lnk(book_competence_lnk instance);
  partial void Deletebook_competence_lnk(book_competence_lnk instance);
  partial void InsertRaw_Data(Raw_Data instance);
  partial void UpdateRaw_Data(Raw_Data instance);
  partial void DeleteRaw_Data(Raw_Data instance);
  partial void InsertTest_Subject(Test_Subject instance);
  partial void UpdateTest_Subject(Test_Subject instance);
  partial void DeleteTest_Subject(Test_Subject instance);
  partial void Insertmetric(metric instance);
  partial void Updatemetric(metric instance);
  partial void Deletemetric(metric instance);
  partial void Insertmetric_subj_filter(metric_subj_filter instance);
  partial void Updatemetric_subj_filter(metric_subj_filter instance);
  partial void Deletemetric_subj_filter(metric_subj_filter instance);
  #endregion
	
	public TesterDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["tester_dataConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public TesterDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TesterDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TesterDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TesterDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<project> projects
	{
		get
		{
			return this.GetTable<project>();
		}
	}
	
	public System.Data.Linq.Table<ProjectTest_Link> ProjectTest_Links
	{
		get
		{
			return this.GetTable<ProjectTest_Link>();
		}
	}
	
	public System.Data.Linq.Table<Dimension_Type> Dimension_Types
	{
		get
		{
			return this.GetTable<Dimension_Type>();
		}
	}
	
	public System.Data.Linq.Table<Dimension_Mode> Dimension_Modes
	{
		get
		{
			return this.GetTable<Dimension_Mode>();
		}
	}
	
	public System.Data.Linq.Table<Quest_Type> Quest_Types
	{
		get
		{
			return this.GetTable<Quest_Type>();
		}
	}
	
	public System.Data.Linq.Table<inter_condition> inter_conditions
	{
		get
		{
			return this.GetTable<inter_condition>();
		}
	}
	
	public System.Data.Linq.Table<Test_Data> Test_Datas
	{
		get
		{
			return this.GetTable<Test_Data>();
		}
	}
	
	public System.Data.Linq.Table<test_diagram> test_diagrams
	{
		get
		{
			return this.GetTable<test_diagram>();
		}
	}
	
	public System.Data.Linq.Table<vItemScaleLink> vItemScaleLinks
	{
		get
		{
			return this.GetTable<vItemScaleLink>();
		}
	}
	
	public System.Data.Linq.Table<Resume_Item_Type> Resume_Item_Types
	{
		get
		{
			return this.GetTable<Resume_Item_Type>();
		}
	}
	
	public System.Data.Linq.Table<Param_Value> Param_Values
	{
		get
		{
			return this.GetTable<Param_Value>();
		}
	}
	
	public System.Data.Linq.Table<Test_Results_Txt> Test_Results_Txts
	{
		get
		{
			return this.GetTable<Test_Results_Txt>();
		}
	}
	
	public System.Data.Linq.Table<ConditionRangeType> ConditionRangeTypes
	{
		get
		{
			return this.GetTable<ConditionRangeType>();
		}
	}
	
	public System.Data.Linq.Table<Test_Type> Test_Types
	{
		get
		{
			return this.GetTable<Test_Type>();
		}
	}
	
	public System.Data.Linq.Table<Resume_Item> Resume_Items
	{
		get
		{
			return this.GetTable<Resume_Item>();
		}
	}
	
	public System.Data.Linq.Table<Diagram_Type> Diagram_Types
	{
		get
		{
			return this.GetTable<Diagram_Type>();
		}
	}
	
	public System.Data.Linq.Table<Test_Diagram_Scale> Test_Diagram_Scales
	{
		get
		{
			return this.GetTable<Test_Diagram_Scale>();
		}
	}
	
	public System.Data.Linq.Table<Passport_Template> Passport_Templates
	{
		get
		{
			return this.GetTable<Passport_Template>();
		}
	}
	
	public System.Data.Linq.Table<ScoreCalcType> ScoreCalcTypes
	{
		get
		{
			return this.GetTable<ScoreCalcType>();
		}
	}
	
	public System.Data.Linq.Table<SubScaleDimension> SubScaleDimensions
	{
		get
		{
			return this.GetTable<SubScaleDimension>();
		}
	}
	
	public System.Data.Linq.Table<DiagnosticFieldType> DiagnosticFieldTypes
	{
		get
		{
			return this.GetTable<DiagnosticFieldType>();
		}
	}
	
	public System.Data.Linq.Table<language> languages
	{
		get
		{
			return this.GetTable<language>();
		}
	}
	
	public System.Data.Linq.Table<test_category> test_categories
	{
		get
		{
			return this.GetTable<test_category>();
		}
	}
	
	public System.Data.Linq.Table<SubScale> SubScales
	{
		get
		{
			return this.GetTable<SubScale>();
		}
	}
	
	public System.Data.Linq.Table<ItemScale_Link> ItemScale_Links
	{
		get
		{
			return this.GetTable<ItemScale_Link>();
		}
	}
	
	public System.Data.Linq.Table<Param_Result> Param_Results
	{
		get
		{
			return this.GetTable<Param_Result>();
		}
	}
	
	public System.Data.Linq.Table<Scale_Range> Scale_Ranges
	{
		get
		{
			return this.GetTable<Scale_Range>();
		}
	}
	
	public System.Data.Linq.Table<Scale_Norm> Scale_Norms
	{
		get
		{
			return this.GetTable<Scale_Norm>();
		}
	}
	
	public System.Data.Linq.Table<Test_Result> Test_Results
	{
		get
		{
			return this.GetTable<Test_Result>();
		}
	}
	
	public System.Data.Linq.Table<Test_Question> Test_Questions
	{
		get
		{
			return this.GetTable<Test_Question>();
		}
	}
	
	public System.Data.Linq.Table<Param> Params
	{
		get
		{
			return this.GetTable<Param>();
		}
	}
	
	public System.Data.Linq.Table<dept> depts
	{
		get
		{
			return this.GetTable<dept>();
		}
	}
	
	public System.Data.Linq.Table<Company> Companies
	{
		get
		{
			return this.GetTable<Company>();
		}
	}
	
	public System.Data.Linq.Table<Job> Jobs
	{
		get
		{
			return this.GetTable<Job>();
		}
	}
	
	public System.Data.Linq.Table<user_state> user_states
	{
		get
		{
			return this.GetTable<user_state>();
		}
	}
	
	public System.Data.Linq.Table<Scale> Scales
	{
		get
		{
			return this.GetTable<Scale>();
		}
	}
	
	public System.Data.Linq.Table<report> reports
	{
		get
		{
			return this.GetTable<report>();
		}
	}
	
	public System.Data.Linq.Table<user_account> user_accounts
	{
		get
		{
			return this.GetTable<user_account>();
		}
	}
	
	public System.Data.Linq.Table<Test_SubjectGroup_Link> Test_SubjectGroup_Links
	{
		get
		{
			return this.GetTable<Test_SubjectGroup_Link>();
		}
	}
	
	public System.Data.Linq.Table<rep_item_type> rep_item_types
	{
		get
		{
			return this.GetTable<rep_item_type>();
		}
	}
	
	public System.Data.Linq.Table<rep_item_link> rep_item_links
	{
		get
		{
			return this.GetTable<rep_item_link>();
		}
	}
	
	public System.Data.Linq.Table<Norm_Type> Norm_Types
	{
		get
		{
			return this.GetTable<Norm_Type>();
		}
	}
	
	public System.Data.Linq.Table<interpretation> interpretations
	{
		get
		{
			return this.GetTable<interpretation>();
		}
	}
	
	public System.Data.Linq.Table<rep_test_link> rep_test_links
	{
		get
		{
			return this.GetTable<rep_test_link>();
		}
	}
	
	public System.Data.Linq.Table<test_measure_link> test_measure_links
	{
		get
		{
			return this.GetTable<test_measure_link>();
		}
	}
	
	public System.Data.Linq.Table<subj_fill_type> subj_fill_types
	{
		get
		{
			return this.GetTable<subj_fill_type>();
		}
	}
	
	public System.Data.Linq.Table<sch_frequency> sch_frequencies
	{
		get
		{
			return this.GetTable<sch_frequency>();
		}
	}
	
	public System.Data.Linq.Table<schedule> schedules
	{
		get
		{
			return this.GetTable<schedule>();
		}
	}
	
	public System.Data.Linq.Table<idea_state> idea_states
	{
		get
		{
			return this.GetTable<idea_state>();
		}
	}
	
	public System.Data.Linq.Table<test> tests
	{
		get
		{
			return this.GetTable<test>();
		}
	}
	
	public System.Data.Linq.Table<generator_type> generator_types
	{
		get
		{
			return this.GetTable<generator_type>();
		}
	}
	
	public System.Data.Linq.Table<idea_generator> idea_generators
	{
		get
		{
			return this.GetTable<idea_generator>();
		}
	}
	
	public System.Data.Linq.Table<idea> ideas
	{
		get
		{
			return this.GetTable<idea>();
		}
	}
	
	public System.Data.Linq.Table<test_subject_approved> test_subject_approveds
	{
		get
		{
			return this.GetTable<test_subject_approved>();
		}
	}
	
	public System.Data.Linq.Table<subject_group> subject_groups
	{
		get
		{
			return this.GetTable<subject_group>();
		}
	}
	
	public System.Data.Linq.Table<indicator> indicators
	{
		get
		{
			return this.GetTable<indicator>();
		}
	}
	
	public System.Data.Linq.Table<item> items
	{
		get
		{
			return this.GetTable<item>();
		}
	}
	
	public System.Data.Linq.Table<competence> competences
	{
		get
		{
			return this.GetTable<competence>();
		}
	}
	
	public System.Data.Linq.Table<book> books
	{
		get
		{
			return this.GetTable<book>();
		}
	}
	
	public System.Data.Linq.Table<book_competence_lnk> book_competence_lnks
	{
		get
		{
			return this.GetTable<book_competence_lnk>();
		}
	}
	
	public System.Data.Linq.Table<Raw_Data> Raw_Datas
	{
		get
		{
			return this.GetTable<Raw_Data>();
		}
	}
	
	public System.Data.Linq.Table<Test_Subject> Test_Subjects
	{
		get
		{
			return this.GetTable<Test_Subject>();
		}
	}
	
	public System.Data.Linq.Table<metric> metrics
	{
		get
		{
			return this.GetTable<metric>();
		}
	}
	
	public System.Data.Linq.Table<metric_hist> metric_hists
	{
		get
		{
			return this.GetTable<metric_hist>();
		}
	}
	
	public System.Data.Linq.Table<metric_subj_filter> metric_subj_filters
	{
		get
		{
			return this.GetTable<metric_subj_filter>();
		}
	}
	
	private void DeletevItemScaleLink(vItemScaleLink obj)
	{
		vItemScaleLink original = ((vItemScaleLink)(vItemScaleLinks.GetOriginalEntityState(obj)));
		this.Delete_ItemScaleLink(((System.Nullable<int>)(original.item_id)), ((System.Nullable<int>)(original.scale_id)));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.IsInterpretationFor", IsComposable=true)]
	public System.Nullable<bool> IsInterpretationFor([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> inter_id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubjectID", DbType="Int")] System.Nullable<int> subjectID)
	{
		return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), inter_id, subjectID).ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Test_Delete")]
	public int Test_Delete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Test_ID", DbType="Int")] System.Nullable<int> test_ID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), test_ID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_ItemScaleLink")]
	public int Add_ItemScaleLink([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemID", DbType="Int")] System.Nullable<int> itemID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ScaleID", DbType="Int")] System.Nullable<int> scaleID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemID, scaleID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Delete_ItemScaleLink")]
	public int Delete_ItemScaleLink([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemID", DbType="Int")] System.Nullable<int> itemID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ScaleID", DbType="Int")] System.Nullable<int> scaleID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemID, scaleID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Recalc_Scale_Range")]
	public int Recalc_Scale_Range([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ScaleID", DbType="Int")] System.Nullable<int> scaleID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), scaleID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Delete_Subject")]
	public int Delete_Subject([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubjectID", DbType="Int")] System.Nullable<int> subjectID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), subjectID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CopyItemScaleKF_To")]
	public int CopyItemScaleKF_To([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ScaleID", DbType="Int")] System.Nullable<int> scaleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceItemId", DbType="Int")] System.Nullable<int> sourceItemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DestItemNumber", DbType="Int")] System.Nullable<int> destItemNumber)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), scaleID, sourceItemId, destItemNumber);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetItemDimension")]
	public int SetItemDimension([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemID", DbType="Int")] System.Nullable<int> itemID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DimensionID", DbType="Int")] System.Nullable<int> dimensionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SetMode", DbType="TinyInt")] System.Nullable<byte> setMode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DimensionType", DbType="TinyInt")] System.Nullable<byte> dimensionType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DimensionMode", DbType="TinyInt")] System.Nullable<byte> dimensionMode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GradationCount", DbType="TinyInt")] System.Nullable<byte> gradationCount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MinValue", DbType="Int")] System.Nullable<int> minValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxValue", DbType="Int")] System.Nullable<int> maxValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StepValue", DbType="Decimal(8,3)")] System.Nullable<decimal> stepValue)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemID, dimensionID, setMode, dimensionType, dimensionMode, gradationCount, minValue, maxValue, stepValue);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Param_Age")]
	public int Add_Param_Age([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TestID", DbType="Int")] System.Nullable<int> testID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), testID, groupID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Param_Gender")]
	public int Add_Param_Gender([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TestID", DbType="Int")] System.Nullable<int> testID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), testID, groupID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Test_Copy")]
	public int Test_Copy([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idTest)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idTest);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CalcTestValues")]
	public int CalcTestValues([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BaseSubjectID", DbType="Int")] System.Nullable<int> baseSubjectID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), baseSubjectID);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CalcSubjectTestValues")]
	public int CalcSubjectTestValues([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubjectID", DbType="Int")] System.Nullable<int> subjectID)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), subjectID);
		return ((int)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.projects")]
public partial class project : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private System.Guid _code;
	
	private string _StartMessage;
	
	private string _FinalMessage;
	
	private EntitySet<subject_group> _subject_groups;
	
	private EntitySet<Test_Subject> _Test_Subjects;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(System.Guid value);
    partial void OncodeChanged();
    partial void OnStartMessageChanging(string value);
    partial void OnStartMessageChanged();
    partial void OnFinalMessageChanging(string value);
    partial void OnFinalMessageChanged();
    #endregion
	
	public project()
	{
		this._subject_groups = new EntitySet<subject_group>(new Action<subject_group>(this.attach_subject_groups), new Action<subject_group>(this.detach_subject_groups));
		this._Test_Subjects = new EntitySet<Test_Subject>(new Action<Test_Subject>(this.attach_Test_Subjects), new Action<Test_Subject>(this.detach_Test_Subjects));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid code
	{
		get
		{
			return this._code;
		}
		set
		{
			if ((this._code != value))
			{
				this.OncodeChanging(value);
				this.SendPropertyChanging();
				this._code = value;
				this.SendPropertyChanged("code");
				this.OncodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartMessage", DbType="VarChar(MAX)")]
	public string StartMessage
	{
		get
		{
			return this._StartMessage;
		}
		set
		{
			if ((this._StartMessage != value))
			{
				this.OnStartMessageChanging(value);
				this.SendPropertyChanging();
				this._StartMessage = value;
				this.SendPropertyChanged("StartMessage");
				this.OnStartMessageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalMessage", DbType="VarChar(MAX)")]
	public string FinalMessage
	{
		get
		{
			return this._FinalMessage;
		}
		set
		{
			if ((this._FinalMessage != value))
			{
				this.OnFinalMessageChanging(value);
				this.SendPropertyChanging();
				this._FinalMessage = value;
				this.SendPropertyChanged("FinalMessage");
				this.OnFinalMessageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_subject_group", Storage="_subject_groups", ThisKey="id", OtherKey="project_id")]
	public EntitySet<subject_group> subject_groups
	{
		get
		{
			return this._subject_groups;
		}
		set
		{
			this._subject_groups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_Test_Subject", Storage="_Test_Subjects", ThisKey="id", OtherKey="project_id")]
	public EntitySet<Test_Subject> Test_Subjects
	{
		get
		{
			return this._Test_Subjects;
		}
		set
		{
			this._Test_Subjects.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_subject_groups(subject_group entity)
	{
		this.SendPropertyChanging();
		entity.project = this;
	}
	
	private void detach_subject_groups(subject_group entity)
	{
		this.SendPropertyChanging();
		entity.project = null;
	}
	
	private void attach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.project = this;
	}
	
	private void detach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.project = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTest_Link")]
public partial class ProjectTest_Link
{
	
	private int _Project_ID;
	
	private int _Test_ID;
	
	private System.Nullable<byte> _OrdNumber;
	
	public ProjectTest_Link()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_ID", DbType="Int NOT NULL")]
	public int Project_ID
	{
		get
		{
			return this._Project_ID;
		}
		set
		{
			if ((this._Project_ID != value))
			{
				this._Project_ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_ID", DbType="Int NOT NULL")]
	public int Test_ID
	{
		get
		{
			return this._Test_ID;
		}
		set
		{
			if ((this._Test_ID != value))
			{
				this._Test_ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdNumber", DbType="TinyInt")]
	public System.Nullable<byte> OrdNumber
	{
		get
		{
			return this._OrdNumber;
		}
		set
		{
			if ((this._OrdNumber != value))
			{
				this._OrdNumber = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dimension_Type")]
public partial class Dimension_Type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private System.Nullable<bool> _ForItem;
	
	private System.Nullable<bool> _ForAnket;
	
	private EntitySet<SubScaleDimension> _SubScaleDimensions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnForItemChanging(System.Nullable<bool> value);
    partial void OnForItemChanged();
    partial void OnForAnketChanging(System.Nullable<bool> value);
    partial void OnForAnketChanged();
    #endregion
	
	public Dimension_Type()
	{
		this._SubScaleDimensions = new EntitySet<SubScaleDimension>(new Action<SubScaleDimension>(this.attach_SubScaleDimensions), new Action<SubScaleDimension>(this.detach_SubScaleDimensions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForItem", DbType="Bit")]
	public System.Nullable<bool> ForItem
	{
		get
		{
			return this._ForItem;
		}
		set
		{
			if ((this._ForItem != value))
			{
				this.OnForItemChanging(value);
				this.SendPropertyChanging();
				this._ForItem = value;
				this.SendPropertyChanged("ForItem");
				this.OnForItemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForAnket", DbType="Bit")]
	public System.Nullable<bool> ForAnket
	{
		get
		{
			return this._ForAnket;
		}
		set
		{
			if ((this._ForAnket != value))
			{
				this.OnForAnketChanging(value);
				this.SendPropertyChanging();
				this._ForAnket = value;
				this.SendPropertyChanged("ForAnket");
				this.OnForAnketChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dimension_Type_SubScaleDimension", Storage="_SubScaleDimensions", ThisKey="id", OtherKey="dimension_type")]
	public EntitySet<SubScaleDimension> SubScaleDimensions
	{
		get
		{
			return this._SubScaleDimensions;
		}
		set
		{
			this._SubScaleDimensions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SubScaleDimensions(SubScaleDimension entity)
	{
		this.SendPropertyChanging();
		entity.Dimension_Type1 = this;
	}
	
	private void detach_SubScaleDimensions(SubScaleDimension entity)
	{
		this.SendPropertyChanging();
		entity.Dimension_Type1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dimension_Mode")]
public partial class Dimension_Mode : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private short _id;
	
	private string _name;
	
	private EntitySet<SubScaleDimension> _SubScaleDimensions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Dimension_Mode()
	{
		this._SubScaleDimensions = new EntitySet<SubScaleDimension>(new Action<SubScaleDimension>(this.attach_SubScaleDimensions), new Action<SubScaleDimension>(this.detach_SubScaleDimensions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
	public short id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dimension_Mode_SubScaleDimension", Storage="_SubScaleDimensions", ThisKey="id", OtherKey="dimension_mode")]
	public EntitySet<SubScaleDimension> SubScaleDimensions
	{
		get
		{
			return this._SubScaleDimensions;
		}
		set
		{
			this._SubScaleDimensions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SubScaleDimensions(SubScaleDimension entity)
	{
		this.SendPropertyChanging();
		entity.Dimension_Mode1 = this;
	}
	
	private void detach_SubScaleDimensions(SubScaleDimension entity)
	{
		this.SendPropertyChanging();
		entity.Dimension_Mode1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quest_Type")]
public partial class Quest_Type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<item> _items;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Quest_Type()
	{
		this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quest_Type_item", Storage="_items", ThisKey="id", OtherKey="item_type")]
	public EntitySet<item> items
	{
		get
		{
			return this._items;
		}
		set
		{
			this._items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_items(item entity)
	{
		this.SendPropertyChanging();
		entity.Quest_Type = this;
	}
	
	private void detach_items(item entity)
	{
		this.SendPropertyChanging();
		entity.Quest_Type = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.inter_condition")]
public partial class inter_condition : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _inter_id;
	
	private int _scale_id;
	
	private System.Nullable<decimal> _min_value;
	
	private System.Nullable<decimal> _max_value;
	
	private byte _range_type;
	
	private EntityRef<ConditionRangeType> _ConditionRangeType;
	
	private EntityRef<Scale> _Scale;
	
	private EntityRef<interpretation> _interpretation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oninter_idChanging(int value);
    partial void Oninter_idChanged();
    partial void Onscale_idChanging(int value);
    partial void Onscale_idChanged();
    partial void Onmin_valueChanging(System.Nullable<decimal> value);
    partial void Onmin_valueChanged();
    partial void Onmax_valueChanging(System.Nullable<decimal> value);
    partial void Onmax_valueChanged();
    partial void Onrange_typeChanging(byte value);
    partial void Onrange_typeChanged();
    #endregion
	
	public inter_condition()
	{
		this._ConditionRangeType = default(EntityRef<ConditionRangeType>);
		this._Scale = default(EntityRef<Scale>);
		this._interpretation = default(EntityRef<interpretation>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inter_id", DbType="Int NOT NULL")]
	public int inter_id
	{
		get
		{
			return this._inter_id;
		}
		set
		{
			if ((this._inter_id != value))
			{
				if (this._interpretation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Oninter_idChanging(value);
				this.SendPropertyChanging();
				this._inter_id = value;
				this.SendPropertyChanged("inter_id");
				this.Oninter_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scale_id", DbType="Int NOT NULL")]
	public int scale_id
	{
		get
		{
			return this._scale_id;
		}
		set
		{
			if ((this._scale_id != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onscale_idChanging(value);
				this.SendPropertyChanging();
				this._scale_id = value;
				this.SendPropertyChanged("scale_id");
				this.Onscale_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min_value", DbType="Decimal(6,3)")]
	public System.Nullable<decimal> min_value
	{
		get
		{
			return this._min_value;
		}
		set
		{
			if ((this._min_value != value))
			{
				this.Onmin_valueChanging(value);
				this.SendPropertyChanging();
				this._min_value = value;
				this.SendPropertyChanged("min_value");
				this.Onmin_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max_value", DbType="Decimal(6,3)")]
	public System.Nullable<decimal> max_value
	{
		get
		{
			return this._max_value;
		}
		set
		{
			if ((this._max_value != value))
			{
				this.Onmax_valueChanging(value);
				this.SendPropertyChanging();
				this._max_value = value;
				this.SendPropertyChanged("max_value");
				this.Onmax_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_range_type", DbType="TinyInt NOT NULL")]
	public byte range_type
	{
		get
		{
			return this._range_type;
		}
		set
		{
			if ((this._range_type != value))
			{
				if (this._ConditionRangeType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onrange_typeChanging(value);
				this.SendPropertyChanging();
				this._range_type = value;
				this.SendPropertyChanged("range_type");
				this.Onrange_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConditionRangeType_inter_condition", Storage="_ConditionRangeType", ThisKey="range_type", OtherKey="id", IsForeignKey=true)]
	public ConditionRangeType ConditionRangeType
	{
		get
		{
			return this._ConditionRangeType.Entity;
		}
		set
		{
			ConditionRangeType previousValue = this._ConditionRangeType.Entity;
			if (((previousValue != value) 
						|| (this._ConditionRangeType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ConditionRangeType.Entity = null;
					previousValue.inter_conditions.Remove(this);
				}
				this._ConditionRangeType.Entity = value;
				if ((value != null))
				{
					value.inter_conditions.Add(this);
					this._range_type = value.id;
				}
				else
				{
					this._range_type = default(byte);
				}
				this.SendPropertyChanged("ConditionRangeType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_inter_condition", Storage="_Scale", ThisKey="scale_id", OtherKey="id", IsForeignKey=true)]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.inter_conditions.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.inter_conditions.Add(this);
					this._scale_id = value.id;
				}
				else
				{
					this._scale_id = default(int);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interpretation_inter_condition", Storage="_interpretation", ThisKey="inter_id", OtherKey="id", IsForeignKey=true)]
	public interpretation interpretation
	{
		get
		{
			return this._interpretation.Entity;
		}
		set
		{
			interpretation previousValue = this._interpretation.Entity;
			if (((previousValue != value) 
						|| (this._interpretation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._interpretation.Entity = null;
					previousValue.inter_conditions.Remove(this);
				}
				this._interpretation.Entity = value;
				if ((value != null))
				{
					value.inter_conditions.Add(this);
					this._inter_id = value.id;
				}
				else
				{
					this._inter_id = default(int);
				}
				this.SendPropertyChanged("interpretation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_Data")]
public partial class Test_Data : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Subject_ID;
	
	private int _Scale_ID;
	
	private decimal _Test_Value;
	
	private EntityRef<Scale> _Scale;
	
	private EntityRef<Test_Subject> _Test_Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubject_IDChanging(int value);
    partial void OnSubject_IDChanged();
    partial void OnScale_IDChanging(int value);
    partial void OnScale_IDChanged();
    partial void OnTest_ValueChanging(decimal value);
    partial void OnTest_ValueChanged();
    #endregion
	
	public Test_Data()
	{
		this._Scale = default(EntityRef<Scale>);
		this._Test_Subject = default(EntityRef<Test_Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Subject_ID
	{
		get
		{
			return this._Subject_ID;
		}
		set
		{
			if ((this._Subject_ID != value))
			{
				if (this._Test_Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubject_IDChanging(value);
				this.SendPropertyChanging();
				this._Subject_ID = value;
				this.SendPropertyChanged("Subject_ID");
				this.OnSubject_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scale_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Scale_ID
	{
		get
		{
			return this._Scale_ID;
		}
		set
		{
			if ((this._Scale_ID != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnScale_IDChanging(value);
				this.SendPropertyChanging();
				this._Scale_ID = value;
				this.SendPropertyChanged("Scale_ID");
				this.OnScale_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Value", DbType="decimal(8,3) NOT NULL")]
	public decimal Test_Value
	{
		get
		{
			return this._Test_Value;
		}
		set
		{
			if ((this._Test_Value != value))
			{
				this.OnTest_ValueChanging(value);
				this.SendPropertyChanging();
				this._Test_Value = value;
				this.SendPropertyChanged("Test_Value");
				this.OnTest_ValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Test_Data", Storage="_Scale", ThisKey="Scale_ID", OtherKey="id", IsForeignKey=true)]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.Test_Datas.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.Test_Datas.Add(this);
					this._Scale_ID = value.id;
				}
				else
				{
					this._Scale_ID = default(int);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Test_Data", Storage="_Test_Subject", ThisKey="Subject_ID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Test_Subject Test_Subject
	{
		get
		{
			return this._Test_Subject.Entity;
		}
		set
		{
			Test_Subject previousValue = this._Test_Subject.Entity;
			if (((previousValue != value) 
						|| (this._Test_Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Subject.Entity = null;
					previousValue.Test_Datas.Remove(this);
				}
				this._Test_Subject.Entity = value;
				if ((value != null))
				{
					value.Test_Datas.Add(this);
					this._Subject_ID = value.id;
				}
				else
				{
					this._Subject_ID = default(int);
				}
				this.SendPropertyChanged("Test_Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_diagram")]
public partial class test_diagram : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _test_id;
	
	private string _name;
	
	private byte _diagram_type;
	
	private System.Nullable<decimal> _NormLow;
	
	private System.Nullable<decimal> _NormHigh;
	
	private EntitySet<Resume_Item> _Resume_Items;
	
	private EntitySet<Test_Diagram_Scale> _Test_Diagram_Scales;
	
	private EntitySet<indicator> _indicators;
	
	private EntityRef<Diagram_Type> _Diagram_Type1;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontest_idChanging(int value);
    partial void Ontest_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Ondiagram_typeChanging(byte value);
    partial void Ondiagram_typeChanged();
    partial void OnNormLowChanging(System.Nullable<decimal> value);
    partial void OnNormLowChanged();
    partial void OnNormHighChanging(System.Nullable<decimal> value);
    partial void OnNormHighChanged();
    #endregion
	
	public test_diagram()
	{
		this._Resume_Items = new EntitySet<Resume_Item>(new Action<Resume_Item>(this.attach_Resume_Items), new Action<Resume_Item>(this.detach_Resume_Items));
		this._Test_Diagram_Scales = new EntitySet<Test_Diagram_Scale>(new Action<Test_Diagram_Scale>(this.attach_Test_Diagram_Scales), new Action<Test_Diagram_Scale>(this.detach_Test_Diagram_Scales));
		this._indicators = new EntitySet<indicator>(new Action<indicator>(this.attach_indicators), new Action<indicator>(this.detach_indicators));
		this._Diagram_Type1 = default(EntityRef<Diagram_Type>);
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_id", DbType="Int NOT NULL")]
	public int test_id
	{
		get
		{
			return this._test_id;
		}
		set
		{
			if ((this._test_id != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ontest_idChanging(value);
				this.SendPropertyChanging();
				this._test_id = value;
				this.SendPropertyChanged("test_id");
				this.Ontest_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagram_type", DbType="TinyInt NOT NULL")]
	public byte diagram_type
	{
		get
		{
			return this._diagram_type;
		}
		set
		{
			if ((this._diagram_type != value))
			{
				if (this._Diagram_Type1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondiagram_typeChanging(value);
				this.SendPropertyChanging();
				this._diagram_type = value;
				this.SendPropertyChanged("diagram_type");
				this.Ondiagram_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormLow", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> NormLow
	{
		get
		{
			return this._NormLow;
		}
		set
		{
			if ((this._NormLow != value))
			{
				this.OnNormLowChanging(value);
				this.SendPropertyChanging();
				this._NormLow = value;
				this.SendPropertyChanged("NormLow");
				this.OnNormLowChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormHigh", DbType="Decimal(6,2)")]
	public System.Nullable<decimal> NormHigh
	{
		get
		{
			return this._NormHigh;
		}
		set
		{
			if ((this._NormHigh != value))
			{
				this.OnNormHighChanging(value);
				this.SendPropertyChanging();
				this._NormHigh = value;
				this.SendPropertyChanged("NormHigh");
				this.OnNormHighChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_diagram_Resume_Item", Storage="_Resume_Items", ThisKey="id", OtherKey="diagram_id")]
	public EntitySet<Resume_Item> Resume_Items
	{
		get
		{
			return this._Resume_Items;
		}
		set
		{
			this._Resume_Items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_diagram_Test_Diagram_Scale", Storage="_Test_Diagram_Scales", ThisKey="id", OtherKey="diagram_id")]
	public EntitySet<Test_Diagram_Scale> Test_Diagram_Scales
	{
		get
		{
			return this._Test_Diagram_Scales;
		}
		set
		{
			this._Test_Diagram_Scales.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_diagram_indicator", Storage="_indicators", ThisKey="id", OtherKey="idDiagram")]
	public EntitySet<indicator> indicators
	{
		get
		{
			return this._indicators;
		}
		set
		{
			this._indicators.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagram_Type_test_diagram", Storage="_Diagram_Type1", ThisKey="diagram_type", OtherKey="id", IsForeignKey=true)]
	public Diagram_Type Diagram_Type1
	{
		get
		{
			return this._Diagram_Type1.Entity;
		}
		set
		{
			Diagram_Type previousValue = this._Diagram_Type1.Entity;
			if (((previousValue != value) 
						|| (this._Diagram_Type1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Diagram_Type1.Entity = null;
					previousValue.test_diagrams.Remove(this);
				}
				this._Diagram_Type1.Entity = value;
				if ((value != null))
				{
					value.test_diagrams.Add(this);
					this._diagram_type = value.id;
				}
				else
				{
					this._diagram_type = default(byte);
				}
				this.SendPropertyChanged("Diagram_Type1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_test_diagram", Storage="_test", ThisKey="test_id", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.test_diagrams.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.test_diagrams.Add(this);
					this._test_id = value.id;
				}
				else
				{
					this._test_id = default(int);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.test_diagram = this;
	}
	
	private void detach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.test_diagram = null;
	}
	
	private void attach_Test_Diagram_Scales(Test_Diagram_Scale entity)
	{
		this.SendPropertyChanging();
		entity.test_diagram = this;
	}
	
	private void detach_Test_Diagram_Scales(Test_Diagram_Scale entity)
	{
		this.SendPropertyChanging();
		entity.test_diagram = null;
	}
	
	private void attach_indicators(indicator entity)
	{
		this.SendPropertyChanging();
		entity.test_diagram = this;
	}
	
	private void detach_indicators(indicator entity)
	{
		this.SendPropertyChanging();
		entity.test_diagram = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vItemScaleLink")]
public partial class vItemScaleLink
{
	
	private int _item_id;
	
	private System.Nullable<short> _number;
	
	private string _text;
	
	private int _scale_id;
	
	public vItemScaleLink()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="Int NOT NULL")]
	public int item_id
	{
		get
		{
			return this._item_id;
		}
		set
		{
			if ((this._item_id != value))
			{
				this._item_id = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="SmallInt")]
	public System.Nullable<short> number
	{
		get
		{
			return this._number;
		}
		set
		{
			if ((this._number != value))
			{
				this._number = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(255)")]
	public string text
	{
		get
		{
			return this._text;
		}
		set
		{
			if ((this._text != value))
			{
				this._text = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scale_id", DbType="Int NOT NULL")]
	public int scale_id
	{
		get
		{
			return this._scale_id;
		}
		set
		{
			if ((this._scale_id != value))
			{
				this._scale_id = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resume_Item_Type")]
public partial class Resume_Item_Type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<Resume_Item> _Resume_Items;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Resume_Item_Type()
	{
		this._Resume_Items = new EntitySet<Resume_Item>(new Action<Resume_Item>(this.attach_Resume_Items), new Action<Resume_Item>(this.detach_Resume_Items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resume_Item_Type_Resume_Item", Storage="_Resume_Items", ThisKey="id", OtherKey="Resume_Item_Type")]
	public EntitySet<Resume_Item> Resume_Items
	{
		get
		{
			return this._Resume_Items;
		}
		set
		{
			this._Resume_Items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.Resume_Item_Type1 = this;
	}
	
	private void detach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.Resume_Item_Type1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Param_Values")]
public partial class Param_Value : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _Param_ID;
	
	private string _str_value;
	
	private System.Nullable<byte> _ivalue_1;
	
	private System.Nullable<byte> _ivalue_2;
	
	private EntitySet<Param_Result> _Param_Results;
	
	private EntitySet<Scale_Range> _Scale_Ranges;
	
	private EntitySet<Scale_Range> _Scale_Ranges1;
	
	private EntityRef<Param> _Param;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnParam_IDChanging(int value);
    partial void OnParam_IDChanged();
    partial void Onstr_valueChanging(string value);
    partial void Onstr_valueChanged();
    partial void Onivalue_1Changing(System.Nullable<byte> value);
    partial void Onivalue_1Changed();
    partial void Onivalue_2Changing(System.Nullable<byte> value);
    partial void Onivalue_2Changed();
    #endregion
	
	public Param_Value()
	{
		this._Param_Results = new EntitySet<Param_Result>(new Action<Param_Result>(this.attach_Param_Results), new Action<Param_Result>(this.detach_Param_Results));
		this._Scale_Ranges = new EntitySet<Scale_Range>(new Action<Scale_Range>(this.attach_Scale_Ranges), new Action<Scale_Range>(this.detach_Scale_Ranges));
		this._Scale_Ranges1 = new EntitySet<Scale_Range>(new Action<Scale_Range>(this.attach_Scale_Ranges1), new Action<Scale_Range>(this.detach_Scale_Ranges1));
		this._Param = default(EntityRef<Param>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param_ID", DbType="Int NOT NULL")]
	public int Param_ID
	{
		get
		{
			return this._Param_ID;
		}
		set
		{
			if ((this._Param_ID != value))
			{
				if (this._Param.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParam_IDChanging(value);
				this.SendPropertyChanging();
				this._Param_ID = value;
				this.SendPropertyChanged("Param_ID");
				this.OnParam_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_str_value", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string str_value
	{
		get
		{
			return this._str_value;
		}
		set
		{
			if ((this._str_value != value))
			{
				this.Onstr_valueChanging(value);
				this.SendPropertyChanging();
				this._str_value = value;
				this.SendPropertyChanged("str_value");
				this.Onstr_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ivalue_1", DbType="TinyInt")]
	public System.Nullable<byte> ivalue_1
	{
		get
		{
			return this._ivalue_1;
		}
		set
		{
			if ((this._ivalue_1 != value))
			{
				this.Onivalue_1Changing(value);
				this.SendPropertyChanging();
				this._ivalue_1 = value;
				this.SendPropertyChanged("ivalue_1");
				this.Onivalue_1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ivalue_2", DbType="TinyInt")]
	public System.Nullable<byte> ivalue_2
	{
		get
		{
			return this._ivalue_2;
		}
		set
		{
			if ((this._ivalue_2 != value))
			{
				this.Onivalue_2Changing(value);
				this.SendPropertyChanging();
				this._ivalue_2 = value;
				this.SendPropertyChanged("ivalue_2");
				this.Onivalue_2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Value_Param_Result", Storage="_Param_Results", ThisKey="id", OtherKey="Param_Value_ID")]
	public EntitySet<Param_Result> Param_Results
	{
		get
		{
			return this._Param_Results;
		}
		set
		{
			this._Param_Results.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Value_Scale_Range", Storage="_Scale_Ranges", ThisKey="id", OtherKey="Param2_Value_ID")]
	public EntitySet<Scale_Range> Scale_Ranges
	{
		get
		{
			return this._Scale_Ranges;
		}
		set
		{
			this._Scale_Ranges.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Value_Scale_Range1", Storage="_Scale_Ranges1", ThisKey="id", OtherKey="Param_Value_ID")]
	public EntitySet<Scale_Range> Scale_Ranges1
	{
		get
		{
			return this._Scale_Ranges1;
		}
		set
		{
			this._Scale_Ranges1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Param_Value", Storage="_Param", ThisKey="Param_ID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Param Param
	{
		get
		{
			return this._Param.Entity;
		}
		set
		{
			Param previousValue = this._Param.Entity;
			if (((previousValue != value) 
						|| (this._Param.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Param.Entity = null;
					previousValue.Param_Values.Remove(this);
				}
				this._Param.Entity = value;
				if ((value != null))
				{
					value.Param_Values.Add(this);
					this._Param_ID = value.id;
				}
				else
				{
					this._Param_ID = default(int);
				}
				this.SendPropertyChanged("Param");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Param_Results(Param_Result entity)
	{
		this.SendPropertyChanging();
		entity.Param_Value = this;
	}
	
	private void detach_Param_Results(Param_Result entity)
	{
		this.SendPropertyChanging();
		entity.Param_Value = null;
	}
	
	private void attach_Scale_Ranges(Scale_Range entity)
	{
		this.SendPropertyChanging();
		entity.Param_Value = this;
	}
	
	private void detach_Scale_Ranges(Scale_Range entity)
	{
		this.SendPropertyChanging();
		entity.Param_Value = null;
	}
	
	private void attach_Scale_Ranges1(Scale_Range entity)
	{
		this.SendPropertyChanging();
		entity.Param_Value1 = this;
	}
	
	private void detach_Scale_Ranges1(Scale_Range entity)
	{
		this.SendPropertyChanging();
		entity.Param_Value1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_Results_Txt")]
public partial class Test_Results_Txt : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _subject_id;
	
	private int _item_id;
	
	private string _text;
	
	private EntityRef<item> _item;
	
	private EntityRef<Test_Subject> _Test_Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onsubject_idChanging(int value);
    partial void Onsubject_idChanged();
    partial void Onitem_idChanging(int value);
    partial void Onitem_idChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
	
	public Test_Results_Txt()
	{
		this._item = default(EntityRef<item>);
		this._Test_Subject = default(EntityRef<Test_Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject_id", DbType="Int NOT NULL")]
	public int subject_id
	{
		get
		{
			return this._subject_id;
		}
		set
		{
			if ((this._subject_id != value))
			{
				if (this._Test_Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onsubject_idChanging(value);
				this.SendPropertyChanging();
				this._subject_id = value;
				this.SendPropertyChanged("subject_id");
				this.Onsubject_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="Int NOT NULL")]
	public int item_id
	{
		get
		{
			return this._item_id;
		}
		set
		{
			if ((this._item_id != value))
			{
				if (this._item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onitem_idChanging(value);
				this.SendPropertyChanging();
				this._item_id = value;
				this.SendPropertyChanged("item_id");
				this.Onitem_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(MAX)")]
	public string text
	{
		get
		{
			return this._text;
		}
		set
		{
			if ((this._text != value))
			{
				this.OntextChanging(value);
				this.SendPropertyChanging();
				this._text = value;
				this.SendPropertyChanged("text");
				this.OntextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_Test_Results_Txt", Storage="_item", ThisKey="item_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public item item
	{
		get
		{
			return this._item.Entity;
		}
		set
		{
			item previousValue = this._item.Entity;
			if (((previousValue != value) 
						|| (this._item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._item.Entity = null;
					previousValue.Test_Results_Txts.Remove(this);
				}
				this._item.Entity = value;
				if ((value != null))
				{
					value.Test_Results_Txts.Add(this);
					this._item_id = value.id;
				}
				else
				{
					this._item_id = default(int);
				}
				this.SendPropertyChanged("item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Test_Results_Txt", Storage="_Test_Subject", ThisKey="subject_id", OtherKey="id", IsForeignKey=true)]
	public Test_Subject Test_Subject
	{
		get
		{
			return this._Test_Subject.Entity;
		}
		set
		{
			Test_Subject previousValue = this._Test_Subject.Entity;
			if (((previousValue != value) 
						|| (this._Test_Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Subject.Entity = null;
					previousValue.Test_Results_Txts.Remove(this);
				}
				this._Test_Subject.Entity = value;
				if ((value != null))
				{
					value.Test_Results_Txts.Add(this);
					this._subject_id = value.id;
				}
				else
				{
					this._subject_id = default(int);
				}
				this.SendPropertyChanged("Test_Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConditionRangeType")]
public partial class ConditionRangeType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<inter_condition> _inter_conditions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public ConditionRangeType()
	{
		this._inter_conditions = new EntitySet<inter_condition>(new Action<inter_condition>(this.attach_inter_conditions), new Action<inter_condition>(this.detach_inter_conditions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConditionRangeType_inter_condition", Storage="_inter_conditions", ThisKey="id", OtherKey="range_type")]
	public EntitySet<inter_condition> inter_conditions
	{
		get
		{
			return this._inter_conditions;
		}
		set
		{
			this._inter_conditions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_inter_conditions(inter_condition entity)
	{
		this.SendPropertyChanging();
		entity.ConditionRangeType = this;
	}
	
	private void detach_inter_conditions(inter_condition entity)
	{
		this.SendPropertyChanging();
		entity.ConditionRangeType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_Type")]
public partial class Test_Type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<test> _tests;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Test_Type()
	{
		this._tests = new EntitySet<test>(new Action<test>(this.attach_tests), new Action<test>(this.detach_tests));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Type_test", Storage="_tests", ThisKey="id", OtherKey="test_type")]
	public EntitySet<test> tests
	{
		get
		{
			return this._tests;
		}
		set
		{
			this._tests.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tests(test entity)
	{
		this.SendPropertyChanging();
		entity.Test_Type1 = this;
	}
	
	private void detach_tests(test entity)
	{
		this.SendPropertyChanging();
		entity.Test_Type1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resume_Items")]
public partial class Resume_Item : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _test_id;
	
	private byte _OrderNumber;
	
	private byte _Resume_Item_Type;
	
	private string _item_text;
	
	private System.Nullable<int> _scale_id;
	
	private System.Nullable<int> _diagram_id;
	
	private System.Nullable<bool> _is_scale_exclusive;
	
	private System.Data.Linq.Binary _resume_image;
	
	private System.Nullable<short> _txt_template_id;
	
	private EntityRef<test_diagram> _test_diagram;
	
	private EntityRef<Resume_Item_Type> _Resume_Item_Type1;
	
	private EntityRef<Passport_Template> _Passport_Template;
	
	private EntityRef<Scale> _Scale;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontest_idChanging(int value);
    partial void Ontest_idChanged();
    partial void OnOrderNumberChanging(byte value);
    partial void OnOrderNumberChanged();
    partial void OnResume_Item_TypeChanging(byte value);
    partial void OnResume_Item_TypeChanged();
    partial void Onitem_textChanging(string value);
    partial void Onitem_textChanged();
    partial void Onscale_idChanging(System.Nullable<int> value);
    partial void Onscale_idChanged();
    partial void Ondiagram_idChanging(System.Nullable<int> value);
    partial void Ondiagram_idChanged();
    partial void Onis_scale_exclusiveChanging(System.Nullable<bool> value);
    partial void Onis_scale_exclusiveChanged();
    partial void Onresume_imageChanging(System.Data.Linq.Binary value);
    partial void Onresume_imageChanged();
    partial void Ontxt_template_idChanging(System.Nullable<short> value);
    partial void Ontxt_template_idChanged();
    #endregion
	
	public Resume_Item()
	{
		this._test_diagram = default(EntityRef<test_diagram>);
		this._Resume_Item_Type1 = default(EntityRef<Resume_Item_Type>);
		this._Passport_Template = default(EntityRef<Passport_Template>);
		this._Scale = default(EntityRef<Scale>);
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_id", DbType="Int NOT NULL")]
	public int test_id
	{
		get
		{
			return this._test_id;
		}
		set
		{
			if ((this._test_id != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ontest_idChanging(value);
				this.SendPropertyChanging();
				this._test_id = value;
				this.SendPropertyChanged("test_id");
				this.Ontest_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="TinyInt NOT NULL")]
	public byte OrderNumber
	{
		get
		{
			return this._OrderNumber;
		}
		set
		{
			if ((this._OrderNumber != value))
			{
				this.OnOrderNumberChanging(value);
				this.SendPropertyChanging();
				this._OrderNumber = value;
				this.SendPropertyChanged("OrderNumber");
				this.OnOrderNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resume_Item_Type", DbType="TinyInt NOT NULL")]
	public byte Resume_Item_Type
	{
		get
		{
			return this._Resume_Item_Type;
		}
		set
		{
			if ((this._Resume_Item_Type != value))
			{
				if (this._Resume_Item_Type1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnResume_Item_TypeChanging(value);
				this.SendPropertyChanging();
				this._Resume_Item_Type = value;
				this.SendPropertyChanged("Resume_Item_Type");
				this.OnResume_Item_TypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string item_text
	{
		get
		{
			return this._item_text;
		}
		set
		{
			if ((this._item_text != value))
			{
				this.Onitem_textChanging(value);
				this.SendPropertyChanging();
				this._item_text = value;
				this.SendPropertyChanged("item_text");
				this.Onitem_textChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scale_id", DbType="Int")]
	public System.Nullable<int> scale_id
	{
		get
		{
			return this._scale_id;
		}
		set
		{
			if ((this._scale_id != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onscale_idChanging(value);
				this.SendPropertyChanging();
				this._scale_id = value;
				this.SendPropertyChanged("scale_id");
				this.Onscale_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagram_id", DbType="Int")]
	public System.Nullable<int> diagram_id
	{
		get
		{
			return this._diagram_id;
		}
		set
		{
			if ((this._diagram_id != value))
			{
				if (this._test_diagram.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondiagram_idChanging(value);
				this.SendPropertyChanging();
				this._diagram_id = value;
				this.SendPropertyChanged("diagram_id");
				this.Ondiagram_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_scale_exclusive", DbType="Bit")]
	public System.Nullable<bool> is_scale_exclusive
	{
		get
		{
			return this._is_scale_exclusive;
		}
		set
		{
			if ((this._is_scale_exclusive != value))
			{
				this.Onis_scale_exclusiveChanging(value);
				this.SendPropertyChanging();
				this._is_scale_exclusive = value;
				this.SendPropertyChanged("is_scale_exclusive");
				this.Onis_scale_exclusiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resume_image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary resume_image
	{
		get
		{
			return this._resume_image;
		}
		set
		{
			if ((this._resume_image != value))
			{
				this.Onresume_imageChanging(value);
				this.SendPropertyChanging();
				this._resume_image = value;
				this.SendPropertyChanged("resume_image");
				this.Onresume_imageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_txt_template_id", DbType="SmallInt")]
	public System.Nullable<short> txt_template_id
	{
		get
		{
			return this._txt_template_id;
		}
		set
		{
			if ((this._txt_template_id != value))
			{
				if (this._Passport_Template.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ontxt_template_idChanging(value);
				this.SendPropertyChanging();
				this._txt_template_id = value;
				this.SendPropertyChanged("txt_template_id");
				this.Ontxt_template_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_diagram_Resume_Item", Storage="_test_diagram", ThisKey="diagram_id", OtherKey="id", IsForeignKey=true)]
	public test_diagram test_diagram
	{
		get
		{
			return this._test_diagram.Entity;
		}
		set
		{
			test_diagram previousValue = this._test_diagram.Entity;
			if (((previousValue != value) 
						|| (this._test_diagram.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test_diagram.Entity = null;
					previousValue.Resume_Items.Remove(this);
				}
				this._test_diagram.Entity = value;
				if ((value != null))
				{
					value.Resume_Items.Add(this);
					this._diagram_id = value.id;
				}
				else
				{
					this._diagram_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("test_diagram");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resume_Item_Type_Resume_Item", Storage="_Resume_Item_Type1", ThisKey="Resume_Item_Type", OtherKey="id", IsForeignKey=true)]
	public Resume_Item_Type Resume_Item_Type1
	{
		get
		{
			return this._Resume_Item_Type1.Entity;
		}
		set
		{
			Resume_Item_Type previousValue = this._Resume_Item_Type1.Entity;
			if (((previousValue != value) 
						|| (this._Resume_Item_Type1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Resume_Item_Type1.Entity = null;
					previousValue.Resume_Items.Remove(this);
				}
				this._Resume_Item_Type1.Entity = value;
				if ((value != null))
				{
					value.Resume_Items.Add(this);
					this._Resume_Item_Type = value.id;
				}
				else
				{
					this._Resume_Item_Type = default(byte);
				}
				this.SendPropertyChanged("Resume_Item_Type1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passport_Template_Resume_Item", Storage="_Passport_Template", ThisKey="txt_template_id", OtherKey="id", IsForeignKey=true)]
	public Passport_Template Passport_Template
	{
		get
		{
			return this._Passport_Template.Entity;
		}
		set
		{
			Passport_Template previousValue = this._Passport_Template.Entity;
			if (((previousValue != value) 
						|| (this._Passport_Template.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Passport_Template.Entity = null;
					previousValue.Resume_Items.Remove(this);
				}
				this._Passport_Template.Entity = value;
				if ((value != null))
				{
					value.Resume_Items.Add(this);
					this._txt_template_id = value.id;
				}
				else
				{
					this._txt_template_id = default(Nullable<short>);
				}
				this.SendPropertyChanged("Passport_Template");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Resume_Item", Storage="_Scale", ThisKey="scale_id", OtherKey="id", IsForeignKey=true)]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.Resume_Items.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.Resume_Items.Add(this);
					this._scale_id = value.id;
				}
				else
				{
					this._scale_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Resume_Item", Storage="_test", ThisKey="test_id", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.Resume_Items.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.Resume_Items.Add(this);
					this._test_id = value.id;
				}
				else
				{
					this._test_id = default(int);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Diagram_Type")]
public partial class Diagram_Type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<test_diagram> _test_diagrams;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Diagram_Type()
	{
		this._test_diagrams = new EntitySet<test_diagram>(new Action<test_diagram>(this.attach_test_diagrams), new Action<test_diagram>(this.detach_test_diagrams));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagram_Type_test_diagram", Storage="_test_diagrams", ThisKey="id", OtherKey="diagram_type")]
	public EntitySet<test_diagram> test_diagrams
	{
		get
		{
			return this._test_diagrams;
		}
		set
		{
			this._test_diagrams.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_test_diagrams(test_diagram entity)
	{
		this.SendPropertyChanging();
		entity.Diagram_Type1 = this;
	}
	
	private void detach_test_diagrams(test_diagram entity)
	{
		this.SendPropertyChanging();
		entity.Diagram_Type1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_Diagram_Scales")]
public partial class Test_Diagram_Scale : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _diagram_id;
	
	private int _scale_id;
	
	private System.Nullable<int> _group_id;
	
	private System.Nullable<byte> _OrderNumber;
	
	private EntityRef<test_diagram> _test_diagram;
	
	private EntityRef<Scale> _Scale;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondiagram_idChanging(int value);
    partial void Ondiagram_idChanged();
    partial void Onscale_idChanging(int value);
    partial void Onscale_idChanged();
    partial void Ongroup_idChanging(System.Nullable<int> value);
    partial void Ongroup_idChanged();
    partial void OnOrderNumberChanging(System.Nullable<byte> value);
    partial void OnOrderNumberChanged();
    #endregion
	
	public Test_Diagram_Scale()
	{
		this._test_diagram = default(EntityRef<test_diagram>);
		this._Scale = default(EntityRef<Scale>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagram_id", DbType="Int NOT NULL")]
	public int diagram_id
	{
		get
		{
			return this._diagram_id;
		}
		set
		{
			if ((this._diagram_id != value))
			{
				if (this._test_diagram.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondiagram_idChanging(value);
				this.SendPropertyChanging();
				this._diagram_id = value;
				this.SendPropertyChanged("diagram_id");
				this.Ondiagram_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scale_id", DbType="Int NOT NULL")]
	public int scale_id
	{
		get
		{
			return this._scale_id;
		}
		set
		{
			if ((this._scale_id != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onscale_idChanging(value);
				this.SendPropertyChanging();
				this._scale_id = value;
				this.SendPropertyChanged("scale_id");
				this.Onscale_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="Int")]
	public System.Nullable<int> group_id
	{
		get
		{
			return this._group_id;
		}
		set
		{
			if ((this._group_id != value))
			{
				this.Ongroup_idChanging(value);
				this.SendPropertyChanging();
				this._group_id = value;
				this.SendPropertyChanged("group_id");
				this.Ongroup_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="TinyInt")]
	public System.Nullable<byte> OrderNumber
	{
		get
		{
			return this._OrderNumber;
		}
		set
		{
			if ((this._OrderNumber != value))
			{
				this.OnOrderNumberChanging(value);
				this.SendPropertyChanging();
				this._OrderNumber = value;
				this.SendPropertyChanged("OrderNumber");
				this.OnOrderNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_diagram_Test_Diagram_Scale", Storage="_test_diagram", ThisKey="diagram_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public test_diagram test_diagram
	{
		get
		{
			return this._test_diagram.Entity;
		}
		set
		{
			test_diagram previousValue = this._test_diagram.Entity;
			if (((previousValue != value) 
						|| (this._test_diagram.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test_diagram.Entity = null;
					previousValue.Test_Diagram_Scales.Remove(this);
				}
				this._test_diagram.Entity = value;
				if ((value != null))
				{
					value.Test_Diagram_Scales.Add(this);
					this._diagram_id = value.id;
				}
				else
				{
					this._diagram_id = default(int);
				}
				this.SendPropertyChanged("test_diagram");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Test_Diagram_Scale", Storage="_Scale", ThisKey="scale_id", OtherKey="id", IsForeignKey=true)]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.Test_Diagram_Scales.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.Test_Diagram_Scales.Add(this);
					this._scale_id = value.id;
				}
				else
				{
					this._scale_id = default(int);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Passport_Template")]
public partial class Passport_Template : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private short _id;
	
	private string _name;
	
	private string _comment;
	
	private string _template_text;
	
	private EntitySet<Resume_Item> _Resume_Items;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void Ontemplate_textChanging(string value);
    partial void Ontemplate_textChanged();
    #endregion
	
	public Passport_Template()
	{
		this._Resume_Items = new EntitySet<Resume_Item>(new Action<Resume_Item>(this.attach_Resume_Items), new Action<Resume_Item>(this.detach_Resume_Items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public short id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(255)")]
	public string comment
	{
		get
		{
			return this._comment;
		}
		set
		{
			if ((this._comment != value))
			{
				this.OncommentChanging(value);
				this.SendPropertyChanging();
				this._comment = value;
				this.SendPropertyChanged("comment");
				this.OncommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_template_text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string template_text
	{
		get
		{
			return this._template_text;
		}
		set
		{
			if ((this._template_text != value))
			{
				this.Ontemplate_textChanging(value);
				this.SendPropertyChanging();
				this._template_text = value;
				this.SendPropertyChanged("template_text");
				this.Ontemplate_textChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passport_Template_Resume_Item", Storage="_Resume_Items", ThisKey="id", OtherKey="txt_template_id")]
	public EntitySet<Resume_Item> Resume_Items
	{
		get
		{
			return this._Resume_Items;
		}
		set
		{
			this._Resume_Items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.Passport_Template = this;
	}
	
	private void detach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.Passport_Template = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScoreCalcType")]
public partial class ScoreCalcType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<Scale> _Scales;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public ScoreCalcType()
	{
		this._Scales = new EntitySet<Scale>(new Action<Scale>(this.attach_Scales), new Action<Scale>(this.detach_Scales));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScoreCalcType_Scale", Storage="_Scales", ThisKey="id", OtherKey="ScoreCalcType")]
	public EntitySet<Scale> Scales
	{
		get
		{
			return this._Scales;
		}
		set
		{
			this._Scales.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Scales(Scale entity)
	{
		this.SendPropertyChanging();
		entity.ScoreCalcType1 = this;
	}
	
	private void detach_Scales(Scale entity)
	{
		this.SendPropertyChanging();
		entity.ScoreCalcType1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubScaleDimension")]
public partial class SubScaleDimension : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _test_id;
	
	private string _name;
	
	private byte _dimension_type;
	
	private short _dimension_mode;
	
	private System.Nullable<byte> _GradationCount;
	
	private System.Nullable<bool> _isUniqueSelect;
	
	private System.Nullable<int> _min_value;
	
	private System.Nullable<int> _max_value;
	
	private System.Nullable<decimal> _step_value;
	
	private EntitySet<SubScale> _SubScales;
	
	private EntitySet<item> _items;
	
	private EntityRef<Dimension_Mode> _Dimension_Mode1;
	
	private EntityRef<Dimension_Type> _Dimension_Type1;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontest_idChanging(int value);
    partial void Ontest_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Ondimension_typeChanging(byte value);
    partial void Ondimension_typeChanged();
    partial void Ondimension_modeChanging(short value);
    partial void Ondimension_modeChanged();
    partial void OnGradationCountChanging(System.Nullable<byte> value);
    partial void OnGradationCountChanged();
    partial void OnisUniqueSelectChanging(System.Nullable<bool> value);
    partial void OnisUniqueSelectChanged();
    partial void Onmin_valueChanging(System.Nullable<int> value);
    partial void Onmin_valueChanged();
    partial void Onmax_valueChanging(System.Nullable<int> value);
    partial void Onmax_valueChanged();
    partial void Onstep_valueChanging(System.Nullable<decimal> value);
    partial void Onstep_valueChanged();
    #endregion
	
	public SubScaleDimension()
	{
		this._SubScales = new EntitySet<SubScale>(new Action<SubScale>(this.attach_SubScales), new Action<SubScale>(this.detach_SubScales));
		this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
		this._Dimension_Mode1 = default(EntityRef<Dimension_Mode>);
		this._Dimension_Type1 = default(EntityRef<Dimension_Type>);
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_id", DbType="Int NOT NULL")]
	public int test_id
	{
		get
		{
			return this._test_id;
		}
		set
		{
			if ((this._test_id != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ontest_idChanging(value);
				this.SendPropertyChanging();
				this._test_id = value;
				this.SendPropertyChanged("test_id");
				this.Ontest_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimension_type", DbType="TinyInt NOT NULL")]
	public byte dimension_type
	{
		get
		{
			return this._dimension_type;
		}
		set
		{
			if ((this._dimension_type != value))
			{
				if (this._Dimension_Type1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondimension_typeChanging(value);
				this.SendPropertyChanging();
				this._dimension_type = value;
				this.SendPropertyChanged("dimension_type");
				this.Ondimension_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimension_mode", DbType="SmallInt NOT NULL")]
	public short dimension_mode
	{
		get
		{
			return this._dimension_mode;
		}
		set
		{
			if ((this._dimension_mode != value))
			{
				if (this._Dimension_Mode1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondimension_modeChanging(value);
				this.SendPropertyChanging();
				this._dimension_mode = value;
				this.SendPropertyChanged("dimension_mode");
				this.Ondimension_modeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradationCount", DbType="TinyInt")]
	public System.Nullable<byte> GradationCount
	{
		get
		{
			return this._GradationCount;
		}
		set
		{
			if ((this._GradationCount != value))
			{
				this.OnGradationCountChanging(value);
				this.SendPropertyChanging();
				this._GradationCount = value;
				this.SendPropertyChanged("GradationCount");
				this.OnGradationCountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isUniqueSelect", DbType="Bit")]
	public System.Nullable<bool> isUniqueSelect
	{
		get
		{
			return this._isUniqueSelect;
		}
		set
		{
			if ((this._isUniqueSelect != value))
			{
				this.OnisUniqueSelectChanging(value);
				this.SendPropertyChanging();
				this._isUniqueSelect = value;
				this.SendPropertyChanged("isUniqueSelect");
				this.OnisUniqueSelectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min_value", DbType="Int")]
	public System.Nullable<int> min_value
	{
		get
		{
			return this._min_value;
		}
		set
		{
			if ((this._min_value != value))
			{
				this.Onmin_valueChanging(value);
				this.SendPropertyChanging();
				this._min_value = value;
				this.SendPropertyChanged("min_value");
				this.Onmin_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max_value", DbType="Int")]
	public System.Nullable<int> max_value
	{
		get
		{
			return this._max_value;
		}
		set
		{
			if ((this._max_value != value))
			{
				this.Onmax_valueChanging(value);
				this.SendPropertyChanging();
				this._max_value = value;
				this.SendPropertyChanged("max_value");
				this.Onmax_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_step_value", DbType="Decimal(8,3)")]
	public System.Nullable<decimal> step_value
	{
		get
		{
			return this._step_value;
		}
		set
		{
			if ((this._step_value != value))
			{
				this.Onstep_valueChanging(value);
				this.SendPropertyChanging();
				this._step_value = value;
				this.SendPropertyChanged("step_value");
				this.Onstep_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubScaleDimension_SubScale", Storage="_SubScales", ThisKey="id", OtherKey="Dimension_ID")]
	public EntitySet<SubScale> SubScales
	{
		get
		{
			return this._SubScales;
		}
		set
		{
			this._SubScales.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubScaleDimension_item", Storage="_items", ThisKey="id", OtherKey="dimension_id")]
	public EntitySet<item> items
	{
		get
		{
			return this._items;
		}
		set
		{
			this._items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dimension_Mode_SubScaleDimension", Storage="_Dimension_Mode1", ThisKey="dimension_mode", OtherKey="id", IsForeignKey=true)]
	public Dimension_Mode Dimension_Mode1
	{
		get
		{
			return this._Dimension_Mode1.Entity;
		}
		set
		{
			Dimension_Mode previousValue = this._Dimension_Mode1.Entity;
			if (((previousValue != value) 
						|| (this._Dimension_Mode1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Dimension_Mode1.Entity = null;
					previousValue.SubScaleDimensions.Remove(this);
				}
				this._Dimension_Mode1.Entity = value;
				if ((value != null))
				{
					value.SubScaleDimensions.Add(this);
					this._dimension_mode = value.id;
				}
				else
				{
					this._dimension_mode = default(short);
				}
				this.SendPropertyChanged("Dimension_Mode1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dimension_Type_SubScaleDimension", Storage="_Dimension_Type1", ThisKey="dimension_type", OtherKey="id", IsForeignKey=true)]
	public Dimension_Type Dimension_Type1
	{
		get
		{
			return this._Dimension_Type1.Entity;
		}
		set
		{
			Dimension_Type previousValue = this._Dimension_Type1.Entity;
			if (((previousValue != value) 
						|| (this._Dimension_Type1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Dimension_Type1.Entity = null;
					previousValue.SubScaleDimensions.Remove(this);
				}
				this._Dimension_Type1.Entity = value;
				if ((value != null))
				{
					value.SubScaleDimensions.Add(this);
					this._dimension_type = value.id;
				}
				else
				{
					this._dimension_type = default(byte);
				}
				this.SendPropertyChanged("Dimension_Type1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_SubScaleDimension", Storage="_test", ThisKey="test_id", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.SubScaleDimensions.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.SubScaleDimensions.Add(this);
					this._test_id = value.id;
				}
				else
				{
					this._test_id = default(int);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SubScales(SubScale entity)
	{
		this.SendPropertyChanging();
		entity.SubScaleDimension = this;
	}
	
	private void detach_SubScales(SubScale entity)
	{
		this.SendPropertyChanging();
		entity.SubScaleDimension = null;
	}
	
	private void attach_items(item entity)
	{
		this.SendPropertyChanging();
		entity.SubScaleDimension = this;
	}
	
	private void detach_items(item entity)
	{
		this.SendPropertyChanging();
		entity.SubScaleDimension = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiagnosticFieldType")]
public partial class DiagnosticFieldType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<test> _tests;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public DiagnosticFieldType()
	{
		this._tests = new EntitySet<test>(new Action<test>(this.attach_tests), new Action<test>(this.detach_tests));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiagnosticFieldType_test", Storage="_tests", ThisKey="id", OtherKey="diagnostic_field")]
	public EntitySet<test> tests
	{
		get
		{
			return this._tests;
		}
		set
		{
			this._tests.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tests(test entity)
	{
		this.SendPropertyChanging();
		entity.DiagnosticFieldType = this;
	}
	
	private void detach_tests(test entity)
	{
		this.SendPropertyChanging();
		entity.DiagnosticFieldType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.language")]
public partial class language : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<test> _tests;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public language()
	{
		this._tests = new EntitySet<test>(new Action<test>(this.attach_tests), new Action<test>(this.detach_tests));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="language_test", Storage="_tests", ThisKey="id", OtherKey="language_type")]
	public EntitySet<test> tests
	{
		get
		{
			return this._tests;
		}
		set
		{
			this._tests.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tests(test entity)
	{
		this.SendPropertyChanging();
		entity.language = this;
	}
	
	private void detach_tests(test entity)
	{
		this.SendPropertyChanging();
		entity.language = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_category")]
public partial class test_category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<test> _tests;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public test_category()
	{
		this._tests = new EntitySet<test>(new Action<test>(this.attach_tests), new Action<test>(this.detach_tests));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_category_test", Storage="_tests", ThisKey="id", OtherKey="category_id")]
	public EntitySet<test> tests
	{
		get
		{
			return this._tests;
		}
		set
		{
			this._tests.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tests(test entity)
	{
		this.SendPropertyChanging();
		entity.test_category = this;
	}
	
	private void detach_tests(test entity)
	{
		this.SendPropertyChanging();
		entity.test_category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubScales")]
public partial class SubScale : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _Dimension_ID;
	
	private string _name;
	
	private byte _OrderNumber;
	
	private EntitySet<ItemScale_Link> _ItemScale_Links;
	
	private EntitySet<Test_Result> _Test_Results;
	
	private EntityRef<SubScaleDimension> _SubScaleDimension;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDimension_IDChanging(int value);
    partial void OnDimension_IDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnOrderNumberChanging(byte value);
    partial void OnOrderNumberChanged();
    #endregion
	
	public SubScale()
	{
		this._ItemScale_Links = new EntitySet<ItemScale_Link>(new Action<ItemScale_Link>(this.attach_ItemScale_Links), new Action<ItemScale_Link>(this.detach_ItemScale_Links));
		this._Test_Results = new EntitySet<Test_Result>(new Action<Test_Result>(this.attach_Test_Results), new Action<Test_Result>(this.detach_Test_Results));
		this._SubScaleDimension = default(EntityRef<SubScaleDimension>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dimension_ID", DbType="Int NOT NULL")]
	public int Dimension_ID
	{
		get
		{
			return this._Dimension_ID;
		}
		set
		{
			if ((this._Dimension_ID != value))
			{
				if (this._SubScaleDimension.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDimension_IDChanging(value);
				this.SendPropertyChanging();
				this._Dimension_ID = value;
				this.SendPropertyChanged("Dimension_ID");
				this.OnDimension_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="TinyInt NOT NULL")]
	public byte OrderNumber
	{
		get
		{
			return this._OrderNumber;
		}
		set
		{
			if ((this._OrderNumber != value))
			{
				this.OnOrderNumberChanging(value);
				this.SendPropertyChanging();
				this._OrderNumber = value;
				this.SendPropertyChanged("OrderNumber");
				this.OnOrderNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubScale_ItemScale_Link", Storage="_ItemScale_Links", ThisKey="id,Dimension_ID", OtherKey="subscale_id,dimension_id")]
	public EntitySet<ItemScale_Link> ItemScale_Links
	{
		get
		{
			return this._ItemScale_Links;
		}
		set
		{
			this._ItemScale_Links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubScale_Test_Result", Storage="_Test_Results", ThisKey="id", OtherKey="SubScale_ID")]
	public EntitySet<Test_Result> Test_Results
	{
		get
		{
			return this._Test_Results;
		}
		set
		{
			this._Test_Results.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubScaleDimension_SubScale", Storage="_SubScaleDimension", ThisKey="Dimension_ID", OtherKey="id", IsForeignKey=true)]
	public SubScaleDimension SubScaleDimension
	{
		get
		{
			return this._SubScaleDimension.Entity;
		}
		set
		{
			SubScaleDimension previousValue = this._SubScaleDimension.Entity;
			if (((previousValue != value) 
						|| (this._SubScaleDimension.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SubScaleDimension.Entity = null;
					previousValue.SubScales.Remove(this);
				}
				this._SubScaleDimension.Entity = value;
				if ((value != null))
				{
					value.SubScales.Add(this);
					this._Dimension_ID = value.id;
				}
				else
				{
					this._Dimension_ID = default(int);
				}
				this.SendPropertyChanged("SubScaleDimension");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ItemScale_Links(ItemScale_Link entity)
	{
		this.SendPropertyChanging();
		entity.SubScale = this;
	}
	
	private void detach_ItemScale_Links(ItemScale_Link entity)
	{
		this.SendPropertyChanging();
		entity.SubScale = null;
	}
	
	private void attach_Test_Results(Test_Result entity)
	{
		this.SendPropertyChanging();
		entity.SubScale = this;
	}
	
	private void detach_Test_Results(Test_Result entity)
	{
		this.SendPropertyChanging();
		entity.SubScale = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemScale_Link")]
public partial class ItemScale_Link : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _item_id;
	
	private int _scale_id;
	
	private int _subscale_id;
	
	private decimal _kf;
	
	private System.Nullable<int> _dimension_id;
	
	private EntityRef<SubScale> _SubScale;
	
	private EntityRef<Scale> _Scale;
	
	private EntityRef<item> _item;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onitem_idChanging(int value);
    partial void Onitem_idChanged();
    partial void Onscale_idChanging(int value);
    partial void Onscale_idChanged();
    partial void Onsubscale_idChanging(int value);
    partial void Onsubscale_idChanged();
    partial void OnkfChanging(decimal value);
    partial void OnkfChanged();
    partial void Ondimension_idChanging(System.Nullable<int> value);
    partial void Ondimension_idChanged();
    #endregion
	
	public ItemScale_Link()
	{
		this._SubScale = default(EntityRef<SubScale>);
		this._Scale = default(EntityRef<Scale>);
		this._item = default(EntityRef<item>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="Int NOT NULL")]
	public int item_id
	{
		get
		{
			return this._item_id;
		}
		set
		{
			if ((this._item_id != value))
			{
				if (this._item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onitem_idChanging(value);
				this.SendPropertyChanging();
				this._item_id = value;
				this.SendPropertyChanged("item_id");
				this.Onitem_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scale_id", DbType="Int NOT NULL")]
	public int scale_id
	{
		get
		{
			return this._scale_id;
		}
		set
		{
			if ((this._scale_id != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onscale_idChanging(value);
				this.SendPropertyChanging();
				this._scale_id = value;
				this.SendPropertyChanged("scale_id");
				this.Onscale_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subscale_id", DbType="Int NOT NULL")]
	public int subscale_id
	{
		get
		{
			return this._subscale_id;
		}
		set
		{
			if ((this._subscale_id != value))
			{
				if (this._SubScale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onsubscale_idChanging(value);
				this.SendPropertyChanging();
				this._subscale_id = value;
				this.SendPropertyChanged("subscale_id");
				this.Onsubscale_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kf", DbType="Decimal(8,3) NOT NULL")]
	public decimal kf
	{
		get
		{
			return this._kf;
		}
		set
		{
			if ((this._kf != value))
			{
				this.OnkfChanging(value);
				this.SendPropertyChanging();
				this._kf = value;
				this.SendPropertyChanged("kf");
				this.OnkfChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimension_id", DbType="Int")]
	public System.Nullable<int> dimension_id
	{
		get
		{
			return this._dimension_id;
		}
		set
		{
			if ((this._dimension_id != value))
			{
				if ((this._SubScale.HasLoadedOrAssignedValue || this._item.HasLoadedOrAssignedValue))
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondimension_idChanging(value);
				this.SendPropertyChanging();
				this._dimension_id = value;
				this.SendPropertyChanged("dimension_id");
				this.Ondimension_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubScale_ItemScale_Link", Storage="_SubScale", ThisKey="subscale_id,dimension_id", OtherKey="id,Dimension_ID", IsForeignKey=true)]
	public SubScale SubScale
	{
		get
		{
			return this._SubScale.Entity;
		}
		set
		{
			SubScale previousValue = this._SubScale.Entity;
			if (((previousValue != value) 
						|| (this._SubScale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SubScale.Entity = null;
					previousValue.ItemScale_Links.Remove(this);
				}
				this._SubScale.Entity = value;
				if ((value != null))
				{
					value.ItemScale_Links.Add(this);
					this._subscale_id = value.id;
					this._dimension_id = value.Dimension_ID;
				}
				else
				{
					this._subscale_id = default(int);
					this._dimension_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("SubScale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_ItemScale_Link", Storage="_Scale", ThisKey="scale_id", OtherKey="id", IsForeignKey=true)]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.ItemScale_Links.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.ItemScale_Links.Add(this);
					this._scale_id = value.id;
				}
				else
				{
					this._scale_id = default(int);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_ItemScale_Link", Storage="_item", ThisKey="item_id,dimension_id", OtherKey="id,dimension_id", IsForeignKey=true)]
	public item item
	{
		get
		{
			return this._item.Entity;
		}
		set
		{
			item previousValue = this._item.Entity;
			if (((previousValue != value) 
						|| (this._item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._item.Entity = null;
					previousValue.ItemScale_Links.Remove(this);
				}
				this._item.Entity = value;
				if ((value != null))
				{
					value.ItemScale_Links.Add(this);
					this._item_id = value.id;
					this._dimension_id = value.dimension_id;
				}
				else
				{
					this._item_id = default(int);
					this._dimension_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("item");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Param_Results")]
public partial class Param_Result : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<int> _Param_Value_ID;
	
	private int _Subject_ID;
	
	private string _txt_value;
	
	private EntityRef<Param_Value> _Param_Value;
	
	private EntityRef<Test_Subject> _Test_Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnParam_Value_IDChanging(System.Nullable<int> value);
    partial void OnParam_Value_IDChanged();
    partial void OnSubject_IDChanging(int value);
    partial void OnSubject_IDChanged();
    partial void Ontxt_valueChanging(string value);
    partial void Ontxt_valueChanged();
    #endregion
	
	public Param_Result()
	{
		this._Param_Value = default(EntityRef<Param_Value>);
		this._Test_Subject = default(EntityRef<Test_Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param_Value_ID", DbType="Int")]
	public System.Nullable<int> Param_Value_ID
	{
		get
		{
			return this._Param_Value_ID;
		}
		set
		{
			if ((this._Param_Value_ID != value))
			{
				if (this._Param_Value.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParam_Value_IDChanging(value);
				this.SendPropertyChanging();
				this._Param_Value_ID = value;
				this.SendPropertyChanged("Param_Value_ID");
				this.OnParam_Value_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_ID", DbType="Int NOT NULL")]
	public int Subject_ID
	{
		get
		{
			return this._Subject_ID;
		}
		set
		{
			if ((this._Subject_ID != value))
			{
				if (this._Test_Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubject_IDChanging(value);
				this.SendPropertyChanging();
				this._Subject_ID = value;
				this.SendPropertyChanged("Subject_ID");
				this.OnSubject_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_txt_value", DbType="NVarChar(255)")]
	public string txt_value
	{
		get
		{
			return this._txt_value;
		}
		set
		{
			if ((this._txt_value != value))
			{
				this.Ontxt_valueChanging(value);
				this.SendPropertyChanging();
				this._txt_value = value;
				this.SendPropertyChanged("txt_value");
				this.Ontxt_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Value_Param_Result", Storage="_Param_Value", ThisKey="Param_Value_ID", OtherKey="id", IsForeignKey=true)]
	public Param_Value Param_Value
	{
		get
		{
			return this._Param_Value.Entity;
		}
		set
		{
			Param_Value previousValue = this._Param_Value.Entity;
			if (((previousValue != value) 
						|| (this._Param_Value.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Param_Value.Entity = null;
					previousValue.Param_Results.Remove(this);
				}
				this._Param_Value.Entity = value;
				if ((value != null))
				{
					value.Param_Results.Add(this);
					this._Param_Value_ID = value.id;
				}
				else
				{
					this._Param_Value_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Param_Value");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Param_Result", Storage="_Test_Subject", ThisKey="Subject_ID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Test_Subject Test_Subject
	{
		get
		{
			return this._Test_Subject.Entity;
		}
		set
		{
			Test_Subject previousValue = this._Test_Subject.Entity;
			if (((previousValue != value) 
						|| (this._Test_Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Subject.Entity = null;
					previousValue.Param_Results.Remove(this);
				}
				this._Test_Subject.Entity = value;
				if ((value != null))
				{
					value.Param_Results.Add(this);
					this._Subject_ID = value.id;
				}
				else
				{
					this._Subject_ID = default(int);
				}
				this.SendPropertyChanged("Test_Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scale_Range")]
public partial class Scale_Range : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Scale_ID;
	
	private short _Max_Value;
	
	private decimal _Score;
	
	private System.Nullable<int> _Param_Value_ID;
	
	private int _id;
	
	private System.Nullable<int> _Param2_Value_ID;
	
	private EntityRef<Param_Value> _Param_Value;
	
	private EntityRef<Param_Value> _Param_Value1;
	
	private EntityRef<Scale> _Scale;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScale_IDChanging(int value);
    partial void OnScale_IDChanged();
    partial void OnMax_ValueChanging(short value);
    partial void OnMax_ValueChanged();
    partial void OnScoreChanging(decimal value);
    partial void OnScoreChanged();
    partial void OnParam_Value_IDChanging(System.Nullable<int> value);
    partial void OnParam_Value_IDChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnParam2_Value_IDChanging(System.Nullable<int> value);
    partial void OnParam2_Value_IDChanged();
    #endregion
	
	public Scale_Range()
	{
		this._Param_Value = default(EntityRef<Param_Value>);
		this._Param_Value1 = default(EntityRef<Param_Value>);
		this._Scale = default(EntityRef<Scale>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scale_ID", DbType="Int NOT NULL")]
	public int Scale_ID
	{
		get
		{
			return this._Scale_ID;
		}
		set
		{
			if ((this._Scale_ID != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnScale_IDChanging(value);
				this.SendPropertyChanging();
				this._Scale_ID = value;
				this.SendPropertyChanged("Scale_ID");
				this.OnScale_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max_Value", DbType="SmallInt NOT NULL")]
	public short Max_Value
	{
		get
		{
			return this._Max_Value;
		}
		set
		{
			if ((this._Max_Value != value))
			{
				this.OnMax_ValueChanging(value);
				this.SendPropertyChanging();
				this._Max_Value = value;
				this.SendPropertyChanged("Max_Value");
				this.OnMax_ValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Decimal(6,3) NOT NULL")]
	public decimal Score
	{
		get
		{
			return this._Score;
		}
		set
		{
			if ((this._Score != value))
			{
				this.OnScoreChanging(value);
				this.SendPropertyChanging();
				this._Score = value;
				this.SendPropertyChanged("Score");
				this.OnScoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param_Value_ID", DbType="Int")]
	public System.Nullable<int> Param_Value_ID
	{
		get
		{
			return this._Param_Value_ID;
		}
		set
		{
			if ((this._Param_Value_ID != value))
			{
				if (this._Param_Value1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParam_Value_IDChanging(value);
				this.SendPropertyChanging();
				this._Param_Value_ID = value;
				this.SendPropertyChanged("Param_Value_ID");
				this.OnParam_Value_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param2_Value_ID", DbType="Int")]
	public System.Nullable<int> Param2_Value_ID
	{
		get
		{
			return this._Param2_Value_ID;
		}
		set
		{
			if ((this._Param2_Value_ID != value))
			{
				if (this._Param_Value.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParam2_Value_IDChanging(value);
				this.SendPropertyChanging();
				this._Param2_Value_ID = value;
				this.SendPropertyChanged("Param2_Value_ID");
				this.OnParam2_Value_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Value_Scale_Range", Storage="_Param_Value", ThisKey="Param2_Value_ID", OtherKey="id", IsForeignKey=true)]
	public Param_Value Param_Value
	{
		get
		{
			return this._Param_Value.Entity;
		}
		set
		{
			Param_Value previousValue = this._Param_Value.Entity;
			if (((previousValue != value) 
						|| (this._Param_Value.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Param_Value.Entity = null;
					previousValue.Scale_Ranges.Remove(this);
				}
				this._Param_Value.Entity = value;
				if ((value != null))
				{
					value.Scale_Ranges.Add(this);
					this._Param2_Value_ID = value.id;
				}
				else
				{
					this._Param2_Value_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Param_Value");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Value_Scale_Range1", Storage="_Param_Value1", ThisKey="Param_Value_ID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public Param_Value Param_Value1
	{
		get
		{
			return this._Param_Value1.Entity;
		}
		set
		{
			Param_Value previousValue = this._Param_Value1.Entity;
			if (((previousValue != value) 
						|| (this._Param_Value1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Param_Value1.Entity = null;
					previousValue.Scale_Ranges1.Remove(this);
				}
				this._Param_Value1.Entity = value;
				if ((value != null))
				{
					value.Scale_Ranges1.Add(this);
					this._Param_Value_ID = value.id;
				}
				else
				{
					this._Param_Value_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Param_Value1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Scale_Range", Storage="_Scale", ThisKey="Scale_ID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.Scale_Ranges.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.Scale_Ranges.Add(this);
					this._Scale_ID = value.id;
				}
				else
				{
					this._Scale_ID = default(int);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scale_Norm")]
public partial class Scale_Norm : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private byte _NormType_id;
	
	private int _Scale_ID;
	
	private decimal _LowRange;
	
	private decimal _HighRange;
	
	private EntityRef<Scale> _Scale;
	
	private EntityRef<Norm_Type> _Norm_Type;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNormType_idChanging(byte value);
    partial void OnNormType_idChanged();
    partial void OnScale_IDChanging(int value);
    partial void OnScale_IDChanged();
    partial void OnLowRangeChanging(decimal value);
    partial void OnLowRangeChanged();
    partial void OnHighRangeChanging(decimal value);
    partial void OnHighRangeChanged();
    #endregion
	
	public Scale_Norm()
	{
		this._Scale = default(EntityRef<Scale>);
		this._Norm_Type = default(EntityRef<Norm_Type>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NormType_id", DbType="TinyInt NOT NULL")]
	public byte NormType_id
	{
		get
		{
			return this._NormType_id;
		}
		set
		{
			if ((this._NormType_id != value))
			{
				if (this._Norm_Type.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNormType_idChanging(value);
				this.SendPropertyChanging();
				this._NormType_id = value;
				this.SendPropertyChanged("NormType_id");
				this.OnNormType_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scale_ID", DbType="Int NOT NULL")]
	public int Scale_ID
	{
		get
		{
			return this._Scale_ID;
		}
		set
		{
			if ((this._Scale_ID != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnScale_IDChanging(value);
				this.SendPropertyChanging();
				this._Scale_ID = value;
				this.SendPropertyChanged("Scale_ID");
				this.OnScale_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowRange", DbType="Decimal(10,4) NOT NULL")]
	public decimal LowRange
	{
		get
		{
			return this._LowRange;
		}
		set
		{
			if ((this._LowRange != value))
			{
				this.OnLowRangeChanging(value);
				this.SendPropertyChanging();
				this._LowRange = value;
				this.SendPropertyChanged("LowRange");
				this.OnLowRangeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighRange", DbType="Decimal(10,4) NOT NULL")]
	public decimal HighRange
	{
		get
		{
			return this._HighRange;
		}
		set
		{
			if ((this._HighRange != value))
			{
				this.OnHighRangeChanging(value);
				this.SendPropertyChanging();
				this._HighRange = value;
				this.SendPropertyChanged("HighRange");
				this.OnHighRangeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Scale_Norm", Storage="_Scale", ThisKey="Scale_ID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.Scale_Norms.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.Scale_Norms.Add(this);
					this._Scale_ID = value.id;
				}
				else
				{
					this._Scale_ID = default(int);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Norm_Type_Scale_Norm", Storage="_Norm_Type", ThisKey="NormType_id", OtherKey="id", IsForeignKey=true)]
	public Norm_Type Norm_Type
	{
		get
		{
			return this._Norm_Type.Entity;
		}
		set
		{
			Norm_Type previousValue = this._Norm_Type.Entity;
			if (((previousValue != value) 
						|| (this._Norm_Type.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Norm_Type.Entity = null;
					previousValue.Scale_Norms.Remove(this);
				}
				this._Norm_Type.Entity = value;
				if ((value != null))
				{
					value.Scale_Norms.Add(this);
					this._NormType_id = value.id;
				}
				else
				{
					this._NormType_id = default(byte);
				}
				this.SendPropertyChanged("Norm_Type");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_Results")]
public partial class Test_Result : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _Subject_ID;
	
	private int _item_id;
	
	private System.Nullable<int> _SubScale_ID;
	
	private System.Nullable<short> _SelectedValue;
	
	private EntityRef<SubScale> _SubScale;
	
	private EntityRef<item> _item;
	
	private EntityRef<Test_Subject> _Test_Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSubject_IDChanging(int value);
    partial void OnSubject_IDChanged();
    partial void Onitem_idChanging(int value);
    partial void Onitem_idChanged();
    partial void OnSubScale_IDChanging(System.Nullable<int> value);
    partial void OnSubScale_IDChanged();
    partial void OnSelectedValueChanging(System.Nullable<short> value);
    partial void OnSelectedValueChanged();
    #endregion
	
	public Test_Result()
	{
		this._SubScale = default(EntityRef<SubScale>);
		this._item = default(EntityRef<item>);
		this._Test_Subject = default(EntityRef<Test_Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_ID", DbType="Int NOT NULL")]
	public int Subject_ID
	{
		get
		{
			return this._Subject_ID;
		}
		set
		{
			if ((this._Subject_ID != value))
			{
				if (this._Test_Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubject_IDChanging(value);
				this.SendPropertyChanging();
				this._Subject_ID = value;
				this.SendPropertyChanged("Subject_ID");
				this.OnSubject_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="Int NOT NULL")]
	public int item_id
	{
		get
		{
			return this._item_id;
		}
		set
		{
			if ((this._item_id != value))
			{
				if (this._item.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onitem_idChanging(value);
				this.SendPropertyChanging();
				this._item_id = value;
				this.SendPropertyChanged("item_id");
				this.Onitem_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubScale_ID", DbType="Int")]
	public System.Nullable<int> SubScale_ID
	{
		get
		{
			return this._SubScale_ID;
		}
		set
		{
			if ((this._SubScale_ID != value))
			{
				if (this._SubScale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubScale_IDChanging(value);
				this.SendPropertyChanging();
				this._SubScale_ID = value;
				this.SendPropertyChanged("SubScale_ID");
				this.OnSubScale_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedValue", DbType="SmallInt")]
	public System.Nullable<short> SelectedValue
	{
		get
		{
			return this._SelectedValue;
		}
		set
		{
			if ((this._SelectedValue != value))
			{
				this.OnSelectedValueChanging(value);
				this.SendPropertyChanging();
				this._SelectedValue = value;
				this.SendPropertyChanged("SelectedValue");
				this.OnSelectedValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubScale_Test_Result", Storage="_SubScale", ThisKey="SubScale_ID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public SubScale SubScale
	{
		get
		{
			return this._SubScale.Entity;
		}
		set
		{
			SubScale previousValue = this._SubScale.Entity;
			if (((previousValue != value) 
						|| (this._SubScale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SubScale.Entity = null;
					previousValue.Test_Results.Remove(this);
				}
				this._SubScale.Entity = value;
				if ((value != null))
				{
					value.Test_Results.Add(this);
					this._SubScale_ID = value.id;
				}
				else
				{
					this._SubScale_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("SubScale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_Test_Result", Storage="_item", ThisKey="item_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public item item
	{
		get
		{
			return this._item.Entity;
		}
		set
		{
			item previousValue = this._item.Entity;
			if (((previousValue != value) 
						|| (this._item.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._item.Entity = null;
					previousValue.Test_Results.Remove(this);
				}
				this._item.Entity = value;
				if ((value != null))
				{
					value.Test_Results.Add(this);
					this._item_id = value.id;
				}
				else
				{
					this._item_id = default(int);
				}
				this.SendPropertyChanged("item");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Test_Result", Storage="_Test_Subject", ThisKey="Subject_ID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Test_Subject Test_Subject
	{
		get
		{
			return this._Test_Subject.Entity;
		}
		set
		{
			Test_Subject previousValue = this._Test_Subject.Entity;
			if (((previousValue != value) 
						|| (this._Test_Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Subject.Entity = null;
					previousValue.Test_Results.Remove(this);
				}
				this._Test_Subject.Entity = value;
				if ((value != null))
				{
					value.Test_Results.Add(this);
					this._Subject_ID = value.id;
				}
				else
				{
					this._Subject_ID = default(int);
				}
				this.SendPropertyChanged("Test_Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_Question")]
public partial class Test_Question : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _test_id;
	
	private string _text;
	
	private System.Nullable<byte> _number;
	
	private string _instruction;
	
	private string _comment;
	
	private bool _isShuffledItem;
	
	private bool _isTimeRestrict;
	
	private bool _isShuffledAns;
	
	private EntitySet<item> _items;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontest_idChanging(int value);
    partial void Ontest_idChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnnumberChanging(System.Nullable<byte> value);
    partial void OnnumberChanged();
    partial void OninstructionChanging(string value);
    partial void OninstructionChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnisShuffledItemChanging(bool value);
    partial void OnisShuffledItemChanged();
    partial void OnisTimeRestrictChanging(bool value);
    partial void OnisTimeRestrictChanged();
    partial void OnisShuffledAnsChanging(bool value);
    partial void OnisShuffledAnsChanged();
    #endregion
	
	public Test_Question()
	{
		this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_id", DbType="Int NOT NULL")]
	public int test_id
	{
		get
		{
			return this._test_id;
		}
		set
		{
			if ((this._test_id != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ontest_idChanging(value);
				this.SendPropertyChanging();
				this._test_id = value;
				this.SendPropertyChanged("test_id");
				this.Ontest_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(512)")]
	public string text
	{
		get
		{
			return this._text;
		}
		set
		{
			if ((this._text != value))
			{
				this.OntextChanging(value);
				this.SendPropertyChanging();
				this._text = value;
				this.SendPropertyChanged("text");
				this.OntextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="TinyInt")]
	public System.Nullable<byte> number
	{
		get
		{
			return this._number;
		}
		set
		{
			if ((this._number != value))
			{
				this.OnnumberChanging(value);
				this.SendPropertyChanging();
				this._number = value;
				this.SendPropertyChanged("number");
				this.OnnumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_instruction", DbType="NVarChar(1024)")]
	public string instruction
	{
		get
		{
			return this._instruction;
		}
		set
		{
			if ((this._instruction != value))
			{
				this.OninstructionChanging(value);
				this.SendPropertyChanging();
				this._instruction = value;
				this.SendPropertyChanged("instruction");
				this.OninstructionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(512)")]
	public string comment
	{
		get
		{
			return this._comment;
		}
		set
		{
			if ((this._comment != value))
			{
				this.OncommentChanging(value);
				this.SendPropertyChanging();
				this._comment = value;
				this.SendPropertyChanged("comment");
				this.OncommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isShuffledItem", DbType="Bit NOT NULL")]
	public bool isShuffledItem
	{
		get
		{
			return this._isShuffledItem;
		}
		set
		{
			if ((this._isShuffledItem != value))
			{
				this.OnisShuffledItemChanging(value);
				this.SendPropertyChanging();
				this._isShuffledItem = value;
				this.SendPropertyChanged("isShuffledItem");
				this.OnisShuffledItemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isTimeRestrict", DbType="Bit NOT NULL")]
	public bool isTimeRestrict
	{
		get
		{
			return this._isTimeRestrict;
		}
		set
		{
			if ((this._isTimeRestrict != value))
			{
				this.OnisTimeRestrictChanging(value);
				this.SendPropertyChanging();
				this._isTimeRestrict = value;
				this.SendPropertyChanged("isTimeRestrict");
				this.OnisTimeRestrictChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isShuffledAns", DbType="Bit NOT NULL")]
	public bool isShuffledAns
	{
		get
		{
			return this._isShuffledAns;
		}
		set
		{
			if ((this._isShuffledAns != value))
			{
				this.OnisShuffledAnsChanging(value);
				this.SendPropertyChanging();
				this._isShuffledAns = value;
				this.SendPropertyChanged("isShuffledAns");
				this.OnisShuffledAnsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Question_item", Storage="_items", ThisKey="id", OtherKey="group_id")]
	public EntitySet<item> items
	{
		get
		{
			return this._items;
		}
		set
		{
			this._items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Test_Question", Storage="_test", ThisKey="test_id", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.Test_Questions.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.Test_Questions.Add(this);
					this._test_id = value.id;
				}
				else
				{
					this._test_id = default(int);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_items(item entity)
	{
		this.SendPropertyChanging();
		entity.Test_Question = this;
	}
	
	private void detach_items(item entity)
	{
		this.SendPropertyChanging();
		entity.Test_Question = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Params")]
public partial class Param : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<int> _Test_ID;
	
	private string _name;
	
	private byte _Param_Type;
	
	private System.Nullable<int> _Group_ID;
	
	private EntitySet<Param_Value> _Param_Values;
	
	private EntitySet<Scale> _Scales;
	
	private EntitySet<Scale> _Scales1;
	
	private EntityRef<test> _test;
	
	private EntityRef<subject_group> _subject_group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTest_IDChanging(System.Nullable<int> value);
    partial void OnTest_IDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnParam_TypeChanging(byte value);
    partial void OnParam_TypeChanged();
    partial void OnGroup_IDChanging(System.Nullable<int> value);
    partial void OnGroup_IDChanged();
    #endregion
	
	public Param()
	{
		this._Param_Values = new EntitySet<Param_Value>(new Action<Param_Value>(this.attach_Param_Values), new Action<Param_Value>(this.detach_Param_Values));
		this._Scales = new EntitySet<Scale>(new Action<Scale>(this.attach_Scales), new Action<Scale>(this.detach_Scales));
		this._Scales1 = new EntitySet<Scale>(new Action<Scale>(this.attach_Scales1), new Action<Scale>(this.detach_Scales1));
		this._test = default(EntityRef<test>);
		this._subject_group = default(EntityRef<subject_group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_ID", DbType="Int")]
	public System.Nullable<int> Test_ID
	{
		get
		{
			return this._Test_ID;
		}
		set
		{
			if ((this._Test_ID != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTest_IDChanging(value);
				this.SendPropertyChanging();
				this._Test_ID = value;
				this.SendPropertyChanged("Test_ID");
				this.OnTest_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param_Type", DbType="TinyInt NOT NULL")]
	public byte Param_Type
	{
		get
		{
			return this._Param_Type;
		}
		set
		{
			if ((this._Param_Type != value))
			{
				this.OnParam_TypeChanging(value);
				this.SendPropertyChanging();
				this._Param_Type = value;
				this.SendPropertyChanged("Param_Type");
				this.OnParam_TypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", DbType="Int")]
	public System.Nullable<int> Group_ID
	{
		get
		{
			return this._Group_ID;
		}
		set
		{
			if ((this._Group_ID != value))
			{
				if (this._subject_group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGroup_IDChanging(value);
				this.SendPropertyChanging();
				this._Group_ID = value;
				this.SendPropertyChanged("Group_ID");
				this.OnGroup_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Param_Value", Storage="_Param_Values", ThisKey="id", OtherKey="Param_ID")]
	public EntitySet<Param_Value> Param_Values
	{
		get
		{
			return this._Param_Values;
		}
		set
		{
			this._Param_Values.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Scale", Storage="_Scales", ThisKey="id", OtherKey="Param2_ID")]
	public EntitySet<Scale> Scales
	{
		get
		{
			return this._Scales;
		}
		set
		{
			this._Scales.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Scale1", Storage="_Scales1", ThisKey="id", OtherKey="Param_ID")]
	public EntitySet<Scale> Scales1
	{
		get
		{
			return this._Scales1;
		}
		set
		{
			this._Scales1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Param", Storage="_test", ThisKey="Test_ID", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.Params.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.Params.Add(this);
					this._Test_ID = value.id;
				}
				else
				{
					this._Test_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_Param", Storage="_subject_group", ThisKey="Group_ID", OtherKey="id", IsForeignKey=true)]
	public subject_group subject_group
	{
		get
		{
			return this._subject_group.Entity;
		}
		set
		{
			subject_group previousValue = this._subject_group.Entity;
			if (((previousValue != value) 
						|| (this._subject_group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._subject_group.Entity = null;
					previousValue.Params.Remove(this);
				}
				this._subject_group.Entity = value;
				if ((value != null))
				{
					value.Params.Add(this);
					this._Group_ID = value.id;
				}
				else
				{
					this._Group_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("subject_group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Param_Values(Param_Value entity)
	{
		this.SendPropertyChanging();
		entity.Param = this;
	}
	
	private void detach_Param_Values(Param_Value entity)
	{
		this.SendPropertyChanging();
		entity.Param = null;
	}
	
	private void attach_Scales(Scale entity)
	{
		this.SendPropertyChanging();
		entity.Param = this;
	}
	
	private void detach_Scales(Scale entity)
	{
		this.SendPropertyChanging();
		entity.Param = null;
	}
	
	private void attach_Scales1(Scale entity)
	{
		this.SendPropertyChanging();
		entity.Param1 = this;
	}
	
	private void detach_Scales1(Scale entity)
	{
		this.SendPropertyChanging();
		entity.Param1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dept")]
public partial class dept : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _idCompany;
	
	private string _name;
	
	private EntitySet<user_account> _user_accounts;
	
	private EntitySet<metric_subj_filter> _metric_subj_filters;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidCompanyChanging(int value);
    partial void OnidCompanyChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public dept()
	{
		this._user_accounts = new EntitySet<user_account>(new Action<user_account>(this.attach_user_accounts), new Action<user_account>(this.detach_user_accounts));
		this._metric_subj_filters = new EntitySet<metric_subj_filter>(new Action<metric_subj_filter>(this.attach_metric_subj_filters), new Action<metric_subj_filter>(this.detach_metric_subj_filters));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompany", DbType="Int NOT NULL")]
	public int idCompany
	{
		get
		{
			return this._idCompany;
		}
		set
		{
			if ((this._idCompany != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCompanyChanging(value);
				this.SendPropertyChanging();
				this._idCompany = value;
				this.SendPropertyChanged("idCompany");
				this.OnidCompanyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dept_user_account", Storage="_user_accounts", ThisKey="id", OtherKey="idDept")]
	public EntitySet<user_account> user_accounts
	{
		get
		{
			return this._user_accounts;
		}
		set
		{
			this._user_accounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dept_metric_subj_filter", Storage="_metric_subj_filters", ThisKey="id", OtherKey="idDept")]
	public EntitySet<metric_subj_filter> metric_subj_filters
	{
		get
		{
			return this._metric_subj_filters;
		}
		set
		{
			this._metric_subj_filters.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_dept", Storage="_Company", ThisKey="idCompany", OtherKey="id", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.depts.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.depts.Add(this);
					this._idCompany = value.id;
				}
				else
				{
					this._idCompany = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_user_accounts(user_account entity)
	{
		this.SendPropertyChanging();
		entity.dept = this;
	}
	
	private void detach_user_accounts(user_account entity)
	{
		this.SendPropertyChanging();
		entity.dept = null;
	}
	
	private void attach_metric_subj_filters(metric_subj_filter entity)
	{
		this.SendPropertyChanging();
		entity.dept = this;
	}
	
	private void detach_metric_subj_filters(metric_subj_filter entity)
	{
		this.SendPropertyChanging();
		entity.dept = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private EntitySet<dept> _depts;
	
	private EntitySet<user_account> _user_accounts;
	
	private EntitySet<subject_group> _subject_groups;
	
	private EntitySet<indicator> _indicators;
	
	private EntitySet<competence> _competences;
	
	private EntitySet<book> _books;
	
	private EntitySet<metric> _metrics;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Company()
	{
		this._depts = new EntitySet<dept>(new Action<dept>(this.attach_depts), new Action<dept>(this.detach_depts));
		this._user_accounts = new EntitySet<user_account>(new Action<user_account>(this.attach_user_accounts), new Action<user_account>(this.detach_user_accounts));
		this._subject_groups = new EntitySet<subject_group>(new Action<subject_group>(this.attach_subject_groups), new Action<subject_group>(this.detach_subject_groups));
		this._indicators = new EntitySet<indicator>(new Action<indicator>(this.attach_indicators), new Action<indicator>(this.detach_indicators));
		this._competences = new EntitySet<competence>(new Action<competence>(this.attach_competences), new Action<competence>(this.detach_competences));
		this._books = new EntitySet<book>(new Action<book>(this.attach_books), new Action<book>(this.detach_books));
		this._metrics = new EntitySet<metric>(new Action<metric>(this.attach_metrics), new Action<metric>(this.detach_metrics));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_dept", Storage="_depts", ThisKey="id", OtherKey="idCompany")]
	public EntitySet<dept> depts
	{
		get
		{
			return this._depts;
		}
		set
		{
			this._depts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_user_account", Storage="_user_accounts", ThisKey="id", OtherKey="idCompany")]
	public EntitySet<user_account> user_accounts
	{
		get
		{
			return this._user_accounts;
		}
		set
		{
			this._user_accounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_subject_group", Storage="_subject_groups", ThisKey="id", OtherKey="idCompany")]
	public EntitySet<subject_group> subject_groups
	{
		get
		{
			return this._subject_groups;
		}
		set
		{
			this._subject_groups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_indicator", Storage="_indicators", ThisKey="id", OtherKey="idCompany")]
	public EntitySet<indicator> indicators
	{
		get
		{
			return this._indicators;
		}
		set
		{
			this._indicators.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_competence", Storage="_competences", ThisKey="id", OtherKey="idCompany")]
	public EntitySet<competence> competences
	{
		get
		{
			return this._competences;
		}
		set
		{
			this._competences.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_book", Storage="_books", ThisKey="id", OtherKey="idCompany")]
	public EntitySet<book> books
	{
		get
		{
			return this._books;
		}
		set
		{
			this._books.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_metric", Storage="_metrics", ThisKey="id", OtherKey="idCompany")]
	public EntitySet<metric> metrics
	{
		get
		{
			return this._metrics;
		}
		set
		{
			this._metrics.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_depts(dept entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_depts(dept entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_user_accounts(user_account entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_user_accounts(user_account entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_subject_groups(subject_group entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_subject_groups(subject_group entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_indicators(indicator entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_indicators(indicator entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_competences(competence entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_competences(competence entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_books(book entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_books(book entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_metrics(metric entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_metrics(metric entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private EntitySet<user_account> _user_accounts;
	
	private EntitySet<metric_subj_filter> _metric_subj_filters;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public Job()
	{
		this._user_accounts = new EntitySet<user_account>(new Action<user_account>(this.attach_user_accounts), new Action<user_account>(this.detach_user_accounts));
		this._metric_subj_filters = new EntitySet<metric_subj_filter>(new Action<metric_subj_filter>(this.attach_metric_subj_filters), new Action<metric_subj_filter>(this.detach_metric_subj_filters));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_user_account", Storage="_user_accounts", ThisKey="id", OtherKey="idJob")]
	public EntitySet<user_account> user_accounts
	{
		get
		{
			return this._user_accounts;
		}
		set
		{
			this._user_accounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_metric_subj_filter", Storage="_metric_subj_filters", ThisKey="id", OtherKey="idJob")]
	public EntitySet<metric_subj_filter> metric_subj_filters
	{
		get
		{
			return this._metric_subj_filters;
		}
		set
		{
			this._metric_subj_filters.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_user_accounts(user_account entity)
	{
		this.SendPropertyChanging();
		entity.Job = this;
	}
	
	private void detach_user_accounts(user_account entity)
	{
		this.SendPropertyChanging();
		entity.Job = null;
	}
	
	private void attach_metric_subj_filters(metric_subj_filter entity)
	{
		this.SendPropertyChanging();
		entity.Job = this;
	}
	
	private void detach_metric_subj_filters(metric_subj_filter entity)
	{
		this.SendPropertyChanging();
		entity.Job = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_state")]
public partial class user_state : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private EntitySet<user_account> _user_accounts;
	
	private EntitySet<metric_subj_filter> _metric_subj_filters;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public user_state()
	{
		this._user_accounts = new EntitySet<user_account>(new Action<user_account>(this.attach_user_accounts), new Action<user_account>(this.detach_user_accounts));
		this._metric_subj_filters = new EntitySet<metric_subj_filter>(new Action<metric_subj_filter>(this.attach_metric_subj_filters), new Action<metric_subj_filter>(this.detach_metric_subj_filters));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_state_user_account", Storage="_user_accounts", ThisKey="id", OtherKey="idState")]
	public EntitySet<user_account> user_accounts
	{
		get
		{
			return this._user_accounts;
		}
		set
		{
			this._user_accounts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_state_metric_subj_filter", Storage="_metric_subj_filters", ThisKey="id", OtherKey="idState")]
	public EntitySet<metric_subj_filter> metric_subj_filters
	{
		get
		{
			return this._metric_subj_filters;
		}
		set
		{
			this._metric_subj_filters.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_user_accounts(user_account entity)
	{
		this.SendPropertyChanging();
		entity.user_state = this;
	}
	
	private void detach_user_accounts(user_account entity)
	{
		this.SendPropertyChanging();
		entity.user_state = null;
	}
	
	private void attach_metric_subj_filters(metric_subj_filter entity)
	{
		this.SendPropertyChanging();
		entity.user_state = this;
	}
	
	private void detach_metric_subj_filters(metric_subj_filter entity)
	{
		this.SendPropertyChanging();
		entity.user_state = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scales")]
public partial class Scale : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _test_id;
	
	private string _name;
	
	private System.Nullable<decimal> _min_value;
	
	private System.Nullable<decimal> _max_value;
	
	private string _abreviature;
	
	private byte _sumtype;
	
	private System.Nullable<bool> _use_raw_data;
	
	private byte _ScoreCalcType;
	
	private decimal _kf1;
	
	private decimal _kf2;
	
	private System.Nullable<decimal> _precision;
	
	private string _description;
	
	private System.Nullable<int> _Param_ID;
	
	private string _Formula;
	
	private System.Nullable<decimal> _max_limit;
	
	private System.Nullable<decimal> _min_limit;
	
	private System.Nullable<double> _AVG_Value;
	
	private System.Nullable<double> _Standard_Dev;
	
	private System.Nullable<int> _Param2_ID;
	
	private bool _isMain;
	
	private EntitySet<inter_condition> _inter_conditions;
	
	private EntitySet<Test_Data> _Test_Datas;
	
	private EntitySet<Resume_Item> _Resume_Items;
	
	private EntitySet<Test_Diagram_Scale> _Test_Diagram_Scales;
	
	private EntitySet<ItemScale_Link> _ItemScale_Links;
	
	private EntitySet<Scale_Range> _Scale_Ranges;
	
	private EntitySet<Scale_Norm> _Scale_Norms;
	
	private EntitySet<indicator> _indicators;
	
	private EntitySet<Raw_Data> _Raw_Datas;
	
	private EntitySet<metric> _metrics;
	
	private EntityRef<Param> _Param;
	
	private EntityRef<ScoreCalcType> _ScoreCalcType1;
	
	private EntityRef<Param> _Param1;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontest_idChanging(int value);
    partial void Ontest_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onmin_valueChanging(System.Nullable<decimal> value);
    partial void Onmin_valueChanged();
    partial void Onmax_valueChanging(System.Nullable<decimal> value);
    partial void Onmax_valueChanged();
    partial void OnabreviatureChanging(string value);
    partial void OnabreviatureChanged();
    partial void OnsumtypeChanging(byte value);
    partial void OnsumtypeChanged();
    partial void Onuse_raw_dataChanging(System.Nullable<bool> value);
    partial void Onuse_raw_dataChanged();
    partial void OnScoreCalcTypeChanging(byte value);
    partial void OnScoreCalcTypeChanged();
    partial void Onkf1Changing(decimal value);
    partial void Onkf1Changed();
    partial void Onkf2Changing(decimal value);
    partial void Onkf2Changed();
    partial void OnprecisionChanging(System.Nullable<decimal> value);
    partial void OnprecisionChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnParam_IDChanging(System.Nullable<int> value);
    partial void OnParam_IDChanged();
    partial void OnFormulaChanging(string value);
    partial void OnFormulaChanged();
    partial void Onmax_limitChanging(System.Nullable<decimal> value);
    partial void Onmax_limitChanged();
    partial void Onmin_limitChanging(System.Nullable<decimal> value);
    partial void Onmin_limitChanged();
    partial void OnAVG_ValueChanging(System.Nullable<double> value);
    partial void OnAVG_ValueChanged();
    partial void OnStandard_DevChanging(System.Nullable<double> value);
    partial void OnStandard_DevChanged();
    partial void OnParam2_IDChanging(System.Nullable<int> value);
    partial void OnParam2_IDChanged();
    partial void OnisMainChanging(bool value);
    partial void OnisMainChanged();
    #endregion
	
	public Scale()
	{
		this._inter_conditions = new EntitySet<inter_condition>(new Action<inter_condition>(this.attach_inter_conditions), new Action<inter_condition>(this.detach_inter_conditions));
		this._Test_Datas = new EntitySet<Test_Data>(new Action<Test_Data>(this.attach_Test_Datas), new Action<Test_Data>(this.detach_Test_Datas));
		this._Resume_Items = new EntitySet<Resume_Item>(new Action<Resume_Item>(this.attach_Resume_Items), new Action<Resume_Item>(this.detach_Resume_Items));
		this._Test_Diagram_Scales = new EntitySet<Test_Diagram_Scale>(new Action<Test_Diagram_Scale>(this.attach_Test_Diagram_Scales), new Action<Test_Diagram_Scale>(this.detach_Test_Diagram_Scales));
		this._ItemScale_Links = new EntitySet<ItemScale_Link>(new Action<ItemScale_Link>(this.attach_ItemScale_Links), new Action<ItemScale_Link>(this.detach_ItemScale_Links));
		this._Scale_Ranges = new EntitySet<Scale_Range>(new Action<Scale_Range>(this.attach_Scale_Ranges), new Action<Scale_Range>(this.detach_Scale_Ranges));
		this._Scale_Norms = new EntitySet<Scale_Norm>(new Action<Scale_Norm>(this.attach_Scale_Norms), new Action<Scale_Norm>(this.detach_Scale_Norms));
		this._indicators = new EntitySet<indicator>(new Action<indicator>(this.attach_indicators), new Action<indicator>(this.detach_indicators));
		this._Raw_Datas = new EntitySet<Raw_Data>(new Action<Raw_Data>(this.attach_Raw_Datas), new Action<Raw_Data>(this.detach_Raw_Datas));
		this._metrics = new EntitySet<metric>(new Action<metric>(this.attach_metrics), new Action<metric>(this.detach_metrics));
		this._Param = default(EntityRef<Param>);
		this._ScoreCalcType1 = default(EntityRef<ScoreCalcType>);
		this._Param1 = default(EntityRef<Param>);
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_id", DbType="Int NOT NULL")]
	public int test_id
	{
		get
		{
			return this._test_id;
		}
		set
		{
			if ((this._test_id != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ontest_idChanging(value);
				this.SendPropertyChanging();
				this._test_id = value;
				this.SendPropertyChanged("test_id");
				this.Ontest_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min_value", DbType="Decimal(6,3)")]
	public System.Nullable<decimal> min_value
	{
		get
		{
			return this._min_value;
		}
		set
		{
			if ((this._min_value != value))
			{
				this.Onmin_valueChanging(value);
				this.SendPropertyChanging();
				this._min_value = value;
				this.SendPropertyChanged("min_value");
				this.Onmin_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max_value", DbType="Decimal(6,3)")]
	public System.Nullable<decimal> max_value
	{
		get
		{
			return this._max_value;
		}
		set
		{
			if ((this._max_value != value))
			{
				this.Onmax_valueChanging(value);
				this.SendPropertyChanging();
				this._max_value = value;
				this.SendPropertyChanged("max_value");
				this.Onmax_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abreviature", DbType="NVarChar(10)")]
	public string abreviature
	{
		get
		{
			return this._abreviature;
		}
		set
		{
			if ((this._abreviature != value))
			{
				this.OnabreviatureChanging(value);
				this.SendPropertyChanging();
				this._abreviature = value;
				this.SendPropertyChanged("abreviature");
				this.OnabreviatureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sumtype", DbType="TinyInt NOT NULL")]
	public byte sumtype
	{
		get
		{
			return this._sumtype;
		}
		set
		{
			if ((this._sumtype != value))
			{
				this.OnsumtypeChanging(value);
				this.SendPropertyChanging();
				this._sumtype = value;
				this.SendPropertyChanged("sumtype");
				this.OnsumtypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_use_raw_data", DbType="Bit")]
	public System.Nullable<bool> use_raw_data
	{
		get
		{
			return this._use_raw_data;
		}
		set
		{
			if ((this._use_raw_data != value))
			{
				this.Onuse_raw_dataChanging(value);
				this.SendPropertyChanging();
				this._use_raw_data = value;
				this.SendPropertyChanged("use_raw_data");
				this.Onuse_raw_dataChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreCalcType", DbType="TinyInt NOT NULL")]
	public byte ScoreCalcType
	{
		get
		{
			return this._ScoreCalcType;
		}
		set
		{
			if ((this._ScoreCalcType != value))
			{
				if (this._ScoreCalcType1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnScoreCalcTypeChanging(value);
				this.SendPropertyChanging();
				this._ScoreCalcType = value;
				this.SendPropertyChanged("ScoreCalcType");
				this.OnScoreCalcTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kf1", DbType="Decimal(8,4) NOT NULL")]
	public decimal kf1
	{
		get
		{
			return this._kf1;
		}
		set
		{
			if ((this._kf1 != value))
			{
				this.Onkf1Changing(value);
				this.SendPropertyChanging();
				this._kf1 = value;
				this.SendPropertyChanged("kf1");
				this.Onkf1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kf2", DbType="Decimal(8,4) NOT NULL")]
	public decimal kf2
	{
		get
		{
			return this._kf2;
		}
		set
		{
			if ((this._kf2 != value))
			{
				this.Onkf2Changing(value);
				this.SendPropertyChanging();
				this._kf2 = value;
				this.SendPropertyChanged("kf2");
				this.Onkf2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_precision", DbType="Decimal(8,4)")]
	public System.Nullable<decimal> precision
	{
		get
		{
			return this._precision;
		}
		set
		{
			if ((this._precision != value))
			{
				this.OnprecisionChanging(value);
				this.SendPropertyChanging();
				this._precision = value;
				this.SendPropertyChanged("precision");
				this.OnprecisionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param_ID", DbType="Int")]
	public System.Nullable<int> Param_ID
	{
		get
		{
			return this._Param_ID;
		}
		set
		{
			if ((this._Param_ID != value))
			{
				if (this._Param1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParam_IDChanging(value);
				this.SendPropertyChanging();
				this._Param_ID = value;
				this.SendPropertyChanged("Param_ID");
				this.OnParam_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Formula", DbType="NVarChar(255)")]
	public string Formula
	{
		get
		{
			return this._Formula;
		}
		set
		{
			if ((this._Formula != value))
			{
				this.OnFormulaChanging(value);
				this.SendPropertyChanging();
				this._Formula = value;
				this.SendPropertyChanged("Formula");
				this.OnFormulaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max_limit", DbType="Decimal(8,3)")]
	public System.Nullable<decimal> max_limit
	{
		get
		{
			return this._max_limit;
		}
		set
		{
			if ((this._max_limit != value))
			{
				this.Onmax_limitChanging(value);
				this.SendPropertyChanging();
				this._max_limit = value;
				this.SendPropertyChanged("max_limit");
				this.Onmax_limitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min_limit", DbType="Decimal(8,3)")]
	public System.Nullable<decimal> min_limit
	{
		get
		{
			return this._min_limit;
		}
		set
		{
			if ((this._min_limit != value))
			{
				this.Onmin_limitChanging(value);
				this.SendPropertyChanging();
				this._min_limit = value;
				this.SendPropertyChanged("min_limit");
				this.Onmin_limitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVG_Value", DbType="Float")]
	public System.Nullable<double> AVG_Value
	{
		get
		{
			return this._AVG_Value;
		}
		set
		{
			if ((this._AVG_Value != value))
			{
				this.OnAVG_ValueChanging(value);
				this.SendPropertyChanging();
				this._AVG_Value = value;
				this.SendPropertyChanged("AVG_Value");
				this.OnAVG_ValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Standard_Dev", DbType="Float")]
	public System.Nullable<double> Standard_Dev
	{
		get
		{
			return this._Standard_Dev;
		}
		set
		{
			if ((this._Standard_Dev != value))
			{
				this.OnStandard_DevChanging(value);
				this.SendPropertyChanging();
				this._Standard_Dev = value;
				this.SendPropertyChanged("Standard_Dev");
				this.OnStandard_DevChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Param2_ID", DbType="Int")]
	public System.Nullable<int> Param2_ID
	{
		get
		{
			return this._Param2_ID;
		}
		set
		{
			if ((this._Param2_ID != value))
			{
				if (this._Param.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParam2_IDChanging(value);
				this.SendPropertyChanging();
				this._Param2_ID = value;
				this.SendPropertyChanged("Param2_ID");
				this.OnParam2_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isMain", DbType="Bit NOT NULL")]
	public bool isMain
	{
		get
		{
			return this._isMain;
		}
		set
		{
			if ((this._isMain != value))
			{
				this.OnisMainChanging(value);
				this.SendPropertyChanging();
				this._isMain = value;
				this.SendPropertyChanged("isMain");
				this.OnisMainChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_inter_condition", Storage="_inter_conditions", ThisKey="id", OtherKey="scale_id")]
	public EntitySet<inter_condition> inter_conditions
	{
		get
		{
			return this._inter_conditions;
		}
		set
		{
			this._inter_conditions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Test_Data", Storage="_Test_Datas", ThisKey="id", OtherKey="Scale_ID")]
	public EntitySet<Test_Data> Test_Datas
	{
		get
		{
			return this._Test_Datas;
		}
		set
		{
			this._Test_Datas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Resume_Item", Storage="_Resume_Items", ThisKey="id", OtherKey="scale_id")]
	public EntitySet<Resume_Item> Resume_Items
	{
		get
		{
			return this._Resume_Items;
		}
		set
		{
			this._Resume_Items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Test_Diagram_Scale", Storage="_Test_Diagram_Scales", ThisKey="id", OtherKey="scale_id")]
	public EntitySet<Test_Diagram_Scale> Test_Diagram_Scales
	{
		get
		{
			return this._Test_Diagram_Scales;
		}
		set
		{
			this._Test_Diagram_Scales.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_ItemScale_Link", Storage="_ItemScale_Links", ThisKey="id", OtherKey="scale_id")]
	public EntitySet<ItemScale_Link> ItemScale_Links
	{
		get
		{
			return this._ItemScale_Links;
		}
		set
		{
			this._ItemScale_Links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Scale_Range", Storage="_Scale_Ranges", ThisKey="id", OtherKey="Scale_ID")]
	public EntitySet<Scale_Range> Scale_Ranges
	{
		get
		{
			return this._Scale_Ranges;
		}
		set
		{
			this._Scale_Ranges.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Scale_Norm", Storage="_Scale_Norms", ThisKey="id", OtherKey="Scale_ID")]
	public EntitySet<Scale_Norm> Scale_Norms
	{
		get
		{
			return this._Scale_Norms;
		}
		set
		{
			this._Scale_Norms.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_indicator", Storage="_indicators", ThisKey="id", OtherKey="idScale")]
	public EntitySet<indicator> indicators
	{
		get
		{
			return this._indicators;
		}
		set
		{
			this._indicators.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Raw_Data", Storage="_Raw_Datas", ThisKey="id", OtherKey="Scale_ID")]
	public EntitySet<Raw_Data> Raw_Datas
	{
		get
		{
			return this._Raw_Datas;
		}
		set
		{
			this._Raw_Datas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_metric", Storage="_metrics", ThisKey="id", OtherKey="idScale")]
	public EntitySet<metric> metrics
	{
		get
		{
			return this._metrics;
		}
		set
		{
			this._metrics.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Scale", Storage="_Param", ThisKey="Param2_ID", OtherKey="id", IsForeignKey=true)]
	public Param Param
	{
		get
		{
			return this._Param.Entity;
		}
		set
		{
			Param previousValue = this._Param.Entity;
			if (((previousValue != value) 
						|| (this._Param.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Param.Entity = null;
					previousValue.Scales.Remove(this);
				}
				this._Param.Entity = value;
				if ((value != null))
				{
					value.Scales.Add(this);
					this._Param2_ID = value.id;
				}
				else
				{
					this._Param2_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Param");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScoreCalcType_Scale", Storage="_ScoreCalcType1", ThisKey="ScoreCalcType", OtherKey="id", IsForeignKey=true)]
	public ScoreCalcType ScoreCalcType1
	{
		get
		{
			return this._ScoreCalcType1.Entity;
		}
		set
		{
			ScoreCalcType previousValue = this._ScoreCalcType1.Entity;
			if (((previousValue != value) 
						|| (this._ScoreCalcType1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ScoreCalcType1.Entity = null;
					previousValue.Scales.Remove(this);
				}
				this._ScoreCalcType1.Entity = value;
				if ((value != null))
				{
					value.Scales.Add(this);
					this._ScoreCalcType = value.id;
				}
				else
				{
					this._ScoreCalcType = default(byte);
				}
				this.SendPropertyChanged("ScoreCalcType1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Param_Scale1", Storage="_Param1", ThisKey="Param_ID", OtherKey="id", IsForeignKey=true)]
	public Param Param1
	{
		get
		{
			return this._Param1.Entity;
		}
		set
		{
			Param previousValue = this._Param1.Entity;
			if (((previousValue != value) 
						|| (this._Param1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Param1.Entity = null;
					previousValue.Scales1.Remove(this);
				}
				this._Param1.Entity = value;
				if ((value != null))
				{
					value.Scales1.Add(this);
					this._Param_ID = value.id;
				}
				else
				{
					this._Param_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Param1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Scale", Storage="_test", ThisKey="test_id", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.Scales.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.Scales.Add(this);
					this._test_id = value.id;
				}
				else
				{
					this._test_id = default(int);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_inter_conditions(inter_condition entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_inter_conditions(inter_condition entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_Test_Datas(Test_Data entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_Test_Datas(Test_Data entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_Test_Diagram_Scales(Test_Diagram_Scale entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_Test_Diagram_Scales(Test_Diagram_Scale entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_ItemScale_Links(ItemScale_Link entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_ItemScale_Links(ItemScale_Link entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_Scale_Ranges(Scale_Range entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_Scale_Ranges(Scale_Range entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_Scale_Norms(Scale_Norm entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_Scale_Norms(Scale_Norm entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_indicators(indicator entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_indicators(indicator entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_Raw_Datas(Raw_Data entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_Raw_Datas(Raw_Data entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
	
	private void attach_metrics(metric entity)
	{
		this.SendPropertyChanging();
		entity.Scale = this;
	}
	
	private void detach_metrics(metric entity)
	{
		this.SendPropertyChanging();
		entity.Scale = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.report")]
public partial class report : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idReport;
	
	private string _name;
	
	private string _description;
	
	private EntitySet<subject_group> _subject_groups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidReportChanging(int value);
    partial void OnidReportChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
	
	public report()
	{
		this._subject_groups = new EntitySet<subject_group>(new Action<subject_group>(this.attach_subject_groups), new Action<subject_group>(this.detach_subject_groups));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idReport", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int idReport
	{
		get
		{
			return this._idReport;
		}
		set
		{
			if ((this._idReport != value))
			{
				this.OnidReportChanging(value);
				this.SendPropertyChanging();
				this._idReport = value;
				this.SendPropertyChanged("idReport");
				this.OnidReportChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(255)")]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_subject_group", Storage="_subject_groups", ThisKey="idReport", OtherKey="idReport")]
	public EntitySet<subject_group> subject_groups
	{
		get
		{
			return this._subject_groups;
		}
		set
		{
			this._subject_groups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_subject_groups(subject_group entity)
	{
		this.SendPropertyChanging();
		entity.report = this;
	}
	
	private void detach_subject_groups(subject_group entity)
	{
		this.SendPropertyChanging();
		entity.report = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_account")]
public partial class user_account : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _idUser;
	
	private System.Nullable<int> _idCompany;
	
	private System.Nullable<int> _idDept;
	
	private string _login_name;
	
	private string _fio;
	
	private string _tags;
	
	private System.Nullable<short> _birth_year;
	
	private System.Nullable<bool> _gender;
	
	private string _comment;
	
	private System.Nullable<int> _idJob;
	
	private System.Nullable<byte> _idState;
	
	private System.Nullable<System.DateTime> _RecruteDate;
	
	private System.Nullable<System.DateTime> _DismissalDate;
	
	private EntitySet<test_measure_link> _test_measure_links;
	
	private EntitySet<test_subject_approved> _test_subject_approveds;
	
	private EntitySet<Test_Subject> _Test_Subjects;
	
	private EntityRef<Job> _Job;
	
	private EntityRef<user_state> _user_state;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<dept> _dept;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(System.Guid value);
    partial void OnidUserChanged();
    partial void OnidCompanyChanging(System.Nullable<int> value);
    partial void OnidCompanyChanged();
    partial void OnidDeptChanging(System.Nullable<int> value);
    partial void OnidDeptChanged();
    partial void Onlogin_nameChanging(string value);
    partial void Onlogin_nameChanged();
    partial void OnfioChanging(string value);
    partial void OnfioChanged();
    partial void OntagsChanging(string value);
    partial void OntagsChanged();
    partial void Onbirth_yearChanging(System.Nullable<short> value);
    partial void Onbirth_yearChanged();
    partial void OngenderChanging(System.Nullable<bool> value);
    partial void OngenderChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnidJobChanging(System.Nullable<int> value);
    partial void OnidJobChanged();
    partial void OnidStateChanging(System.Nullable<byte> value);
    partial void OnidStateChanged();
    partial void OnRecruteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecruteDateChanged();
    partial void OnDismissalDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDismissalDateChanged();
    #endregion
	
	public user_account()
	{
		this._test_measure_links = new EntitySet<test_measure_link>(new Action<test_measure_link>(this.attach_test_measure_links), new Action<test_measure_link>(this.detach_test_measure_links));
		this._test_subject_approveds = new EntitySet<test_subject_approved>(new Action<test_subject_approved>(this.attach_test_subject_approveds), new Action<test_subject_approved>(this.detach_test_subject_approveds));
		this._Test_Subjects = new EntitySet<Test_Subject>(new Action<Test_Subject>(this.attach_Test_Subjects), new Action<Test_Subject>(this.detach_Test_Subjects));
		this._Job = default(EntityRef<Job>);
		this._user_state = default(EntityRef<user_state>);
		this._Company = default(EntityRef<Company>);
		this._dept = default(EntityRef<dept>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid idUser
	{
		get
		{
			return this._idUser;
		}
		set
		{
			if ((this._idUser != value))
			{
				this.OnidUserChanging(value);
				this.SendPropertyChanging();
				this._idUser = value;
				this.SendPropertyChanged("idUser");
				this.OnidUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompany", DbType="Int")]
	public System.Nullable<int> idCompany
	{
		get
		{
			return this._idCompany;
		}
		set
		{
			if ((this._idCompany != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCompanyChanging(value);
				this.SendPropertyChanging();
				this._idCompany = value;
				this.SendPropertyChanged("idCompany");
				this.OnidCompanyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDept", DbType="Int")]
	public System.Nullable<int> idDept
	{
		get
		{
			return this._idDept;
		}
		set
		{
			if ((this._idDept != value))
			{
				if (this._dept.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidDeptChanging(value);
				this.SendPropertyChanging();
				this._idDept = value;
				this.SendPropertyChanged("idDept");
				this.OnidDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login_name", DbType="NVarChar(255)")]
	public string login_name
	{
		get
		{
			return this._login_name;
		}
		set
		{
			if ((this._login_name != value))
			{
				this.Onlogin_nameChanging(value);
				this.SendPropertyChanging();
				this._login_name = value;
				this.SendPropertyChanged("login_name");
				this.Onlogin_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fio", DbType="NVarChar(255)")]
	public string fio
	{
		get
		{
			return this._fio;
		}
		set
		{
			if ((this._fio != value))
			{
				this.OnfioChanging(value);
				this.SendPropertyChanging();
				this._fio = value;
				this.SendPropertyChanged("fio");
				this.OnfioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tags", DbType="NVarChar(255)")]
	public string tags
	{
		get
		{
			return this._tags;
		}
		set
		{
			if ((this._tags != value))
			{
				this.OntagsChanging(value);
				this.SendPropertyChanging();
				this._tags = value;
				this.SendPropertyChanged("tags");
				this.OntagsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birth_year", DbType="SmallInt")]
	public System.Nullable<short> birth_year
	{
		get
		{
			return this._birth_year;
		}
		set
		{
			if ((this._birth_year != value))
			{
				this.Onbirth_yearChanging(value);
				this.SendPropertyChanging();
				this._birth_year = value;
				this.SendPropertyChanged("birth_year");
				this.Onbirth_yearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Bit")]
	public System.Nullable<bool> gender
	{
		get
		{
			return this._gender;
		}
		set
		{
			if ((this._gender != value))
			{
				this.OngenderChanging(value);
				this.SendPropertyChanging();
				this._gender = value;
				this.SendPropertyChanged("gender");
				this.OngenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(255)")]
	public string comment
	{
		get
		{
			return this._comment;
		}
		set
		{
			if ((this._comment != value))
			{
				this.OncommentChanging(value);
				this.SendPropertyChanging();
				this._comment = value;
				this.SendPropertyChanged("comment");
				this.OncommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idJob", DbType="Int")]
	public System.Nullable<int> idJob
	{
		get
		{
			return this._idJob;
		}
		set
		{
			if ((this._idJob != value))
			{
				if (this._Job.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidJobChanging(value);
				this.SendPropertyChanging();
				this._idJob = value;
				this.SendPropertyChanged("idJob");
				this.OnidJobChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idState", DbType="TinyInt")]
	public System.Nullable<byte> idState
	{
		get
		{
			return this._idState;
		}
		set
		{
			if ((this._idState != value))
			{
				if (this._user_state.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidStateChanging(value);
				this.SendPropertyChanging();
				this._idState = value;
				this.SendPropertyChanged("idState");
				this.OnidStateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecruteDate", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> RecruteDate
	{
		get
		{
			return this._RecruteDate;
		}
		set
		{
			if ((this._RecruteDate != value))
			{
				this.OnRecruteDateChanging(value);
				this.SendPropertyChanging();
				this._RecruteDate = value;
				this.SendPropertyChanged("RecruteDate");
				this.OnRecruteDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DismissalDate", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> DismissalDate
	{
		get
		{
			return this._DismissalDate;
		}
		set
		{
			if ((this._DismissalDate != value))
			{
				this.OnDismissalDateChanging(value);
				this.SendPropertyChanging();
				this._DismissalDate = value;
				this.SendPropertyChanged("DismissalDate");
				this.OnDismissalDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_account_test_measure_link", Storage="_test_measure_links", ThisKey="idUser", OtherKey="idUser")]
	public EntitySet<test_measure_link> test_measure_links
	{
		get
		{
			return this._test_measure_links;
		}
		set
		{
			this._test_measure_links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_account_test_subject_approved", Storage="_test_subject_approveds", ThisKey="idUser", OtherKey="ApprovedByUser")]
	public EntitySet<test_subject_approved> test_subject_approveds
	{
		get
		{
			return this._test_subject_approveds;
		}
		set
		{
			this._test_subject_approveds.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_account_Test_Subject", Storage="_Test_Subjects", ThisKey="idUser", OtherKey="idUser")]
	public EntitySet<Test_Subject> Test_Subjects
	{
		get
		{
			return this._Test_Subjects;
		}
		set
		{
			this._Test_Subjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_user_account", Storage="_Job", ThisKey="idJob", OtherKey="id", IsForeignKey=true)]
	public Job Job
	{
		get
		{
			return this._Job.Entity;
		}
		set
		{
			Job previousValue = this._Job.Entity;
			if (((previousValue != value) 
						|| (this._Job.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Job.Entity = null;
					previousValue.user_accounts.Remove(this);
				}
				this._Job.Entity = value;
				if ((value != null))
				{
					value.user_accounts.Add(this);
					this._idJob = value.id;
				}
				else
				{
					this._idJob = default(Nullable<int>);
				}
				this.SendPropertyChanged("Job");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_state_user_account", Storage="_user_state", ThisKey="idState", OtherKey="id", IsForeignKey=true)]
	public user_state user_state
	{
		get
		{
			return this._user_state.Entity;
		}
		set
		{
			user_state previousValue = this._user_state.Entity;
			if (((previousValue != value) 
						|| (this._user_state.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user_state.Entity = null;
					previousValue.user_accounts.Remove(this);
				}
				this._user_state.Entity = value;
				if ((value != null))
				{
					value.user_accounts.Add(this);
					this._idState = value.id;
				}
				else
				{
					this._idState = default(Nullable<byte>);
				}
				this.SendPropertyChanged("user_state");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_user_account", Storage="_Company", ThisKey="idCompany", OtherKey="id", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.user_accounts.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.user_accounts.Add(this);
					this._idCompany = value.id;
				}
				else
				{
					this._idCompany = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dept_user_account", Storage="_dept", ThisKey="idDept", OtherKey="id", IsForeignKey=true)]
	public dept dept
	{
		get
		{
			return this._dept.Entity;
		}
		set
		{
			dept previousValue = this._dept.Entity;
			if (((previousValue != value) 
						|| (this._dept.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._dept.Entity = null;
					previousValue.user_accounts.Remove(this);
				}
				this._dept.Entity = value;
				if ((value != null))
				{
					value.user_accounts.Add(this);
					this._idDept = value.id;
				}
				else
				{
					this._idDept = default(Nullable<int>);
				}
				this.SendPropertyChanged("dept");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_test_measure_links(test_measure_link entity)
	{
		this.SendPropertyChanging();
		entity.user_account = this;
	}
	
	private void detach_test_measure_links(test_measure_link entity)
	{
		this.SendPropertyChanging();
		entity.user_account = null;
	}
	
	private void attach_test_subject_approveds(test_subject_approved entity)
	{
		this.SendPropertyChanging();
		entity.user_account = this;
	}
	
	private void detach_test_subject_approveds(test_subject_approved entity)
	{
		this.SendPropertyChanging();
		entity.user_account = null;
	}
	
	private void attach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.user_account = this;
	}
	
	private void detach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.user_account = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_SubjectGroup_Link")]
public partial class Test_SubjectGroup_Link : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _idTest;
	
	private int _idGroup;
	
	private System.Nullable<byte> _OrdNumber;
	
	private string _MeasureObjectName;
	
	private bool _isObjectRequired;
	
	private EntitySet<test_measure_link> _test_measure_links;
	
	private EntitySet<Test_Subject> _Test_Subjects;
	
	private EntityRef<test> _test;
	
	private EntityRef<subject_group> _subject_group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidTestChanging(int value);
    partial void OnidTestChanged();
    partial void OnidGroupChanging(int value);
    partial void OnidGroupChanged();
    partial void OnOrdNumberChanging(System.Nullable<byte> value);
    partial void OnOrdNumberChanged();
    partial void OnMeasureObjectNameChanging(string value);
    partial void OnMeasureObjectNameChanged();
    partial void OnisObjectRequiredChanging(bool value);
    partial void OnisObjectRequiredChanged();
    #endregion
	
	public Test_SubjectGroup_Link()
	{
		this._test_measure_links = new EntitySet<test_measure_link>(new Action<test_measure_link>(this.attach_test_measure_links), new Action<test_measure_link>(this.detach_test_measure_links));
		this._Test_Subjects = new EntitySet<Test_Subject>(new Action<Test_Subject>(this.attach_Test_Subjects), new Action<Test_Subject>(this.detach_Test_Subjects));
		this._test = default(EntityRef<test>);
		this._subject_group = default(EntityRef<subject_group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTest", DbType="Int NOT NULL")]
	public int idTest
	{
		get
		{
			return this._idTest;
		}
		set
		{
			if ((this._idTest != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidTestChanging(value);
				this.SendPropertyChanging();
				this._idTest = value;
				this.SendPropertyChanged("idTest");
				this.OnidTestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGroup", DbType="Int NOT NULL")]
	public int idGroup
	{
		get
		{
			return this._idGroup;
		}
		set
		{
			if ((this._idGroup != value))
			{
				if (this._subject_group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidGroupChanging(value);
				this.SendPropertyChanging();
				this._idGroup = value;
				this.SendPropertyChanged("idGroup");
				this.OnidGroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdNumber", DbType="TinyInt")]
	public System.Nullable<byte> OrdNumber
	{
		get
		{
			return this._OrdNumber;
		}
		set
		{
			if ((this._OrdNumber != value))
			{
				this.OnOrdNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdNumber = value;
				this.SendPropertyChanged("OrdNumber");
				this.OnOrdNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureObjectName", DbType="NVarChar(255)")]
	public string MeasureObjectName
	{
		get
		{
			return this._MeasureObjectName;
		}
		set
		{
			if ((this._MeasureObjectName != value))
			{
				this.OnMeasureObjectNameChanging(value);
				this.SendPropertyChanging();
				this._MeasureObjectName = value;
				this.SendPropertyChanged("MeasureObjectName");
				this.OnMeasureObjectNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isObjectRequired", DbType="Bit NOT NULL")]
	public bool isObjectRequired
	{
		get
		{
			return this._isObjectRequired;
		}
		set
		{
			if ((this._isObjectRequired != value))
			{
				this.OnisObjectRequiredChanging(value);
				this.SendPropertyChanging();
				this._isObjectRequired = value;
				this.SendPropertyChanged("isObjectRequired");
				this.OnisObjectRequiredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_SubjectGroup_Link_test_measure_link", Storage="_test_measure_links", ThisKey="id", OtherKey="idTestMeasure")]
	public EntitySet<test_measure_link> test_measure_links
	{
		get
		{
			return this._test_measure_links;
		}
		set
		{
			this._test_measure_links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_SubjectGroup_Link_Test_Subject", Storage="_Test_Subjects", ThisKey="id", OtherKey="idTestLink")]
	public EntitySet<Test_Subject> Test_Subjects
	{
		get
		{
			return this._Test_Subjects;
		}
		set
		{
			this._Test_Subjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Test_SubjectGroup_Link", Storage="_test", ThisKey="idTest", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.Test_SubjectGroup_Links.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.Test_SubjectGroup_Links.Add(this);
					this._idTest = value.id;
				}
				else
				{
					this._idTest = default(int);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_Test_SubjectGroup_Link", Storage="_subject_group", ThisKey="idGroup", OtherKey="id", IsForeignKey=true)]
	public subject_group subject_group
	{
		get
		{
			return this._subject_group.Entity;
		}
		set
		{
			subject_group previousValue = this._subject_group.Entity;
			if (((previousValue != value) 
						|| (this._subject_group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._subject_group.Entity = null;
					previousValue.Test_SubjectGroup_Links.Remove(this);
				}
				this._subject_group.Entity = value;
				if ((value != null))
				{
					value.Test_SubjectGroup_Links.Add(this);
					this._idGroup = value.id;
				}
				else
				{
					this._idGroup = default(int);
				}
				this.SendPropertyChanged("subject_group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_test_measure_links(test_measure_link entity)
	{
		this.SendPropertyChanging();
		entity.Test_SubjectGroup_Link = this;
	}
	
	private void detach_test_measure_links(test_measure_link entity)
	{
		this.SendPropertyChanging();
		entity.Test_SubjectGroup_Link = null;
	}
	
	private void attach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.Test_SubjectGroup_Link = this;
	}
	
	private void detach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.Test_SubjectGroup_Link = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rep_item_type")]
public partial class rep_item_type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private short _idItemType;
	
	private string _name;
	
	private EntitySet<rep_item_link> _rep_item_links;
	
	private EntitySet<rep_test_link> _rep_test_links;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidItemTypeChanging(short value);
    partial void OnidItemTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public rep_item_type()
	{
		this._rep_item_links = new EntitySet<rep_item_link>(new Action<rep_item_link>(this.attach_rep_item_links), new Action<rep_item_link>(this.detach_rep_item_links));
		this._rep_test_links = new EntitySet<rep_test_link>(new Action<rep_test_link>(this.attach_rep_test_links), new Action<rep_test_link>(this.detach_rep_test_links));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idItemType", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
	public short idItemType
	{
		get
		{
			return this._idItemType;
		}
		set
		{
			if ((this._idItemType != value))
			{
				this.OnidItemTypeChanging(value);
				this.SendPropertyChanging();
				this._idItemType = value;
				this.SendPropertyChanged("idItemType");
				this.OnidItemTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rep_item_type_rep_item_link", Storage="_rep_item_links", ThisKey="idItemType", OtherKey="idItemType")]
	public EntitySet<rep_item_link> rep_item_links
	{
		get
		{
			return this._rep_item_links;
		}
		set
		{
			this._rep_item_links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rep_item_type_rep_test_link", Storage="_rep_test_links", ThisKey="idItemType", OtherKey="idItemType")]
	public EntitySet<rep_test_link> rep_test_links
	{
		get
		{
			return this._rep_test_links;
		}
		set
		{
			this._rep_test_links.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_rep_item_links(rep_item_link entity)
	{
		this.SendPropertyChanging();
		entity.rep_item_type = this;
	}
	
	private void detach_rep_item_links(rep_item_link entity)
	{
		this.SendPropertyChanging();
		entity.rep_item_type = null;
	}
	
	private void attach_rep_test_links(rep_test_link entity)
	{
		this.SendPropertyChanging();
		entity.rep_item_type = this;
	}
	
	private void detach_rep_test_links(rep_test_link entity)
	{
		this.SendPropertyChanging();
		entity.rep_item_type = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rep_item_link")]
public partial class rep_item_link : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idLink;
	
	private int _idGroup;
	
	private short _idItemType;
	
	private EntityRef<rep_item_type> _rep_item_type;
	
	private EntityRef<subject_group> _subject_group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidLinkChanging(int value);
    partial void OnidLinkChanged();
    partial void OnidGroupChanging(int value);
    partial void OnidGroupChanged();
    partial void OnidItemTypeChanging(short value);
    partial void OnidItemTypeChanged();
    #endregion
	
	public rep_item_link()
	{
		this._rep_item_type = default(EntityRef<rep_item_type>);
		this._subject_group = default(EntityRef<subject_group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLink", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idLink
	{
		get
		{
			return this._idLink;
		}
		set
		{
			if ((this._idLink != value))
			{
				this.OnidLinkChanging(value);
				this.SendPropertyChanging();
				this._idLink = value;
				this.SendPropertyChanged("idLink");
				this.OnidLinkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGroup", DbType="Int NOT NULL")]
	public int idGroup
	{
		get
		{
			return this._idGroup;
		}
		set
		{
			if ((this._idGroup != value))
			{
				if (this._subject_group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidGroupChanging(value);
				this.SendPropertyChanging();
				this._idGroup = value;
				this.SendPropertyChanged("idGroup");
				this.OnidGroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idItemType", DbType="SmallInt NOT NULL")]
	public short idItemType
	{
		get
		{
			return this._idItemType;
		}
		set
		{
			if ((this._idItemType != value))
			{
				if (this._rep_item_type.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidItemTypeChanging(value);
				this.SendPropertyChanging();
				this._idItemType = value;
				this.SendPropertyChanged("idItemType");
				this.OnidItemTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rep_item_type_rep_item_link", Storage="_rep_item_type", ThisKey="idItemType", OtherKey="idItemType", IsForeignKey=true)]
	public rep_item_type rep_item_type
	{
		get
		{
			return this._rep_item_type.Entity;
		}
		set
		{
			rep_item_type previousValue = this._rep_item_type.Entity;
			if (((previousValue != value) 
						|| (this._rep_item_type.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._rep_item_type.Entity = null;
					previousValue.rep_item_links.Remove(this);
				}
				this._rep_item_type.Entity = value;
				if ((value != null))
				{
					value.rep_item_links.Add(this);
					this._idItemType = value.idItemType;
				}
				else
				{
					this._idItemType = default(short);
				}
				this.SendPropertyChanged("rep_item_type");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_rep_item_link", Storage="_subject_group", ThisKey="idGroup", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public subject_group subject_group
	{
		get
		{
			return this._subject_group.Entity;
		}
		set
		{
			subject_group previousValue = this._subject_group.Entity;
			if (((previousValue != value) 
						|| (this._subject_group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._subject_group.Entity = null;
					previousValue.rep_item_links.Remove(this);
				}
				this._subject_group.Entity = value;
				if ((value != null))
				{
					value.rep_item_links.Add(this);
					this._idGroup = value.id;
				}
				else
				{
					this._idGroup = default(int);
				}
				this.SendPropertyChanged("subject_group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Norm_Type")]
public partial class Norm_Type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
	private string _bk_color;
	
	private EntitySet<Scale_Norm> _Scale_Norms;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onbk_colorChanging(string value);
    partial void Onbk_colorChanged();
    #endregion
	
	public Norm_Type()
	{
		this._Scale_Norms = new EntitySet<Scale_Norm>(new Action<Scale_Norm>(this.attach_Scale_Norms), new Action<Scale_Norm>(this.detach_Scale_Norms));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bk_color", DbType="Char(6) NOT NULL", CanBeNull=false)]
	public string bk_color
	{
		get
		{
			return this._bk_color;
		}
		set
		{
			if ((this._bk_color != value))
			{
				this.Onbk_colorChanging(value);
				this.SendPropertyChanging();
				this._bk_color = value;
				this.SendPropertyChanged("bk_color");
				this.Onbk_colorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Norm_Type_Scale_Norm", Storage="_Scale_Norms", ThisKey="id", OtherKey="NormType_id")]
	public EntitySet<Scale_Norm> Scale_Norms
	{
		get
		{
			return this._Scale_Norms;
		}
		set
		{
			this._Scale_Norms.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Scale_Norms(Scale_Norm entity)
	{
		this.SendPropertyChanging();
		entity.Norm_Type = this;
	}
	
	private void detach_Scale_Norms(Scale_Norm entity)
	{
		this.SendPropertyChanging();
		entity.Norm_Type = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.interpretation")]
public partial class interpretation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _test_id;
	
	private string _text;
	
	private System.Nullable<byte> _idInterKind;
	
	private EntitySet<inter_condition> _inter_conditions;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontest_idChanging(int value);
    partial void Ontest_idChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnidInterKindChanging(System.Nullable<byte> value);
    partial void OnidInterKindChanged();
    #endregion
	
	public interpretation()
	{
		this._inter_conditions = new EntitySet<inter_condition>(new Action<inter_condition>(this.attach_inter_conditions), new Action<inter_condition>(this.detach_inter_conditions));
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_id", DbType="Int NOT NULL")]
	public int test_id
	{
		get
		{
			return this._test_id;
		}
		set
		{
			if ((this._test_id != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ontest_idChanging(value);
				this.SendPropertyChanging();
				this._test_id = value;
				this.SendPropertyChanged("test_id");
				this.Ontest_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string text
	{
		get
		{
			return this._text;
		}
		set
		{
			if ((this._text != value))
			{
				this.OntextChanging(value);
				this.SendPropertyChanging();
				this._text = value;
				this.SendPropertyChanged("text");
				this.OntextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idInterKind", DbType="TinyInt")]
	public System.Nullable<byte> idInterKind
	{
		get
		{
			return this._idInterKind;
		}
		set
		{
			if ((this._idInterKind != value))
			{
				this.OnidInterKindChanging(value);
				this.SendPropertyChanging();
				this._idInterKind = value;
				this.SendPropertyChanged("idInterKind");
				this.OnidInterKindChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="interpretation_inter_condition", Storage="_inter_conditions", ThisKey="id", OtherKey="inter_id")]
	public EntitySet<inter_condition> inter_conditions
	{
		get
		{
			return this._inter_conditions;
		}
		set
		{
			this._inter_conditions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_interpretation", Storage="_test", ThisKey="test_id", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.interpretations.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.interpretations.Add(this);
					this._test_id = value.id;
				}
				else
				{
					this._test_id = default(int);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_inter_conditions(inter_condition entity)
	{
		this.SendPropertyChanging();
		entity.interpretation = this;
	}
	
	private void detach_inter_conditions(inter_condition entity)
	{
		this.SendPropertyChanging();
		entity.interpretation = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rep_test_link")]
public partial class rep_test_link : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idLink;
	
	private int _idTest;
	
	private short _idItemType;
	
	private System.Nullable<byte> _OrdNumber;
	
	private EntityRef<rep_item_type> _rep_item_type;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidLinkChanging(int value);
    partial void OnidLinkChanged();
    partial void OnidTestChanging(int value);
    partial void OnidTestChanged();
    partial void OnidItemTypeChanging(short value);
    partial void OnidItemTypeChanged();
    partial void OnOrdNumberChanging(System.Nullable<byte> value);
    partial void OnOrdNumberChanged();
    #endregion
	
	public rep_test_link()
	{
		this._rep_item_type = default(EntityRef<rep_item_type>);
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLink", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idLink
	{
		get
		{
			return this._idLink;
		}
		set
		{
			if ((this._idLink != value))
			{
				this.OnidLinkChanging(value);
				this.SendPropertyChanging();
				this._idLink = value;
				this.SendPropertyChanged("idLink");
				this.OnidLinkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTest", DbType="Int NOT NULL")]
	public int idTest
	{
		get
		{
			return this._idTest;
		}
		set
		{
			if ((this._idTest != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidTestChanging(value);
				this.SendPropertyChanging();
				this._idTest = value;
				this.SendPropertyChanged("idTest");
				this.OnidTestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idItemType", DbType="SmallInt NOT NULL")]
	public short idItemType
	{
		get
		{
			return this._idItemType;
		}
		set
		{
			if ((this._idItemType != value))
			{
				if (this._rep_item_type.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidItemTypeChanging(value);
				this.SendPropertyChanging();
				this._idItemType = value;
				this.SendPropertyChanged("idItemType");
				this.OnidItemTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdNumber", DbType="TinyInt")]
	public System.Nullable<byte> OrdNumber
	{
		get
		{
			return this._OrdNumber;
		}
		set
		{
			if ((this._OrdNumber != value))
			{
				this.OnOrdNumberChanging(value);
				this.SendPropertyChanging();
				this._OrdNumber = value;
				this.SendPropertyChanged("OrdNumber");
				this.OnOrdNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rep_item_type_rep_test_link", Storage="_rep_item_type", ThisKey="idItemType", OtherKey="idItemType", IsForeignKey=true)]
	public rep_item_type rep_item_type
	{
		get
		{
			return this._rep_item_type.Entity;
		}
		set
		{
			rep_item_type previousValue = this._rep_item_type.Entity;
			if (((previousValue != value) 
						|| (this._rep_item_type.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._rep_item_type.Entity = null;
					previousValue.rep_test_links.Remove(this);
				}
				this._rep_item_type.Entity = value;
				if ((value != null))
				{
					value.rep_test_links.Add(this);
					this._idItemType = value.idItemType;
				}
				else
				{
					this._idItemType = default(short);
				}
				this.SendPropertyChanged("rep_item_type");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_rep_test_link", Storage="_test", ThisKey="idTest", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.rep_test_links.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.rep_test_links.Add(this);
					this._idTest = value.id;
				}
				else
				{
					this._idTest = default(int);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_measure_link")]
public partial class test_measure_link : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idLink;
	
	private int _idTestMeasure;
	
	private System.Nullable<System.Guid> _idUser;
	
	private EntityRef<Test_SubjectGroup_Link> _Test_SubjectGroup_Link;
	
	private EntityRef<user_account> _user_account;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidLinkChanging(int value);
    partial void OnidLinkChanged();
    partial void OnidTestMeasureChanging(int value);
    partial void OnidTestMeasureChanged();
    partial void OnidUserChanging(System.Nullable<System.Guid> value);
    partial void OnidUserChanged();
    #endregion
	
	public test_measure_link()
	{
		this._Test_SubjectGroup_Link = default(EntityRef<Test_SubjectGroup_Link>);
		this._user_account = default(EntityRef<user_account>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLink", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idLink
	{
		get
		{
			return this._idLink;
		}
		set
		{
			if ((this._idLink != value))
			{
				this.OnidLinkChanging(value);
				this.SendPropertyChanging();
				this._idLink = value;
				this.SendPropertyChanged("idLink");
				this.OnidLinkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTestMeasure", DbType="Int NOT NULL")]
	public int idTestMeasure
	{
		get
		{
			return this._idTestMeasure;
		}
		set
		{
			if ((this._idTestMeasure != value))
			{
				if (this._Test_SubjectGroup_Link.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidTestMeasureChanging(value);
				this.SendPropertyChanging();
				this._idTestMeasure = value;
				this.SendPropertyChanged("idTestMeasure");
				this.OnidTestMeasureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> idUser
	{
		get
		{
			return this._idUser;
		}
		set
		{
			if ((this._idUser != value))
			{
				if (this._user_account.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidUserChanging(value);
				this.SendPropertyChanging();
				this._idUser = value;
				this.SendPropertyChanged("idUser");
				this.OnidUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_SubjectGroup_Link_test_measure_link", Storage="_Test_SubjectGroup_Link", ThisKey="idTestMeasure", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Test_SubjectGroup_Link Test_SubjectGroup_Link
	{
		get
		{
			return this._Test_SubjectGroup_Link.Entity;
		}
		set
		{
			Test_SubjectGroup_Link previousValue = this._Test_SubjectGroup_Link.Entity;
			if (((previousValue != value) 
						|| (this._Test_SubjectGroup_Link.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_SubjectGroup_Link.Entity = null;
					previousValue.test_measure_links.Remove(this);
				}
				this._Test_SubjectGroup_Link.Entity = value;
				if ((value != null))
				{
					value.test_measure_links.Add(this);
					this._idTestMeasure = value.id;
				}
				else
				{
					this._idTestMeasure = default(int);
				}
				this.SendPropertyChanged("Test_SubjectGroup_Link");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_account_test_measure_link", Storage="_user_account", ThisKey="idUser", OtherKey="idUser", IsForeignKey=true, DeleteRule="CASCADE")]
	public user_account user_account
	{
		get
		{
			return this._user_account.Entity;
		}
		set
		{
			user_account previousValue = this._user_account.Entity;
			if (((previousValue != value) 
						|| (this._user_account.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user_account.Entity = null;
					previousValue.test_measure_links.Remove(this);
				}
				this._user_account.Entity = value;
				if ((value != null))
				{
					value.test_measure_links.Add(this);
					this._idUser = value.idUser;
				}
				else
				{
					this._idUser = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("user_account");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subj_fill_type")]
public partial class subj_fill_type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _idFillType;
	
	private string _name;
	
	private EntitySet<schedule> _schedules;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidFillTypeChanging(byte value);
    partial void OnidFillTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public subj_fill_type()
	{
		this._schedules = new EntitySet<schedule>(new Action<schedule>(this.attach_schedules), new Action<schedule>(this.detach_schedules));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFillType", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte idFillType
	{
		get
		{
			return this._idFillType;
		}
		set
		{
			if ((this._idFillType != value))
			{
				this.OnidFillTypeChanging(value);
				this.SendPropertyChanging();
				this._idFillType = value;
				this.SendPropertyChanged("idFillType");
				this.OnidFillTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subj_fill_type_schedule", Storage="_schedules", ThisKey="idFillType", OtherKey="idFillType")]
	public EntitySet<schedule> schedules
	{
		get
		{
			return this._schedules;
		}
		set
		{
			this._schedules.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_schedules(schedule entity)
	{
		this.SendPropertyChanging();
		entity.subj_fill_type = this;
	}
	
	private void detach_schedules(schedule entity)
	{
		this.SendPropertyChanging();
		entity.subj_fill_type = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sch_frequency")]
public partial class sch_frequency : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _idFreq;
	
	private string _name;
	
	private EntitySet<schedule> _schedules;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidFreqChanging(byte value);
    partial void OnidFreqChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public sch_frequency()
	{
		this._schedules = new EntitySet<schedule>(new Action<schedule>(this.attach_schedules), new Action<schedule>(this.detach_schedules));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFreq", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte idFreq
	{
		get
		{
			return this._idFreq;
		}
		set
		{
			if ((this._idFreq != value))
			{
				this.OnidFreqChanging(value);
				this.SendPropertyChanging();
				this._idFreq = value;
				this.SendPropertyChanged("idFreq");
				this.OnidFreqChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sch_frequency_schedule", Storage="_schedules", ThisKey="idFreq", OtherKey="idFreq")]
	public EntitySet<schedule> schedules
	{
		get
		{
			return this._schedules;
		}
		set
		{
			this._schedules.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_schedules(schedule entity)
	{
		this.SendPropertyChanging();
		entity.sch_frequency = this;
	}
	
	private void detach_schedules(schedule entity)
	{
		this.SendPropertyChanging();
		entity.sch_frequency = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.schedule")]
public partial class schedule : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idShedule;
	
	private int _idBaseGroup;
	
	private byte _idFreq;
	
	private byte _idFillType;
	
	private EntityRef<subj_fill_type> _subj_fill_type;
	
	private EntityRef<sch_frequency> _sch_frequency;
	
	private EntityRef<subject_group> _subject_group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSheduleChanging(int value);
    partial void OnidSheduleChanged();
    partial void OnidBaseGroupChanging(int value);
    partial void OnidBaseGroupChanged();
    partial void OnidFreqChanging(byte value);
    partial void OnidFreqChanged();
    partial void OnidFillTypeChanging(byte value);
    partial void OnidFillTypeChanged();
    #endregion
	
	public schedule()
	{
		this._subj_fill_type = default(EntityRef<subj_fill_type>);
		this._sch_frequency = default(EntityRef<sch_frequency>);
		this._subject_group = default(EntityRef<subject_group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idShedule", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idShedule
	{
		get
		{
			return this._idShedule;
		}
		set
		{
			if ((this._idShedule != value))
			{
				this.OnidSheduleChanging(value);
				this.SendPropertyChanging();
				this._idShedule = value;
				this.SendPropertyChanged("idShedule");
				this.OnidSheduleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBaseGroup", DbType="Int NOT NULL")]
	public int idBaseGroup
	{
		get
		{
			return this._idBaseGroup;
		}
		set
		{
			if ((this._idBaseGroup != value))
			{
				if (this._subject_group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidBaseGroupChanging(value);
				this.SendPropertyChanging();
				this._idBaseGroup = value;
				this.SendPropertyChanged("idBaseGroup");
				this.OnidBaseGroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFreq", DbType="TinyInt NOT NULL")]
	public byte idFreq
	{
		get
		{
			return this._idFreq;
		}
		set
		{
			if ((this._idFreq != value))
			{
				if (this._sch_frequency.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidFreqChanging(value);
				this.SendPropertyChanging();
				this._idFreq = value;
				this.SendPropertyChanged("idFreq");
				this.OnidFreqChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFillType", DbType="TinyInt NOT NULL")]
	public byte idFillType
	{
		get
		{
			return this._idFillType;
		}
		set
		{
			if ((this._idFillType != value))
			{
				if (this._subj_fill_type.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidFillTypeChanging(value);
				this.SendPropertyChanging();
				this._idFillType = value;
				this.SendPropertyChanged("idFillType");
				this.OnidFillTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subj_fill_type_schedule", Storage="_subj_fill_type", ThisKey="idFillType", OtherKey="idFillType", IsForeignKey=true)]
	public subj_fill_type subj_fill_type
	{
		get
		{
			return this._subj_fill_type.Entity;
		}
		set
		{
			subj_fill_type previousValue = this._subj_fill_type.Entity;
			if (((previousValue != value) 
						|| (this._subj_fill_type.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._subj_fill_type.Entity = null;
					previousValue.schedules.Remove(this);
				}
				this._subj_fill_type.Entity = value;
				if ((value != null))
				{
					value.schedules.Add(this);
					this._idFillType = value.idFillType;
				}
				else
				{
					this._idFillType = default(byte);
				}
				this.SendPropertyChanged("subj_fill_type");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sch_frequency_schedule", Storage="_sch_frequency", ThisKey="idFreq", OtherKey="idFreq", IsForeignKey=true)]
	public sch_frequency sch_frequency
	{
		get
		{
			return this._sch_frequency.Entity;
		}
		set
		{
			sch_frequency previousValue = this._sch_frequency.Entity;
			if (((previousValue != value) 
						|| (this._sch_frequency.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._sch_frequency.Entity = null;
					previousValue.schedules.Remove(this);
				}
				this._sch_frequency.Entity = value;
				if ((value != null))
				{
					value.schedules.Add(this);
					this._idFreq = value.idFreq;
				}
				else
				{
					this._idFreq = default(byte);
				}
				this.SendPropertyChanged("sch_frequency");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_schedule", Storage="_subject_group", ThisKey="idBaseGroup", OtherKey="id", IsForeignKey=true)]
	public subject_group subject_group
	{
		get
		{
			return this._subject_group.Entity;
		}
		set
		{
			subject_group previousValue = this._subject_group.Entity;
			if (((previousValue != value) 
						|| (this._subject_group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._subject_group.Entity = null;
					previousValue.schedules.Remove(this);
				}
				this._subject_group.Entity = value;
				if ((value != null))
				{
					value.schedules.Add(this);
					this._idBaseGroup = value.id;
				}
				else
				{
					this._idBaseGroup = default(int);
				}
				this.SendPropertyChanged("subject_group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.idea_state")]
public partial class idea_state : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _idState;
	
	private string _name;
	
	private EntitySet<idea> _ideas;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStateChanging(byte value);
    partial void OnidStateChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public idea_state()
	{
		this._ideas = new EntitySet<idea>(new Action<idea>(this.attach_ideas), new Action<idea>(this.detach_ideas));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idState", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte idState
	{
		get
		{
			return this._idState;
		}
		set
		{
			if ((this._idState != value))
			{
				this.OnidStateChanging(value);
				this.SendPropertyChanging();
				this._idState = value;
				this.SendPropertyChanged("idState");
				this.OnidStateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="idea_state_idea", Storage="_ideas", ThisKey="idState", OtherKey="idState")]
	public EntitySet<idea> ideas
	{
		get
		{
			return this._ideas;
		}
		set
		{
			this._ideas.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ideas(idea entity)
	{
		this.SendPropertyChanging();
		entity.idea_state = this;
	}
	
	private void detach_ideas(idea entity)
	{
		this.SendPropertyChanging();
		entity.idea_state = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test")]
public partial class test : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private string _author;
	
	private System.Guid _guid_code;
	
	private string _abbreviature;
	
	private string _instruction;
	
	private bool _isPublished;
	
	private string _Tags;
	
	private string _StimulSource;
	
	private System.Nullable<System.DateTime> _ins_date;
	
	private string _Comment;
	
	private string _version_number;
	
	private System.Nullable<byte> _test_type;
	
	private System.Nullable<short> _publish_year;
	
	private string _publisher;
	
	private string _Theory_Construct_Info;
	
	private string _reliability_info;
	
	private string _validation_info;
	
	private string _test_norms;
	
	private string _jur_law;
	
	private string _develop_history;
	
	private string _key_security;
	
	private string _psy_task;
	
	private string _diagnostic_subj;
	
	private string _ITVersionSpecific;
	
	private System.Nullable<byte> _diagnostic_field;
	
	private string _social_advisability_idx;
	
	private string _qualification_demand;
	
	private string _mthd_recomendation;
	
	private string _use_restriction;
	
	private string _lnk_analog;
	
	private string _lnk_research;
	
	private string _lnk_FullMethodInfo;
	
	private string _lnk_DeveloperInfo;
	
	private string _lnk_SaleMethodic;
	
	private System.Nullable<byte> _language_type;
	
	private System.Nullable<byte> _category_id;
	
	private string _Short_Description;
	
	private string _monitoring_area;
	
	private bool _isSinglePage;
	
	private EntitySet<test_diagram> _test_diagrams;
	
	private EntitySet<Resume_Item> _Resume_Items;
	
	private EntitySet<SubScaleDimension> _SubScaleDimensions;
	
	private EntitySet<Test_Question> _Test_Questions;
	
	private EntitySet<Param> _Params;
	
	private EntitySet<Scale> _Scales;
	
	private EntitySet<Test_SubjectGroup_Link> _Test_SubjectGroup_Links;
	
	private EntitySet<interpretation> _interpretations;
	
	private EntitySet<rep_test_link> _rep_test_links;
	
	private EntitySet<Test_Subject> _Test_Subjects;
	
	private EntitySet<metric> _metrics;
	
	private EntityRef<test_category> _test_category;
	
	private EntityRef<DiagnosticFieldType> _DiagnosticFieldType;
	
	private EntityRef<language> _language;
	
	private EntityRef<Test_Type> _Test_Type1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnauthorChanging(string value);
    partial void OnauthorChanged();
    partial void Onguid_codeChanging(System.Guid value);
    partial void Onguid_codeChanged();
    partial void OnabbreviatureChanging(string value);
    partial void OnabbreviatureChanged();
    partial void OninstructionChanging(string value);
    partial void OninstructionChanged();
    partial void OnisPublishedChanging(bool value);
    partial void OnisPublishedChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnStimulSourceChanging(string value);
    partial void OnStimulSourceChanged();
    partial void Onins_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onins_dateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void Onversion_numberChanging(string value);
    partial void Onversion_numberChanged();
    partial void Ontest_typeChanging(System.Nullable<byte> value);
    partial void Ontest_typeChanged();
    partial void Onpublish_yearChanging(System.Nullable<short> value);
    partial void Onpublish_yearChanged();
    partial void OnpublisherChanging(string value);
    partial void OnpublisherChanged();
    partial void OnTheory_Construct_InfoChanging(string value);
    partial void OnTheory_Construct_InfoChanged();
    partial void Onreliability_infoChanging(string value);
    partial void Onreliability_infoChanged();
    partial void Onvalidation_infoChanging(string value);
    partial void Onvalidation_infoChanged();
    partial void Ontest_normsChanging(string value);
    partial void Ontest_normsChanged();
    partial void Onjur_lawChanging(string value);
    partial void Onjur_lawChanged();
    partial void Ondevelop_historyChanging(string value);
    partial void Ondevelop_historyChanged();
    partial void Onkey_securityChanging(string value);
    partial void Onkey_securityChanged();
    partial void Onpsy_taskChanging(string value);
    partial void Onpsy_taskChanged();
    partial void Ondiagnostic_subjChanging(string value);
    partial void Ondiagnostic_subjChanged();
    partial void OnITVersionSpecificChanging(string value);
    partial void OnITVersionSpecificChanged();
    partial void Ondiagnostic_fieldChanging(System.Nullable<byte> value);
    partial void Ondiagnostic_fieldChanged();
    partial void Onsocial_advisability_idxChanging(string value);
    partial void Onsocial_advisability_idxChanged();
    partial void Onqualification_demandChanging(string value);
    partial void Onqualification_demandChanged();
    partial void Onmthd_recomendationChanging(string value);
    partial void Onmthd_recomendationChanged();
    partial void Onuse_restrictionChanging(string value);
    partial void Onuse_restrictionChanged();
    partial void Onlnk_analogChanging(string value);
    partial void Onlnk_analogChanged();
    partial void Onlnk_researchChanging(string value);
    partial void Onlnk_researchChanged();
    partial void Onlnk_FullMethodInfoChanging(string value);
    partial void Onlnk_FullMethodInfoChanged();
    partial void Onlnk_DeveloperInfoChanging(string value);
    partial void Onlnk_DeveloperInfoChanged();
    partial void Onlnk_SaleMethodicChanging(string value);
    partial void Onlnk_SaleMethodicChanged();
    partial void Onlanguage_typeChanging(System.Nullable<byte> value);
    partial void Onlanguage_typeChanged();
    partial void Oncategory_idChanging(System.Nullable<byte> value);
    partial void Oncategory_idChanged();
    partial void OnShort_DescriptionChanging(string value);
    partial void OnShort_DescriptionChanged();
    partial void Onmonitoring_areaChanging(string value);
    partial void Onmonitoring_areaChanged();
    partial void OnisSinglePageChanging(bool value);
    partial void OnisSinglePageChanged();
    #endregion
	
	public test()
	{
		this._test_diagrams = new EntitySet<test_diagram>(new Action<test_diagram>(this.attach_test_diagrams), new Action<test_diagram>(this.detach_test_diagrams));
		this._Resume_Items = new EntitySet<Resume_Item>(new Action<Resume_Item>(this.attach_Resume_Items), new Action<Resume_Item>(this.detach_Resume_Items));
		this._SubScaleDimensions = new EntitySet<SubScaleDimension>(new Action<SubScaleDimension>(this.attach_SubScaleDimensions), new Action<SubScaleDimension>(this.detach_SubScaleDimensions));
		this._Test_Questions = new EntitySet<Test_Question>(new Action<Test_Question>(this.attach_Test_Questions), new Action<Test_Question>(this.detach_Test_Questions));
		this._Params = new EntitySet<Param>(new Action<Param>(this.attach_Params), new Action<Param>(this.detach_Params));
		this._Scales = new EntitySet<Scale>(new Action<Scale>(this.attach_Scales), new Action<Scale>(this.detach_Scales));
		this._Test_SubjectGroup_Links = new EntitySet<Test_SubjectGroup_Link>(new Action<Test_SubjectGroup_Link>(this.attach_Test_SubjectGroup_Links), new Action<Test_SubjectGroup_Link>(this.detach_Test_SubjectGroup_Links));
		this._interpretations = new EntitySet<interpretation>(new Action<interpretation>(this.attach_interpretations), new Action<interpretation>(this.detach_interpretations));
		this._rep_test_links = new EntitySet<rep_test_link>(new Action<rep_test_link>(this.attach_rep_test_links), new Action<rep_test_link>(this.detach_rep_test_links));
		this._Test_Subjects = new EntitySet<Test_Subject>(new Action<Test_Subject>(this.attach_Test_Subjects), new Action<Test_Subject>(this.detach_Test_Subjects));
		this._metrics = new EntitySet<metric>(new Action<metric>(this.attach_metrics), new Action<metric>(this.detach_metrics));
		this._test_category = default(EntityRef<test_category>);
		this._DiagnosticFieldType = default(EntityRef<DiagnosticFieldType>);
		this._language = default(EntityRef<language>);
		this._Test_Type1 = default(EntityRef<Test_Type>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_author", DbType="NVarChar(255)")]
	public string author
	{
		get
		{
			return this._author;
		}
		set
		{
			if ((this._author != value))
			{
				this.OnauthorChanging(value);
				this.SendPropertyChanging();
				this._author = value;
				this.SendPropertyChanged("author");
				this.OnauthorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_guid_code", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid guid_code
	{
		get
		{
			return this._guid_code;
		}
		set
		{
			if ((this._guid_code != value))
			{
				this.Onguid_codeChanging(value);
				this.SendPropertyChanging();
				this._guid_code = value;
				this.SendPropertyChanged("guid_code");
				this.Onguid_codeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abbreviature", DbType="NVarChar(20)")]
	public string abbreviature
	{
		get
		{
			return this._abbreviature;
		}
		set
		{
			if ((this._abbreviature != value))
			{
				this.OnabbreviatureChanging(value);
				this.SendPropertyChanging();
				this._abbreviature = value;
				this.SendPropertyChanged("abbreviature");
				this.OnabbreviatureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_instruction", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string instruction
	{
		get
		{
			return this._instruction;
		}
		set
		{
			if ((this._instruction != value))
			{
				this.OninstructionChanging(value);
				this.SendPropertyChanging();
				this._instruction = value;
				this.SendPropertyChanged("instruction");
				this.OninstructionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPublished", DbType="Bit NOT NULL")]
	public bool isPublished
	{
		get
		{
			return this._isPublished;
		}
		set
		{
			if ((this._isPublished != value))
			{
				this.OnisPublishedChanging(value);
				this.SendPropertyChanging();
				this._isPublished = value;
				this.SendPropertyChanged("isPublished");
				this.OnisPublishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="NVarChar(255)")]
	public string Tags
	{
		get
		{
			return this._Tags;
		}
		set
		{
			if ((this._Tags != value))
			{
				this.OnTagsChanging(value);
				this.SendPropertyChanging();
				this._Tags = value;
				this.SendPropertyChanged("Tags");
				this.OnTagsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StimulSource", DbType="NVarChar(255)")]
	public string StimulSource
	{
		get
		{
			return this._StimulSource;
		}
		set
		{
			if ((this._StimulSource != value))
			{
				this.OnStimulSourceChanging(value);
				this.SendPropertyChanging();
				this._StimulSource = value;
				this.SendPropertyChanged("StimulSource");
				this.OnStimulSourceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ins_date", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> ins_date
	{
		get
		{
			return this._ins_date;
		}
		set
		{
			if ((this._ins_date != value))
			{
				this.Onins_dateChanging(value);
				this.SendPropertyChanging();
				this._ins_date = value;
				this.SendPropertyChanged("ins_date");
				this.Onins_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(255)")]
	public string Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			if ((this._Comment != value))
			{
				this.OnCommentChanging(value);
				this.SendPropertyChanging();
				this._Comment = value;
				this.SendPropertyChanged("Comment");
				this.OnCommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version_number", DbType="NVarChar(20)")]
	public string version_number
	{
		get
		{
			return this._version_number;
		}
		set
		{
			if ((this._version_number != value))
			{
				this.Onversion_numberChanging(value);
				this.SendPropertyChanging();
				this._version_number = value;
				this.SendPropertyChanged("version_number");
				this.Onversion_numberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_type", DbType="TinyInt")]
	public System.Nullable<byte> test_type
	{
		get
		{
			return this._test_type;
		}
		set
		{
			if ((this._test_type != value))
			{
				if (this._Test_Type1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ontest_typeChanging(value);
				this.SendPropertyChanging();
				this._test_type = value;
				this.SendPropertyChanged("test_type");
				this.Ontest_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publish_year", DbType="SmallInt")]
	public System.Nullable<short> publish_year
	{
		get
		{
			return this._publish_year;
		}
		set
		{
			if ((this._publish_year != value))
			{
				this.Onpublish_yearChanging(value);
				this.SendPropertyChanging();
				this._publish_year = value;
				this.SendPropertyChanged("publish_year");
				this.Onpublish_yearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publisher", DbType="NVarChar(255)")]
	public string publisher
	{
		get
		{
			return this._publisher;
		}
		set
		{
			if ((this._publisher != value))
			{
				this.OnpublisherChanging(value);
				this.SendPropertyChanging();
				this._publisher = value;
				this.SendPropertyChanged("publisher");
				this.OnpublisherChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theory_Construct_Info", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string Theory_Construct_Info
	{
		get
		{
			return this._Theory_Construct_Info;
		}
		set
		{
			if ((this._Theory_Construct_Info != value))
			{
				this.OnTheory_Construct_InfoChanging(value);
				this.SendPropertyChanging();
				this._Theory_Construct_Info = value;
				this.SendPropertyChanged("Theory_Construct_Info");
				this.OnTheory_Construct_InfoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reliability_info", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string reliability_info
	{
		get
		{
			return this._reliability_info;
		}
		set
		{
			if ((this._reliability_info != value))
			{
				this.Onreliability_infoChanging(value);
				this.SendPropertyChanging();
				this._reliability_info = value;
				this.SendPropertyChanged("reliability_info");
				this.Onreliability_infoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_validation_info", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string validation_info
	{
		get
		{
			return this._validation_info;
		}
		set
		{
			if ((this._validation_info != value))
			{
				this.Onvalidation_infoChanging(value);
				this.SendPropertyChanging();
				this._validation_info = value;
				this.SendPropertyChanged("validation_info");
				this.Onvalidation_infoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_test_norms", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string test_norms
	{
		get
		{
			return this._test_norms;
		}
		set
		{
			if ((this._test_norms != value))
			{
				this.Ontest_normsChanging(value);
				this.SendPropertyChanging();
				this._test_norms = value;
				this.SendPropertyChanged("test_norms");
				this.Ontest_normsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jur_law", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string jur_law
	{
		get
		{
			return this._jur_law;
		}
		set
		{
			if ((this._jur_law != value))
			{
				this.Onjur_lawChanging(value);
				this.SendPropertyChanging();
				this._jur_law = value;
				this.SendPropertyChanged("jur_law");
				this.Onjur_lawChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_develop_history", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string develop_history
	{
		get
		{
			return this._develop_history;
		}
		set
		{
			if ((this._develop_history != value))
			{
				this.Ondevelop_historyChanging(value);
				this.SendPropertyChanging();
				this._develop_history = value;
				this.SendPropertyChanged("develop_history");
				this.Ondevelop_historyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_key_security", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string key_security
	{
		get
		{
			return this._key_security;
		}
		set
		{
			if ((this._key_security != value))
			{
				this.Onkey_securityChanging(value);
				this.SendPropertyChanging();
				this._key_security = value;
				this.SendPropertyChanged("key_security");
				this.Onkey_securityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_psy_task", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string psy_task
	{
		get
		{
			return this._psy_task;
		}
		set
		{
			if ((this._psy_task != value))
			{
				this.Onpsy_taskChanging(value);
				this.SendPropertyChanging();
				this._psy_task = value;
				this.SendPropertyChanged("psy_task");
				this.Onpsy_taskChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnostic_subj", DbType="NVarChar(255)")]
	public string diagnostic_subj
	{
		get
		{
			return this._diagnostic_subj;
		}
		set
		{
			if ((this._diagnostic_subj != value))
			{
				this.Ondiagnostic_subjChanging(value);
				this.SendPropertyChanging();
				this._diagnostic_subj = value;
				this.SendPropertyChanged("diagnostic_subj");
				this.Ondiagnostic_subjChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITVersionSpecific", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string ITVersionSpecific
	{
		get
		{
			return this._ITVersionSpecific;
		}
		set
		{
			if ((this._ITVersionSpecific != value))
			{
				this.OnITVersionSpecificChanging(value);
				this.SendPropertyChanging();
				this._ITVersionSpecific = value;
				this.SendPropertyChanged("ITVersionSpecific");
				this.OnITVersionSpecificChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnostic_field", DbType="TinyInt")]
	public System.Nullable<byte> diagnostic_field
	{
		get
		{
			return this._diagnostic_field;
		}
		set
		{
			if ((this._diagnostic_field != value))
			{
				if (this._DiagnosticFieldType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondiagnostic_fieldChanging(value);
				this.SendPropertyChanging();
				this._diagnostic_field = value;
				this.SendPropertyChanged("diagnostic_field");
				this.Ondiagnostic_fieldChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_social_advisability_idx", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string social_advisability_idx
	{
		get
		{
			return this._social_advisability_idx;
		}
		set
		{
			if ((this._social_advisability_idx != value))
			{
				this.Onsocial_advisability_idxChanging(value);
				this.SendPropertyChanging();
				this._social_advisability_idx = value;
				this.SendPropertyChanged("social_advisability_idx");
				this.Onsocial_advisability_idxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qualification_demand", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string qualification_demand
	{
		get
		{
			return this._qualification_demand;
		}
		set
		{
			if ((this._qualification_demand != value))
			{
				this.Onqualification_demandChanging(value);
				this.SendPropertyChanging();
				this._qualification_demand = value;
				this.SendPropertyChanged("qualification_demand");
				this.Onqualification_demandChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mthd_recomendation", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string mthd_recomendation
	{
		get
		{
			return this._mthd_recomendation;
		}
		set
		{
			if ((this._mthd_recomendation != value))
			{
				this.Onmthd_recomendationChanging(value);
				this.SendPropertyChanging();
				this._mthd_recomendation = value;
				this.SendPropertyChanged("mthd_recomendation");
				this.Onmthd_recomendationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_use_restriction", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	public string use_restriction
	{
		get
		{
			return this._use_restriction;
		}
		set
		{
			if ((this._use_restriction != value))
			{
				this.Onuse_restrictionChanging(value);
				this.SendPropertyChanging();
				this._use_restriction = value;
				this.SendPropertyChanged("use_restriction");
				this.Onuse_restrictionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lnk_analog", DbType="NVarChar(255)")]
	public string lnk_analog
	{
		get
		{
			return this._lnk_analog;
		}
		set
		{
			if ((this._lnk_analog != value))
			{
				this.Onlnk_analogChanging(value);
				this.SendPropertyChanging();
				this._lnk_analog = value;
				this.SendPropertyChanged("lnk_analog");
				this.Onlnk_analogChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lnk_research", DbType="NVarChar(255)")]
	public string lnk_research
	{
		get
		{
			return this._lnk_research;
		}
		set
		{
			if ((this._lnk_research != value))
			{
				this.Onlnk_researchChanging(value);
				this.SendPropertyChanging();
				this._lnk_research = value;
				this.SendPropertyChanged("lnk_research");
				this.Onlnk_researchChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lnk_FullMethodInfo", DbType="NVarChar(255)")]
	public string lnk_FullMethodInfo
	{
		get
		{
			return this._lnk_FullMethodInfo;
		}
		set
		{
			if ((this._lnk_FullMethodInfo != value))
			{
				this.Onlnk_FullMethodInfoChanging(value);
				this.SendPropertyChanging();
				this._lnk_FullMethodInfo = value;
				this.SendPropertyChanged("lnk_FullMethodInfo");
				this.Onlnk_FullMethodInfoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lnk_DeveloperInfo", DbType="NVarChar(255)")]
	public string lnk_DeveloperInfo
	{
		get
		{
			return this._lnk_DeveloperInfo;
		}
		set
		{
			if ((this._lnk_DeveloperInfo != value))
			{
				this.Onlnk_DeveloperInfoChanging(value);
				this.SendPropertyChanging();
				this._lnk_DeveloperInfo = value;
				this.SendPropertyChanged("lnk_DeveloperInfo");
				this.Onlnk_DeveloperInfoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lnk_SaleMethodic", DbType="NVarChar(255)")]
	public string lnk_SaleMethodic
	{
		get
		{
			return this._lnk_SaleMethodic;
		}
		set
		{
			if ((this._lnk_SaleMethodic != value))
			{
				this.Onlnk_SaleMethodicChanging(value);
				this.SendPropertyChanging();
				this._lnk_SaleMethodic = value;
				this.SendPropertyChanged("lnk_SaleMethodic");
				this.Onlnk_SaleMethodicChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_language_type", DbType="TinyInt")]
	public System.Nullable<byte> language_type
	{
		get
		{
			return this._language_type;
		}
		set
		{
			if ((this._language_type != value))
			{
				if (this._language.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onlanguage_typeChanging(value);
				this.SendPropertyChanging();
				this._language_type = value;
				this.SendPropertyChanged("language_type");
				this.Onlanguage_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_id", DbType="TinyInt")]
	public System.Nullable<byte> category_id
	{
		get
		{
			return this._category_id;
		}
		set
		{
			if ((this._category_id != value))
			{
				if (this._test_category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Oncategory_idChanging(value);
				this.SendPropertyChanging();
				this._category_id = value;
				this.SendPropertyChanged("category_id");
				this.Oncategory_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Short_Description", DbType="NVarChar(2000)")]
	public string Short_Description
	{
		get
		{
			return this._Short_Description;
		}
		set
		{
			if ((this._Short_Description != value))
			{
				this.OnShort_DescriptionChanging(value);
				this.SendPropertyChanging();
				this._Short_Description = value;
				this.SendPropertyChanged("Short_Description");
				this.OnShort_DescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_monitoring_area", DbType="NVarChar(255)")]
	public string monitoring_area
	{
		get
		{
			return this._monitoring_area;
		}
		set
		{
			if ((this._monitoring_area != value))
			{
				this.Onmonitoring_areaChanging(value);
				this.SendPropertyChanging();
				this._monitoring_area = value;
				this.SendPropertyChanged("monitoring_area");
				this.Onmonitoring_areaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSinglePage", DbType="Bit NOT NULL")]
	public bool isSinglePage
	{
		get
		{
			return this._isSinglePage;
		}
		set
		{
			if ((this._isSinglePage != value))
			{
				this.OnisSinglePageChanging(value);
				this.SendPropertyChanging();
				this._isSinglePage = value;
				this.SendPropertyChanged("isSinglePage");
				this.OnisSinglePageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_test_diagram", Storage="_test_diagrams", ThisKey="id", OtherKey="test_id")]
	public EntitySet<test_diagram> test_diagrams
	{
		get
		{
			return this._test_diagrams;
		}
		set
		{
			this._test_diagrams.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Resume_Item", Storage="_Resume_Items", ThisKey="id", OtherKey="test_id")]
	public EntitySet<Resume_Item> Resume_Items
	{
		get
		{
			return this._Resume_Items;
		}
		set
		{
			this._Resume_Items.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_SubScaleDimension", Storage="_SubScaleDimensions", ThisKey="id", OtherKey="test_id")]
	public EntitySet<SubScaleDimension> SubScaleDimensions
	{
		get
		{
			return this._SubScaleDimensions;
		}
		set
		{
			this._SubScaleDimensions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Test_Question", Storage="_Test_Questions", ThisKey="id", OtherKey="test_id")]
	public EntitySet<Test_Question> Test_Questions
	{
		get
		{
			return this._Test_Questions;
		}
		set
		{
			this._Test_Questions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Param", Storage="_Params", ThisKey="id", OtherKey="Test_ID")]
	public EntitySet<Param> Params
	{
		get
		{
			return this._Params;
		}
		set
		{
			this._Params.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Scale", Storage="_Scales", ThisKey="id", OtherKey="test_id")]
	public EntitySet<Scale> Scales
	{
		get
		{
			return this._Scales;
		}
		set
		{
			this._Scales.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Test_SubjectGroup_Link", Storage="_Test_SubjectGroup_Links", ThisKey="id", OtherKey="idTest")]
	public EntitySet<Test_SubjectGroup_Link> Test_SubjectGroup_Links
	{
		get
		{
			return this._Test_SubjectGroup_Links;
		}
		set
		{
			this._Test_SubjectGroup_Links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_interpretation", Storage="_interpretations", ThisKey="id", OtherKey="test_id")]
	public EntitySet<interpretation> interpretations
	{
		get
		{
			return this._interpretations;
		}
		set
		{
			this._interpretations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_rep_test_link", Storage="_rep_test_links", ThisKey="id", OtherKey="idTest")]
	public EntitySet<rep_test_link> rep_test_links
	{
		get
		{
			return this._rep_test_links;
		}
		set
		{
			this._rep_test_links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Test_Subject", Storage="_Test_Subjects", ThisKey="id", OtherKey="Test_Id")]
	public EntitySet<Test_Subject> Test_Subjects
	{
		get
		{
			return this._Test_Subjects;
		}
		set
		{
			this._Test_Subjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_metric", Storage="_metrics", ThisKey="id", OtherKey="idTest")]
	public EntitySet<metric> metrics
	{
		get
		{
			return this._metrics;
		}
		set
		{
			this._metrics.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_category_test", Storage="_test_category", ThisKey="category_id", OtherKey="id", IsForeignKey=true)]
	public test_category test_category
	{
		get
		{
			return this._test_category.Entity;
		}
		set
		{
			test_category previousValue = this._test_category.Entity;
			if (((previousValue != value) 
						|| (this._test_category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test_category.Entity = null;
					previousValue.tests.Remove(this);
				}
				this._test_category.Entity = value;
				if ((value != null))
				{
					value.tests.Add(this);
					this._category_id = value.id;
				}
				else
				{
					this._category_id = default(Nullable<byte>);
				}
				this.SendPropertyChanged("test_category");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DiagnosticFieldType_test", Storage="_DiagnosticFieldType", ThisKey="diagnostic_field", OtherKey="id", IsForeignKey=true)]
	public DiagnosticFieldType DiagnosticFieldType
	{
		get
		{
			return this._DiagnosticFieldType.Entity;
		}
		set
		{
			DiagnosticFieldType previousValue = this._DiagnosticFieldType.Entity;
			if (((previousValue != value) 
						|| (this._DiagnosticFieldType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DiagnosticFieldType.Entity = null;
					previousValue.tests.Remove(this);
				}
				this._DiagnosticFieldType.Entity = value;
				if ((value != null))
				{
					value.tests.Add(this);
					this._diagnostic_field = value.id;
				}
				else
				{
					this._diagnostic_field = default(Nullable<byte>);
				}
				this.SendPropertyChanged("DiagnosticFieldType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="language_test", Storage="_language", ThisKey="language_type", OtherKey="id", IsForeignKey=true)]
	public language language
	{
		get
		{
			return this._language.Entity;
		}
		set
		{
			language previousValue = this._language.Entity;
			if (((previousValue != value) 
						|| (this._language.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._language.Entity = null;
					previousValue.tests.Remove(this);
				}
				this._language.Entity = value;
				if ((value != null))
				{
					value.tests.Add(this);
					this._language_type = value.id;
				}
				else
				{
					this._language_type = default(Nullable<byte>);
				}
				this.SendPropertyChanged("language");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Type_test", Storage="_Test_Type1", ThisKey="test_type", OtherKey="id", IsForeignKey=true)]
	public Test_Type Test_Type1
	{
		get
		{
			return this._Test_Type1.Entity;
		}
		set
		{
			Test_Type previousValue = this._Test_Type1.Entity;
			if (((previousValue != value) 
						|| (this._Test_Type1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Type1.Entity = null;
					previousValue.tests.Remove(this);
				}
				this._Test_Type1.Entity = value;
				if ((value != null))
				{
					value.tests.Add(this);
					this._test_type = value.id;
				}
				else
				{
					this._test_type = default(Nullable<byte>);
				}
				this.SendPropertyChanged("Test_Type1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_test_diagrams(test_diagram entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_test_diagrams(test_diagram entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_Resume_Items(Resume_Item entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_SubScaleDimensions(SubScaleDimension entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_SubScaleDimensions(SubScaleDimension entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_Test_Questions(Test_Question entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_Test_Questions(Test_Question entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_Params(Param entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_Params(Param entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_Scales(Scale entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_Scales(Scale entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_Test_SubjectGroup_Links(Test_SubjectGroup_Link entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_Test_SubjectGroup_Links(Test_SubjectGroup_Link entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_interpretations(interpretation entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_interpretations(interpretation entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_rep_test_links(rep_test_link entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_rep_test_links(rep_test_link entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
	
	private void attach_metrics(metric entity)
	{
		this.SendPropertyChanging();
		entity.test = this;
	}
	
	private void detach_metrics(metric entity)
	{
		this.SendPropertyChanging();
		entity.test = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.generator_type")]
public partial class generator_type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _id;
	
	private string _name;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public generator_type()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.idea_generator")]
public partial class idea_generator
{
	
	private int _idTest;
	
	private byte _idGeneratorType;
	
	public idea_generator()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTest", DbType="Int NOT NULL")]
	public int idTest
	{
		get
		{
			return this._idTest;
		}
		set
		{
			if ((this._idTest != value))
			{
				this._idTest = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGeneratorType", DbType="TinyInt NOT NULL")]
	public byte idGeneratorType
	{
		get
		{
			return this._idGeneratorType;
		}
		set
		{
			if ((this._idGeneratorType != value))
			{
				this._idGeneratorType = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.idea")]
public partial class idea : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private byte _idState;
	
	private System.Nullable<int> _idSubject;
	
	private string _resume;
	
	private System.Nullable<System.DateTime> _implement_date;
	
	private EntityRef<idea_state> _idea_state;
	
	private EntityRef<Test_Subject> _Test_Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidStateChanging(byte value);
    partial void OnidStateChanged();
    partial void OnidSubjectChanging(System.Nullable<int> value);
    partial void OnidSubjectChanged();
    partial void OnresumeChanging(string value);
    partial void OnresumeChanged();
    partial void Onimplement_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onimplement_dateChanged();
    #endregion
	
	public idea()
	{
		this._idea_state = default(EntityRef<idea_state>);
		this._Test_Subject = default(EntityRef<Test_Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idState", DbType="TinyInt NOT NULL")]
	public byte idState
	{
		get
		{
			return this._idState;
		}
		set
		{
			if ((this._idState != value))
			{
				if (this._idea_state.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidStateChanging(value);
				this.SendPropertyChanging();
				this._idState = value;
				this.SendPropertyChanged("idState");
				this.OnidStateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSubject", DbType="Int")]
	public System.Nullable<int> idSubject
	{
		get
		{
			return this._idSubject;
		}
		set
		{
			if ((this._idSubject != value))
			{
				if (this._Test_Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidSubjectChanging(value);
				this.SendPropertyChanging();
				this._idSubject = value;
				this.SendPropertyChanged("idSubject");
				this.OnidSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resume", DbType="NVarChar(MAX)")]
	public string resume
	{
		get
		{
			return this._resume;
		}
		set
		{
			if ((this._resume != value))
			{
				this.OnresumeChanging(value);
				this.SendPropertyChanging();
				this._resume = value;
				this.SendPropertyChanged("resume");
				this.OnresumeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_implement_date", DbType="DateTime")]
	public System.Nullable<System.DateTime> implement_date
	{
		get
		{
			return this._implement_date;
		}
		set
		{
			if ((this._implement_date != value))
			{
				this.Onimplement_dateChanging(value);
				this.SendPropertyChanging();
				this._implement_date = value;
				this.SendPropertyChanged("implement_date");
				this.Onimplement_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="idea_state_idea", Storage="_idea_state", ThisKey="idState", OtherKey="idState", IsForeignKey=true)]
	public idea_state idea_state
	{
		get
		{
			return this._idea_state.Entity;
		}
		set
		{
			idea_state previousValue = this._idea_state.Entity;
			if (((previousValue != value) 
						|| (this._idea_state.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._idea_state.Entity = null;
					previousValue.ideas.Remove(this);
				}
				this._idea_state.Entity = value;
				if ((value != null))
				{
					value.ideas.Add(this);
					this._idState = value.idState;
				}
				else
				{
					this._idState = default(byte);
				}
				this.SendPropertyChanged("idea_state");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_idea", Storage="_Test_Subject", ThisKey="idSubject", OtherKey="id", IsForeignKey=true)]
	public Test_Subject Test_Subject
	{
		get
		{
			return this._Test_Subject.Entity;
		}
		set
		{
			Test_Subject previousValue = this._Test_Subject.Entity;
			if (((previousValue != value) 
						|| (this._Test_Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Subject.Entity = null;
					previousValue.ideas.Remove(this);
				}
				this._Test_Subject.Entity = value;
				if ((value != null))
				{
					value.ideas.Add(this);
					this._idSubject = value.id;
				}
				else
				{
					this._idSubject = default(Nullable<int>);
				}
				this.SendPropertyChanged("Test_Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_subject_approved")]
public partial class test_subject_approved : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private int _idSubject;
	
	private bool _isApproved;
	
	private System.Nullable<System.Guid> _ApprovedByUser;
	
	private System.Nullable<System.DateTime> _ApprovedDate;
	
	private string _commentary;
	
	private EntityRef<user_account> _user_account;
	
	private EntityRef<Test_Subject> _Test_Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidSubjectChanging(int value);
    partial void OnidSubjectChanged();
    partial void OnisApprovedChanging(bool value);
    partial void OnisApprovedChanged();
    partial void OnApprovedByUserChanging(System.Nullable<System.Guid> value);
    partial void OnApprovedByUserChanged();
    partial void OnApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateChanged();
    partial void OncommentaryChanging(string value);
    partial void OncommentaryChanged();
    #endregion
	
	public test_subject_approved()
	{
		this._user_account = default(EntityRef<user_account>);
		this._Test_Subject = default(EntityRef<Test_Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSubject", DbType="Int NOT NULL")]
	public int idSubject
	{
		get
		{
			return this._idSubject;
		}
		set
		{
			if ((this._idSubject != value))
			{
				if (this._Test_Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidSubjectChanging(value);
				this.SendPropertyChanging();
				this._idSubject = value;
				this.SendPropertyChanged("idSubject");
				this.OnidSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isApproved", DbType="Bit NOT NULL")]
	public bool isApproved
	{
		get
		{
			return this._isApproved;
		}
		set
		{
			if ((this._isApproved != value))
			{
				this.OnisApprovedChanging(value);
				this.SendPropertyChanging();
				this._isApproved = value;
				this.SendPropertyChanged("isApproved");
				this.OnisApprovedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedByUser", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> ApprovedByUser
	{
		get
		{
			return this._ApprovedByUser;
		}
		set
		{
			if ((this._ApprovedByUser != value))
			{
				if (this._user_account.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnApprovedByUserChanging(value);
				this.SendPropertyChanging();
				this._ApprovedByUser = value;
				this.SendPropertyChanged("ApprovedByUser");
				this.OnApprovedByUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedDate", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> ApprovedDate
	{
		get
		{
			return this._ApprovedDate;
		}
		set
		{
			if ((this._ApprovedDate != value))
			{
				this.OnApprovedDateChanging(value);
				this.SendPropertyChanging();
				this._ApprovedDate = value;
				this.SendPropertyChanged("ApprovedDate");
				this.OnApprovedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentary", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string commentary
	{
		get
		{
			return this._commentary;
		}
		set
		{
			if ((this._commentary != value))
			{
				this.OncommentaryChanging(value);
				this.SendPropertyChanging();
				this._commentary = value;
				this.SendPropertyChanged("commentary");
				this.OncommentaryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_account_test_subject_approved", Storage="_user_account", ThisKey="ApprovedByUser", OtherKey="idUser", IsForeignKey=true)]
	public user_account user_account
	{
		get
		{
			return this._user_account.Entity;
		}
		set
		{
			user_account previousValue = this._user_account.Entity;
			if (((previousValue != value) 
						|| (this._user_account.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user_account.Entity = null;
					previousValue.test_subject_approveds.Remove(this);
				}
				this._user_account.Entity = value;
				if ((value != null))
				{
					value.test_subject_approveds.Add(this);
					this._ApprovedByUser = value.idUser;
				}
				else
				{
					this._ApprovedByUser = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("user_account");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_test_subject_approved", Storage="_Test_Subject", ThisKey="idSubject", OtherKey="id", IsForeignKey=true)]
	public Test_Subject Test_Subject
	{
		get
		{
			return this._Test_Subject.Entity;
		}
		set
		{
			Test_Subject previousValue = this._Test_Subject.Entity;
			if (((previousValue != value) 
						|| (this._Test_Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Subject.Entity = null;
					previousValue.test_subject_approveds.Remove(this);
				}
				this._Test_Subject.Entity = value;
				if ((value != null))
				{
					value.test_subject_approveds.Add(this);
					this._idSubject = value.id;
				}
				else
				{
					this._idSubject = default(int);
				}
				this.SendPropertyChanged("Test_Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subject_group")]
public partial class subject_group : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _name;
	
	private System.Nullable<int> _project_id;
	
	private System.Nullable<System.Guid> _UserKey;
	
	private System.Nullable<int> _idCompany;
	
	private System.DateTime _create_date;
	
	private System.Nullable<System.DateTime> _stop_date;
	
	private string _mail_template;
	
	private System.Nullable<System.DateTime> _start_date;
	
	private System.Nullable<int> _idReport;
	
	private string _instruction;
	
	private bool _isForYearPlan;
	
	private bool _isAutoSubjAdd;
	
	private bool _isAutoEmpNew;
	
	private bool _isAnonymous;
	
	private EntitySet<Param> _Params;
	
	private EntitySet<Test_SubjectGroup_Link> _Test_SubjectGroup_Links;
	
	private EntitySet<rep_item_link> _rep_item_links;
	
	private EntitySet<schedule> _schedules;
	
	private EntitySet<indicator> _indicators;
	
	private EntitySet<Test_Subject> _Test_Subjects;
	
	private EntitySet<metric> _metrics;
	
	private EntityRef<project> _project;
	
	private EntityRef<report> _report;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onproject_idChanging(System.Nullable<int> value);
    partial void Onproject_idChanged();
    partial void OnUserKeyChanging(System.Nullable<System.Guid> value);
    partial void OnUserKeyChanged();
    partial void OnidCompanyChanging(System.Nullable<int> value);
    partial void OnidCompanyChanged();
    partial void Oncreate_dateChanging(System.DateTime value);
    partial void Oncreate_dateChanged();
    partial void Onstop_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onstop_dateChanged();
    partial void Onmail_templateChanging(string value);
    partial void Onmail_templateChanged();
    partial void Onstart_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onstart_dateChanged();
    partial void OnidReportChanging(System.Nullable<int> value);
    partial void OnidReportChanged();
    partial void OninstructionChanging(string value);
    partial void OninstructionChanged();
    partial void OnisForYearPlanChanging(bool value);
    partial void OnisForYearPlanChanged();
    partial void OnisAutoSubjAddChanging(bool value);
    partial void OnisAutoSubjAddChanged();
    partial void OnisAutoEmpNewChanging(bool value);
    partial void OnisAutoEmpNewChanged();
    partial void OnisAnonymousChanging(bool value);
    partial void OnisAnonymousChanged();
    #endregion
	
	public subject_group()
	{
		this._Params = new EntitySet<Param>(new Action<Param>(this.attach_Params), new Action<Param>(this.detach_Params));
		this._Test_SubjectGroup_Links = new EntitySet<Test_SubjectGroup_Link>(new Action<Test_SubjectGroup_Link>(this.attach_Test_SubjectGroup_Links), new Action<Test_SubjectGroup_Link>(this.detach_Test_SubjectGroup_Links));
		this._rep_item_links = new EntitySet<rep_item_link>(new Action<rep_item_link>(this.attach_rep_item_links), new Action<rep_item_link>(this.detach_rep_item_links));
		this._schedules = new EntitySet<schedule>(new Action<schedule>(this.attach_schedules), new Action<schedule>(this.detach_schedules));
		this._indicators = new EntitySet<indicator>(new Action<indicator>(this.attach_indicators), new Action<indicator>(this.detach_indicators));
		this._Test_Subjects = new EntitySet<Test_Subject>(new Action<Test_Subject>(this.attach_Test_Subjects), new Action<Test_Subject>(this.detach_Test_Subjects));
		this._metrics = new EntitySet<metric>(new Action<metric>(this.attach_metrics), new Action<metric>(this.detach_metrics));
		this._project = default(EntityRef<project>);
		this._report = default(EntityRef<report>);
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_id", DbType="Int")]
	public System.Nullable<int> project_id
	{
		get
		{
			return this._project_id;
		}
		set
		{
			if ((this._project_id != value))
			{
				if (this._project.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onproject_idChanging(value);
				this.SendPropertyChanging();
				this._project_id = value;
				this.SendPropertyChanged("project_id");
				this.Onproject_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserKey", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> UserKey
	{
		get
		{
			return this._UserKey;
		}
		set
		{
			if ((this._UserKey != value))
			{
				this.OnUserKeyChanging(value);
				this.SendPropertyChanging();
				this._UserKey = value;
				this.SendPropertyChanged("UserKey");
				this.OnUserKeyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompany", DbType="Int")]
	public System.Nullable<int> idCompany
	{
		get
		{
			return this._idCompany;
		}
		set
		{
			if ((this._idCompany != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCompanyChanging(value);
				this.SendPropertyChanging();
				this._idCompany = value;
				this.SendPropertyChanged("idCompany");
				this.OnidCompanyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_create_date", DbType="DateTime NOT NULL")]
	public System.DateTime create_date
	{
		get
		{
			return this._create_date;
		}
		set
		{
			if ((this._create_date != value))
			{
				this.Oncreate_dateChanging(value);
				this.SendPropertyChanging();
				this._create_date = value;
				this.SendPropertyChanged("create_date");
				this.Oncreate_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stop_date", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> stop_date
	{
		get
		{
			return this._stop_date;
		}
		set
		{
			if ((this._stop_date != value))
			{
				this.Onstop_dateChanging(value);
				this.SendPropertyChanging();
				this._stop_date = value;
				this.SendPropertyChanged("stop_date");
				this.Onstop_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mail_template", DbType="NVarChar(2000)")]
	public string mail_template
	{
		get
		{
			return this._mail_template;
		}
		set
		{
			if ((this._mail_template != value))
			{
				this.Onmail_templateChanging(value);
				this.SendPropertyChanging();
				this._mail_template = value;
				this.SendPropertyChanged("mail_template");
				this.Onmail_templateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_date", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> start_date
	{
		get
		{
			return this._start_date;
		}
		set
		{
			if ((this._start_date != value))
			{
				this.Onstart_dateChanging(value);
				this.SendPropertyChanging();
				this._start_date = value;
				this.SendPropertyChanged("start_date");
				this.Onstart_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idReport", DbType="Int")]
	public System.Nullable<int> idReport
	{
		get
		{
			return this._idReport;
		}
		set
		{
			if ((this._idReport != value))
			{
				if (this._report.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidReportChanging(value);
				this.SendPropertyChanging();
				this._idReport = value;
				this.SendPropertyChanged("idReport");
				this.OnidReportChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_instruction", DbType="NVarChar(MAX)")]
	public string instruction
	{
		get
		{
			return this._instruction;
		}
		set
		{
			if ((this._instruction != value))
			{
				this.OninstructionChanging(value);
				this.SendPropertyChanging();
				this._instruction = value;
				this.SendPropertyChanged("instruction");
				this.OninstructionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isForYearPlan", DbType="Bit NOT NULL")]
	public bool isForYearPlan
	{
		get
		{
			return this._isForYearPlan;
		}
		set
		{
			if ((this._isForYearPlan != value))
			{
				this.OnisForYearPlanChanging(value);
				this.SendPropertyChanging();
				this._isForYearPlan = value;
				this.SendPropertyChanged("isForYearPlan");
				this.OnisForYearPlanChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAutoSubjAdd", DbType="Bit NOT NULL")]
	public bool isAutoSubjAdd
	{
		get
		{
			return this._isAutoSubjAdd;
		}
		set
		{
			if ((this._isAutoSubjAdd != value))
			{
				this.OnisAutoSubjAddChanging(value);
				this.SendPropertyChanging();
				this._isAutoSubjAdd = value;
				this.SendPropertyChanged("isAutoSubjAdd");
				this.OnisAutoSubjAddChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAutoEmpNew", DbType="Bit NOT NULL")]
	public bool isAutoEmpNew
	{
		get
		{
			return this._isAutoEmpNew;
		}
		set
		{
			if ((this._isAutoEmpNew != value))
			{
				this.OnisAutoEmpNewChanging(value);
				this.SendPropertyChanging();
				this._isAutoEmpNew = value;
				this.SendPropertyChanged("isAutoEmpNew");
				this.OnisAutoEmpNewChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAnonymous", DbType="Bit NOT NULL")]
	public bool isAnonymous
	{
		get
		{
			return this._isAnonymous;
		}
		set
		{
			if ((this._isAnonymous != value))
			{
				this.OnisAnonymousChanging(value);
				this.SendPropertyChanging();
				this._isAnonymous = value;
				this.SendPropertyChanged("isAnonymous");
				this.OnisAnonymousChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_Param", Storage="_Params", ThisKey="id", OtherKey="Group_ID")]
	public EntitySet<Param> Params
	{
		get
		{
			return this._Params;
		}
		set
		{
			this._Params.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_Test_SubjectGroup_Link", Storage="_Test_SubjectGroup_Links", ThisKey="id", OtherKey="idGroup")]
	public EntitySet<Test_SubjectGroup_Link> Test_SubjectGroup_Links
	{
		get
		{
			return this._Test_SubjectGroup_Links;
		}
		set
		{
			this._Test_SubjectGroup_Links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_rep_item_link", Storage="_rep_item_links", ThisKey="id", OtherKey="idGroup")]
	public EntitySet<rep_item_link> rep_item_links
	{
		get
		{
			return this._rep_item_links;
		}
		set
		{
			this._rep_item_links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_schedule", Storage="_schedules", ThisKey="id", OtherKey="idBaseGroup")]
	public EntitySet<schedule> schedules
	{
		get
		{
			return this._schedules;
		}
		set
		{
			this._schedules.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_indicator", Storage="_indicators", ThisKey="id", OtherKey="idGroup")]
	public EntitySet<indicator> indicators
	{
		get
		{
			return this._indicators;
		}
		set
		{
			this._indicators.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_Test_Subject", Storage="_Test_Subjects", ThisKey="id", OtherKey="group_id")]
	public EntitySet<Test_Subject> Test_Subjects
	{
		get
		{
			return this._Test_Subjects;
		}
		set
		{
			this._Test_Subjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_metric", Storage="_metrics", ThisKey="id", OtherKey="idSubjectGroup")]
	public EntitySet<metric> metrics
	{
		get
		{
			return this._metrics;
		}
		set
		{
			this._metrics.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_subject_group", Storage="_project", ThisKey="project_id", OtherKey="id", IsForeignKey=true)]
	public project project
	{
		get
		{
			return this._project.Entity;
		}
		set
		{
			project previousValue = this._project.Entity;
			if (((previousValue != value) 
						|| (this._project.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._project.Entity = null;
					previousValue.subject_groups.Remove(this);
				}
				this._project.Entity = value;
				if ((value != null))
				{
					value.subject_groups.Add(this);
					this._project_id = value.id;
				}
				else
				{
					this._project_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("project");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="report_subject_group", Storage="_report", ThisKey="idReport", OtherKey="idReport", IsForeignKey=true)]
	public report report
	{
		get
		{
			return this._report.Entity;
		}
		set
		{
			report previousValue = this._report.Entity;
			if (((previousValue != value) 
						|| (this._report.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._report.Entity = null;
					previousValue.subject_groups.Remove(this);
				}
				this._report.Entity = value;
				if ((value != null))
				{
					value.subject_groups.Add(this);
					this._idReport = value.idReport;
				}
				else
				{
					this._idReport = default(Nullable<int>);
				}
				this.SendPropertyChanged("report");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_subject_group", Storage="_Company", ThisKey="idCompany", OtherKey="id", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.subject_groups.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.subject_groups.Add(this);
					this._idCompany = value.id;
				}
				else
				{
					this._idCompany = default(Nullable<int>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Params(Param entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = this;
	}
	
	private void detach_Params(Param entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = null;
	}
	
	private void attach_Test_SubjectGroup_Links(Test_SubjectGroup_Link entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = this;
	}
	
	private void detach_Test_SubjectGroup_Links(Test_SubjectGroup_Link entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = null;
	}
	
	private void attach_rep_item_links(rep_item_link entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = this;
	}
	
	private void detach_rep_item_links(rep_item_link entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = null;
	}
	
	private void attach_schedules(schedule entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = this;
	}
	
	private void detach_schedules(schedule entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = null;
	}
	
	private void attach_indicators(indicator entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = this;
	}
	
	private void detach_indicators(indicator entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = null;
	}
	
	private void attach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = this;
	}
	
	private void detach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = null;
	}
	
	private void attach_metrics(metric entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = this;
	}
	
	private void detach_metrics(metric entity)
	{
		this.SendPropertyChanging();
		entity.subject_group = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.indicator")]
public partial class indicator : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idIndicator;
	
	private string _name;
	
	private short _idType;
	
	private System.Nullable<int> _idScale;
	
	private int _idCompany;
	
	private System.Nullable<int> _idDiagram;
	
	private bool _isPersonal;
	
	private System.Nullable<int> _idGroup;
	
	private string _category_header;
	
	private string _abstract;
	
	private bool _repeat_lnk;
	
	private bool _full_report_lnk;
	
	private string _link_URL;
	
	private string _link_title;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<test_diagram> _test_diagram;
	
	private EntityRef<Scale> _Scale;
	
	private EntityRef<subject_group> _subject_group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidIndicatorChanging(int value);
    partial void OnidIndicatorChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnidTypeChanging(short value);
    partial void OnidTypeChanged();
    partial void OnidScaleChanging(System.Nullable<int> value);
    partial void OnidScaleChanged();
    partial void OnidCompanyChanging(int value);
    partial void OnidCompanyChanged();
    partial void OnidDiagramChanging(System.Nullable<int> value);
    partial void OnidDiagramChanged();
    partial void OnisPersonalChanging(bool value);
    partial void OnisPersonalChanged();
    partial void OnidGroupChanging(System.Nullable<int> value);
    partial void OnidGroupChanged();
    partial void Oncategory_headerChanging(string value);
    partial void Oncategory_headerChanged();
    partial void OnabstractChanging(string value);
    partial void OnabstractChanged();
    partial void Onrepeat_lnkChanging(bool value);
    partial void Onrepeat_lnkChanged();
    partial void Onfull_report_lnkChanging(bool value);
    partial void Onfull_report_lnkChanged();
    partial void Onlink_URLChanging(string value);
    partial void Onlink_URLChanged();
    partial void Onlink_titleChanging(string value);
    partial void Onlink_titleChanged();
    #endregion
	
	public indicator()
	{
		this._Company = default(EntityRef<Company>);
		this._test_diagram = default(EntityRef<test_diagram>);
		this._Scale = default(EntityRef<Scale>);
		this._subject_group = default(EntityRef<subject_group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idIndicator", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idIndicator
	{
		get
		{
			return this._idIndicator;
		}
		set
		{
			if ((this._idIndicator != value))
			{
				this.OnidIndicatorChanging(value);
				this.SendPropertyChanging();
				this._idIndicator = value;
				this.SendPropertyChanged("idIndicator");
				this.OnidIndicatorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idType", DbType="SmallInt NOT NULL")]
	public short idType
	{
		get
		{
			return this._idType;
		}
		set
		{
			if ((this._idType != value))
			{
				this.OnidTypeChanging(value);
				this.SendPropertyChanging();
				this._idType = value;
				this.SendPropertyChanged("idType");
				this.OnidTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idScale", DbType="Int")]
	public System.Nullable<int> idScale
	{
		get
		{
			return this._idScale;
		}
		set
		{
			if ((this._idScale != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidScaleChanging(value);
				this.SendPropertyChanging();
				this._idScale = value;
				this.SendPropertyChanged("idScale");
				this.OnidScaleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompany", DbType="Int NOT NULL")]
	public int idCompany
	{
		get
		{
			return this._idCompany;
		}
		set
		{
			if ((this._idCompany != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCompanyChanging(value);
				this.SendPropertyChanging();
				this._idCompany = value;
				this.SendPropertyChanged("idCompany");
				this.OnidCompanyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDiagram", DbType="Int")]
	public System.Nullable<int> idDiagram
	{
		get
		{
			return this._idDiagram;
		}
		set
		{
			if ((this._idDiagram != value))
			{
				if (this._test_diagram.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidDiagramChanging(value);
				this.SendPropertyChanging();
				this._idDiagram = value;
				this.SendPropertyChanged("idDiagram");
				this.OnidDiagramChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPersonal", DbType="Bit NOT NULL")]
	public bool isPersonal
	{
		get
		{
			return this._isPersonal;
		}
		set
		{
			if ((this._isPersonal != value))
			{
				this.OnisPersonalChanging(value);
				this.SendPropertyChanging();
				this._isPersonal = value;
				this.SendPropertyChanged("isPersonal");
				this.OnisPersonalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idGroup", DbType="Int")]
	public System.Nullable<int> idGroup
	{
		get
		{
			return this._idGroup;
		}
		set
		{
			if ((this._idGroup != value))
			{
				if (this._subject_group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidGroupChanging(value);
				this.SendPropertyChanging();
				this._idGroup = value;
				this.SendPropertyChanged("idGroup");
				this.OnidGroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category_header", DbType="VarChar(255)")]
	public string category_header
	{
		get
		{
			return this._category_header;
		}
		set
		{
			if ((this._category_header != value))
			{
				this.Oncategory_headerChanging(value);
				this.SendPropertyChanging();
				this._category_header = value;
				this.SendPropertyChanged("category_header");
				this.Oncategory_headerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="abstract", Storage="_abstract", DbType="VarChar(255)")]
	public string @abstract
	{
		get
		{
			return this._abstract;
		}
		set
		{
			if ((this._abstract != value))
			{
				this.OnabstractChanging(value);
				this.SendPropertyChanging();
				this._abstract = value;
				this.SendPropertyChanged("@abstract");
				this.OnabstractChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_repeat_lnk", DbType="Bit NOT NULL")]
	public bool repeat_lnk
	{
		get
		{
			return this._repeat_lnk;
		}
		set
		{
			if ((this._repeat_lnk != value))
			{
				this.Onrepeat_lnkChanging(value);
				this.SendPropertyChanging();
				this._repeat_lnk = value;
				this.SendPropertyChanged("repeat_lnk");
				this.Onrepeat_lnkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_full_report_lnk", DbType="Bit NOT NULL")]
	public bool full_report_lnk
	{
		get
		{
			return this._full_report_lnk;
		}
		set
		{
			if ((this._full_report_lnk != value))
			{
				this.Onfull_report_lnkChanging(value);
				this.SendPropertyChanging();
				this._full_report_lnk = value;
				this.SendPropertyChanged("full_report_lnk");
				this.Onfull_report_lnkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_link_URL", DbType="VarChar(255)")]
	public string link_URL
	{
		get
		{
			return this._link_URL;
		}
		set
		{
			if ((this._link_URL != value))
			{
				this.Onlink_URLChanging(value);
				this.SendPropertyChanging();
				this._link_URL = value;
				this.SendPropertyChanged("link_URL");
				this.Onlink_URLChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_link_title", DbType="VarChar(255)")]
	public string link_title
	{
		get
		{
			return this._link_title;
		}
		set
		{
			if ((this._link_title != value))
			{
				this.Onlink_titleChanging(value);
				this.SendPropertyChanging();
				this._link_title = value;
				this.SendPropertyChanged("link_title");
				this.Onlink_titleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_indicator", Storage="_Company", ThisKey="idCompany", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.indicators.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.indicators.Add(this);
					this._idCompany = value.id;
				}
				else
				{
					this._idCompany = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_diagram_indicator", Storage="_test_diagram", ThisKey="idDiagram", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public test_diagram test_diagram
	{
		get
		{
			return this._test_diagram.Entity;
		}
		set
		{
			test_diagram previousValue = this._test_diagram.Entity;
			if (((previousValue != value) 
						|| (this._test_diagram.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test_diagram.Entity = null;
					previousValue.indicators.Remove(this);
				}
				this._test_diagram.Entity = value;
				if ((value != null))
				{
					value.indicators.Add(this);
					this._idDiagram = value.id;
				}
				else
				{
					this._idDiagram = default(Nullable<int>);
				}
				this.SendPropertyChanged("test_diagram");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_indicator", Storage="_Scale", ThisKey="idScale", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.indicators.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.indicators.Add(this);
					this._idScale = value.id;
				}
				else
				{
					this._idScale = default(Nullable<int>);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_indicator", Storage="_subject_group", ThisKey="idGroup", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public subject_group subject_group
	{
		get
		{
			return this._subject_group.Entity;
		}
		set
		{
			subject_group previousValue = this._subject_group.Entity;
			if (((previousValue != value) 
						|| (this._subject_group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._subject_group.Entity = null;
					previousValue.indicators.Remove(this);
				}
				this._subject_group.Entity = value;
				if ((value != null))
				{
					value.indicators.Add(this);
					this._idGroup = value.id;
				}
				else
				{
					this._idGroup = default(Nullable<int>);
				}
				this.SendPropertyChanged("subject_group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.items")]
public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _text;
	
	private byte _item_type;
	
	private int _group_id;
	
	private System.Nullable<short> _number;
	
	private System.Nullable<int> _dimension_id;
	
	private string _description;
	
	private EntitySet<Test_Results_Txt> _Test_Results_Txts;
	
	private EntitySet<ItemScale_Link> _ItemScale_Links;
	
	private EntitySet<Test_Result> _Test_Results;
	
	private EntityRef<SubScaleDimension> _SubScaleDimension;
	
	private EntityRef<Test_Question> _Test_Question;
	
	private EntityRef<Quest_Type> _Quest_Type;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void Onitem_typeChanging(byte value);
    partial void Onitem_typeChanged();
    partial void Ongroup_idChanging(int value);
    partial void Ongroup_idChanged();
    partial void OnnumberChanging(System.Nullable<short> value);
    partial void OnnumberChanged();
    partial void Ondimension_idChanging(System.Nullable<int> value);
    partial void Ondimension_idChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
	
	public item()
	{
		this._Test_Results_Txts = new EntitySet<Test_Results_Txt>(new Action<Test_Results_Txt>(this.attach_Test_Results_Txts), new Action<Test_Results_Txt>(this.detach_Test_Results_Txts));
		this._ItemScale_Links = new EntitySet<ItemScale_Link>(new Action<ItemScale_Link>(this.attach_ItemScale_Links), new Action<ItemScale_Link>(this.detach_ItemScale_Links));
		this._Test_Results = new EntitySet<Test_Result>(new Action<Test_Result>(this.attach_Test_Results), new Action<Test_Result>(this.detach_Test_Results));
		this._SubScaleDimension = default(EntityRef<SubScaleDimension>);
		this._Test_Question = default(EntityRef<Test_Question>);
		this._Quest_Type = default(EntityRef<Quest_Type>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NVarChar(255)")]
	public string text
	{
		get
		{
			return this._text;
		}
		set
		{
			if ((this._text != value))
			{
				this.OntextChanging(value);
				this.SendPropertyChanging();
				this._text = value;
				this.SendPropertyChanged("text");
				this.OntextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_type", DbType="TinyInt NOT NULL")]
	public byte item_type
	{
		get
		{
			return this._item_type;
		}
		set
		{
			if ((this._item_type != value))
			{
				if (this._Quest_Type.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onitem_typeChanging(value);
				this.SendPropertyChanging();
				this._item_type = value;
				this.SendPropertyChanged("item_type");
				this.Onitem_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="Int NOT NULL")]
	public int group_id
	{
		get
		{
			return this._group_id;
		}
		set
		{
			if ((this._group_id != value))
			{
				if (this._Test_Question.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ongroup_idChanging(value);
				this.SendPropertyChanging();
				this._group_id = value;
				this.SendPropertyChanged("group_id");
				this.Ongroup_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="SmallInt")]
	public System.Nullable<short> number
	{
		get
		{
			return this._number;
		}
		set
		{
			if ((this._number != value))
			{
				this.OnnumberChanging(value);
				this.SendPropertyChanging();
				this._number = value;
				this.SendPropertyChanged("number");
				this.OnnumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dimension_id", DbType="Int")]
	public System.Nullable<int> dimension_id
	{
		get
		{
			return this._dimension_id;
		}
		set
		{
			if ((this._dimension_id != value))
			{
				if (this._SubScaleDimension.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ondimension_idChanging(value);
				this.SendPropertyChanging();
				this._dimension_id = value;
				this.SendPropertyChanged("dimension_id");
				this.Ondimension_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(2000)")]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_Test_Results_Txt", Storage="_Test_Results_Txts", ThisKey="id", OtherKey="item_id")]
	public EntitySet<Test_Results_Txt> Test_Results_Txts
	{
		get
		{
			return this._Test_Results_Txts;
		}
		set
		{
			this._Test_Results_Txts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_ItemScale_Link", Storage="_ItemScale_Links", ThisKey="id,dimension_id", OtherKey="item_id,dimension_id")]
	public EntitySet<ItemScale_Link> ItemScale_Links
	{
		get
		{
			return this._ItemScale_Links;
		}
		set
		{
			this._ItemScale_Links.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_Test_Result", Storage="_Test_Results", ThisKey="id", OtherKey="item_id")]
	public EntitySet<Test_Result> Test_Results
	{
		get
		{
			return this._Test_Results;
		}
		set
		{
			this._Test_Results.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubScaleDimension_item", Storage="_SubScaleDimension", ThisKey="dimension_id", OtherKey="id", IsForeignKey=true)]
	public SubScaleDimension SubScaleDimension
	{
		get
		{
			return this._SubScaleDimension.Entity;
		}
		set
		{
			SubScaleDimension previousValue = this._SubScaleDimension.Entity;
			if (((previousValue != value) 
						|| (this._SubScaleDimension.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SubScaleDimension.Entity = null;
					previousValue.items.Remove(this);
				}
				this._SubScaleDimension.Entity = value;
				if ((value != null))
				{
					value.items.Add(this);
					this._dimension_id = value.id;
				}
				else
				{
					this._dimension_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("SubScaleDimension");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Question_item", Storage="_Test_Question", ThisKey="group_id", OtherKey="id", IsForeignKey=true)]
	public Test_Question Test_Question
	{
		get
		{
			return this._Test_Question.Entity;
		}
		set
		{
			Test_Question previousValue = this._Test_Question.Entity;
			if (((previousValue != value) 
						|| (this._Test_Question.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Question.Entity = null;
					previousValue.items.Remove(this);
				}
				this._Test_Question.Entity = value;
				if ((value != null))
				{
					value.items.Add(this);
					this._group_id = value.id;
				}
				else
				{
					this._group_id = default(int);
				}
				this.SendPropertyChanged("Test_Question");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quest_Type_item", Storage="_Quest_Type", ThisKey="item_type", OtherKey="id", IsForeignKey=true)]
	public Quest_Type Quest_Type
	{
		get
		{
			return this._Quest_Type.Entity;
		}
		set
		{
			Quest_Type previousValue = this._Quest_Type.Entity;
			if (((previousValue != value) 
						|| (this._Quest_Type.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Quest_Type.Entity = null;
					previousValue.items.Remove(this);
				}
				this._Quest_Type.Entity = value;
				if ((value != null))
				{
					value.items.Add(this);
					this._item_type = value.id;
				}
				else
				{
					this._item_type = default(byte);
				}
				this.SendPropertyChanged("Quest_Type");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Test_Results_Txts(Test_Results_Txt entity)
	{
		this.SendPropertyChanging();
		entity.item = this;
	}
	
	private void detach_Test_Results_Txts(Test_Results_Txt entity)
	{
		this.SendPropertyChanging();
		entity.item = null;
	}
	
	private void attach_ItemScale_Links(ItemScale_Link entity)
	{
		this.SendPropertyChanging();
		entity.item = this;
	}
	
	private void detach_ItemScale_Links(ItemScale_Link entity)
	{
		this.SendPropertyChanging();
		entity.item = null;
	}
	
	private void attach_Test_Results(Test_Result entity)
	{
		this.SendPropertyChanging();
		entity.item = this;
	}
	
	private void detach_Test_Results(Test_Result entity)
	{
		this.SendPropertyChanging();
		entity.item = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.competence")]
public partial class competence : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private short _idCompetence;
	
	private int _idCompany;
	
	private string _name;
	
	private string _description;
	
	private EntitySet<book_competence_lnk> _book_competence_lnks;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCompetenceChanging(short value);
    partial void OnidCompetenceChanged();
    partial void OnidCompanyChanging(int value);
    partial void OnidCompanyChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
	
	public competence()
	{
		this._book_competence_lnks = new EntitySet<book_competence_lnk>(new Action<book_competence_lnk>(this.attach_book_competence_lnks), new Action<book_competence_lnk>(this.detach_book_competence_lnks));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompetence", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public short idCompetence
	{
		get
		{
			return this._idCompetence;
		}
		set
		{
			if ((this._idCompetence != value))
			{
				this.OnidCompetenceChanging(value);
				this.SendPropertyChanging();
				this._idCompetence = value;
				this.SendPropertyChanged("idCompetence");
				this.OnidCompetenceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompany", DbType="Int NOT NULL")]
	public int idCompany
	{
		get
		{
			return this._idCompany;
		}
		set
		{
			if ((this._idCompany != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCompanyChanging(value);
				this.SendPropertyChanging();
				this._idCompany = value;
				this.SendPropertyChanged("idCompany");
				this.OnidCompanyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(2000)")]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="competence_book_competence_lnk", Storage="_book_competence_lnks", ThisKey="idCompetence", OtherKey="idCompetence")]
	public EntitySet<book_competence_lnk> book_competence_lnks
	{
		get
		{
			return this._book_competence_lnks;
		}
		set
		{
			this._book_competence_lnks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_competence", Storage="_Company", ThisKey="idCompany", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.competences.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.competences.Add(this);
					this._idCompany = value.id;
				}
				else
				{
					this._idCompany = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_book_competence_lnks(book_competence_lnk entity)
	{
		this.SendPropertyChanging();
		entity.competence = this;
	}
	
	private void detach_book_competence_lnks(book_competence_lnk entity)
	{
		this.SendPropertyChanging();
		entity.competence = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.book")]
public partial class book : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private short _idBook;
	
	private string _title;
	
	private string _author;
	
	private short _pages;
	
	private int _idCompany;
	
	private EntitySet<book_competence_lnk> _book_competence_lnks;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidBookChanging(short value);
    partial void OnidBookChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnauthorChanging(string value);
    partial void OnauthorChanged();
    partial void OnpagesChanging(short value);
    partial void OnpagesChanged();
    partial void OnidCompanyChanging(int value);
    partial void OnidCompanyChanged();
    #endregion
	
	public book()
	{
		this._book_competence_lnks = new EntitySet<book_competence_lnk>(new Action<book_competence_lnk>(this.attach_book_competence_lnks), new Action<book_competence_lnk>(this.detach_book_competence_lnks));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBook", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public short idBook
	{
		get
		{
			return this._idBook;
		}
		set
		{
			if ((this._idBook != value))
			{
				this.OnidBookChanging(value);
				this.SendPropertyChanging();
				this._idBook = value;
				this.SendPropertyChanged("idBook");
				this.OnidBookChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_author", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string author
	{
		get
		{
			return this._author;
		}
		set
		{
			if ((this._author != value))
			{
				this.OnauthorChanging(value);
				this.SendPropertyChanging();
				this._author = value;
				this.SendPropertyChanged("author");
				this.OnauthorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pages", DbType="SmallInt NOT NULL")]
	public short pages
	{
		get
		{
			return this._pages;
		}
		set
		{
			if ((this._pages != value))
			{
				this.OnpagesChanging(value);
				this.SendPropertyChanging();
				this._pages = value;
				this.SendPropertyChanged("pages");
				this.OnpagesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompany", DbType="Int NOT NULL")]
	public int idCompany
	{
		get
		{
			return this._idCompany;
		}
		set
		{
			if ((this._idCompany != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCompanyChanging(value);
				this.SendPropertyChanging();
				this._idCompany = value;
				this.SendPropertyChanged("idCompany");
				this.OnidCompanyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="book_book_competence_lnk", Storage="_book_competence_lnks", ThisKey="idBook", OtherKey="idBook")]
	public EntitySet<book_competence_lnk> book_competence_lnks
	{
		get
		{
			return this._book_competence_lnks;
		}
		set
		{
			this._book_competence_lnks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_book", Storage="_Company", ThisKey="idCompany", OtherKey="id", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.books.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.books.Add(this);
					this._idCompany = value.id;
				}
				else
				{
					this._idCompany = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_book_competence_lnks(book_competence_lnk entity)
	{
		this.SendPropertyChanging();
		entity.book = this;
	}
	
	private void detach_book_competence_lnks(book_competence_lnk entity)
	{
		this.SendPropertyChanging();
		entity.book = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.book_competence_lnk")]
public partial class book_competence_lnk : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private short _idBook;
	
	private short _idCompetence;
	
	private EntityRef<book> _book;
	
	private EntityRef<competence> _competence;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidBookChanging(short value);
    partial void OnidBookChanged();
    partial void OnidCompetenceChanging(short value);
    partial void OnidCompetenceChanged();
    #endregion
	
	public book_competence_lnk()
	{
		this._book = default(EntityRef<book>);
		this._competence = default(EntityRef<competence>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBook", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
	public short idBook
	{
		get
		{
			return this._idBook;
		}
		set
		{
			if ((this._idBook != value))
			{
				if (this._book.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidBookChanging(value);
				this.SendPropertyChanging();
				this._idBook = value;
				this.SendPropertyChanged("idBook");
				this.OnidBookChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompetence", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
	public short idCompetence
	{
		get
		{
			return this._idCompetence;
		}
		set
		{
			if ((this._idCompetence != value))
			{
				if (this._competence.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCompetenceChanging(value);
				this.SendPropertyChanging();
				this._idCompetence = value;
				this.SendPropertyChanged("idCompetence");
				this.OnidCompetenceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="book_book_competence_lnk", Storage="_book", ThisKey="idBook", OtherKey="idBook", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public book book
	{
		get
		{
			return this._book.Entity;
		}
		set
		{
			book previousValue = this._book.Entity;
			if (((previousValue != value) 
						|| (this._book.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._book.Entity = null;
					previousValue.book_competence_lnks.Remove(this);
				}
				this._book.Entity = value;
				if ((value != null))
				{
					value.book_competence_lnks.Add(this);
					this._idBook = value.idBook;
				}
				else
				{
					this._idBook = default(short);
				}
				this.SendPropertyChanged("book");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="competence_book_competence_lnk", Storage="_competence", ThisKey="idCompetence", OtherKey="idCompetence", IsForeignKey=true)]
	public competence competence
	{
		get
		{
			return this._competence.Entity;
		}
		set
		{
			competence previousValue = this._competence.Entity;
			if (((previousValue != value) 
						|| (this._competence.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._competence.Entity = null;
					previousValue.book_competence_lnks.Remove(this);
				}
				this._competence.Entity = value;
				if ((value != null))
				{
					value.book_competence_lnks.Add(this);
					this._idCompetence = value.idCompetence;
				}
				else
				{
					this._idCompetence = default(short);
				}
				this.SendPropertyChanged("competence");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Raw_Data")]
public partial class Raw_Data : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Subject_ID;
	
	private int _Scale_ID;
	
	private decimal _Raw_Value;
	
	private EntityRef<Scale> _Scale;
	
	private EntityRef<Test_Subject> _Test_Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubject_IDChanging(int value);
    partial void OnSubject_IDChanged();
    partial void OnScale_IDChanging(int value);
    partial void OnScale_IDChanged();
    partial void OnRaw_ValueChanging(decimal value);
    partial void OnRaw_ValueChanged();
    #endregion
	
	public Raw_Data()
	{
		this._Scale = default(EntityRef<Scale>);
		this._Test_Subject = default(EntityRef<Test_Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Subject_ID
	{
		get
		{
			return this._Subject_ID;
		}
		set
		{
			if ((this._Subject_ID != value))
			{
				if (this._Test_Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubject_IDChanging(value);
				this.SendPropertyChanging();
				this._Subject_ID = value;
				this.SendPropertyChanged("Subject_ID");
				this.OnSubject_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scale_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Scale_ID
	{
		get
		{
			return this._Scale_ID;
		}
		set
		{
			if ((this._Scale_ID != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnScale_IDChanging(value);
				this.SendPropertyChanging();
				this._Scale_ID = value;
				this.SendPropertyChanged("Scale_ID");
				this.OnScale_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Raw_Value", DbType="Decimal(8,3) NOT NULL")]
	public decimal Raw_Value
	{
		get
		{
			return this._Raw_Value;
		}
		set
		{
			if ((this._Raw_Value != value))
			{
				this.OnRaw_ValueChanging(value);
				this.SendPropertyChanging();
				this._Raw_Value = value;
				this.SendPropertyChanged("Raw_Value");
				this.OnRaw_ValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_Raw_Data", Storage="_Scale", ThisKey="Scale_ID", OtherKey="id", IsForeignKey=true)]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.Raw_Datas.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.Raw_Datas.Add(this);
					this._Scale_ID = value.id;
				}
				else
				{
					this._Scale_ID = default(int);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Raw_Data", Storage="_Test_Subject", ThisKey="Subject_ID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Test_Subject Test_Subject
	{
		get
		{
			return this._Test_Subject.Entity;
		}
		set
		{
			Test_Subject previousValue = this._Test_Subject.Entity;
			if (((previousValue != value) 
						|| (this._Test_Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Subject.Entity = null;
					previousValue.Raw_Datas.Remove(this);
				}
				this._Test_Subject.Entity = value;
				if ((value != null))
				{
					value.Raw_Datas.Add(this);
					this._Subject_ID = value.id;
				}
				else
				{
					this._Subject_ID = default(int);
				}
				this.SendPropertyChanged("Test_Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_Subject")]
public partial class Test_Subject : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<int> _project_id;
	
	private string _Nick_Name;
	
	private System.Nullable<System.DateTime> _Test_Date;
	
	private System.Nullable<short> _Age;
	
	private System.Nullable<bool> _Gender;
	
	private System.Nullable<int> _Test_Id;
	
	private System.Nullable<System.DateTime> _Test_Date_Start;
	
	private System.Nullable<int> _group_id;
	
	private string _fio;
	
	private System.Nullable<int> _BaseSubject_id;
	
	private int _MeasureNumber;
	
	private System.Nullable<System.Guid> _idUser;
	
	private bool _MailWasSent;
	
	private System.Nullable<int> _idTestLink;
	
	private bool _actual;
	
	private EntitySet<Test_Data> _Test_Datas;
	
	private EntitySet<Test_Results_Txt> _Test_Results_Txts;
	
	private EntitySet<Param_Result> _Param_Results;
	
	private EntitySet<Test_Result> _Test_Results;
	
	private EntitySet<idea> _ideas;
	
	private EntitySet<test_subject_approved> _test_subject_approveds;
	
	private EntitySet<Raw_Data> _Raw_Datas;
	
	private EntitySet<Test_Subject> _Test_Subjects;
	
	private EntityRef<Test_Subject> _Test_Subject1;
	
	private EntityRef<subject_group> _subject_group;
	
	private EntityRef<user_account> _user_account;
	
	private EntityRef<Test_SubjectGroup_Link> _Test_SubjectGroup_Link;
	
	private EntityRef<project> _project;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onproject_idChanging(System.Nullable<int> value);
    partial void Onproject_idChanged();
    partial void OnNick_NameChanging(string value);
    partial void OnNick_NameChanged();
    partial void OnTest_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnTest_DateChanged();
    partial void OnAgeChanging(System.Nullable<short> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnTest_IdChanging(System.Nullable<int> value);
    partial void OnTest_IdChanged();
    partial void OnTest_Date_StartChanging(System.Nullable<System.DateTime> value);
    partial void OnTest_Date_StartChanged();
    partial void Ongroup_idChanging(System.Nullable<int> value);
    partial void Ongroup_idChanged();
    partial void OnfioChanging(string value);
    partial void OnfioChanged();
    partial void OnBaseSubject_idChanging(System.Nullable<int> value);
    partial void OnBaseSubject_idChanged();
    partial void OnMeasureNumberChanging(int value);
    partial void OnMeasureNumberChanged();
    partial void OnidUserChanging(System.Nullable<System.Guid> value);
    partial void OnidUserChanged();
    partial void OnMailWasSentChanging(bool value);
    partial void OnMailWasSentChanged();
    partial void OnidTestLinkChanging(System.Nullable<int> value);
    partial void OnidTestLinkChanged();
    partial void OnactualChanging(bool value);
    partial void OnactualChanged();
    #endregion
	
	public Test_Subject()
	{
		this._Test_Datas = new EntitySet<Test_Data>(new Action<Test_Data>(this.attach_Test_Datas), new Action<Test_Data>(this.detach_Test_Datas));
		this._Test_Results_Txts = new EntitySet<Test_Results_Txt>(new Action<Test_Results_Txt>(this.attach_Test_Results_Txts), new Action<Test_Results_Txt>(this.detach_Test_Results_Txts));
		this._Param_Results = new EntitySet<Param_Result>(new Action<Param_Result>(this.attach_Param_Results), new Action<Param_Result>(this.detach_Param_Results));
		this._Test_Results = new EntitySet<Test_Result>(new Action<Test_Result>(this.attach_Test_Results), new Action<Test_Result>(this.detach_Test_Results));
		this._ideas = new EntitySet<idea>(new Action<idea>(this.attach_ideas), new Action<idea>(this.detach_ideas));
		this._test_subject_approveds = new EntitySet<test_subject_approved>(new Action<test_subject_approved>(this.attach_test_subject_approveds), new Action<test_subject_approved>(this.detach_test_subject_approveds));
		this._Raw_Datas = new EntitySet<Raw_Data>(new Action<Raw_Data>(this.attach_Raw_Datas), new Action<Raw_Data>(this.detach_Raw_Datas));
		this._Test_Subjects = new EntitySet<Test_Subject>(new Action<Test_Subject>(this.attach_Test_Subjects), new Action<Test_Subject>(this.detach_Test_Subjects));
		this._Test_Subject1 = default(EntityRef<Test_Subject>);
		this._subject_group = default(EntityRef<subject_group>);
		this._user_account = default(EntityRef<user_account>);
		this._Test_SubjectGroup_Link = default(EntityRef<Test_SubjectGroup_Link>);
		this._project = default(EntityRef<project>);
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_id", DbType="Int")]
	public System.Nullable<int> project_id
	{
		get
		{
			return this._project_id;
		}
		set
		{
			if ((this._project_id != value))
			{
				if (this._project.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onproject_idChanging(value);
				this.SendPropertyChanging();
				this._project_id = value;
				this.SendPropertyChanged("project_id");
				this.Onproject_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nick_Name", DbType="NVarChar(255)")]
	public string Nick_Name
	{
		get
		{
			return this._Nick_Name;
		}
		set
		{
			if ((this._Nick_Name != value))
			{
				this.OnNick_NameChanging(value);
				this.SendPropertyChanging();
				this._Nick_Name = value;
				this.SendPropertyChanged("Nick_Name");
				this.OnNick_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Date", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> Test_Date
	{
		get
		{
			return this._Test_Date;
		}
		set
		{
			if ((this._Test_Date != value))
			{
				this.OnTest_DateChanging(value);
				this.SendPropertyChanging();
				this._Test_Date = value;
				this.SendPropertyChanged("Test_Date");
				this.OnTest_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="SmallInt")]
	public System.Nullable<short> Age
	{
		get
		{
			return this._Age;
		}
		set
		{
			if ((this._Age != value))
			{
				this.OnAgeChanging(value);
				this.SendPropertyChanging();
				this._Age = value;
				this.SendPropertyChanged("Age");
				this.OnAgeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
	public System.Nullable<bool> Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Id", DbType="Int")]
	public System.Nullable<int> Test_Id
	{
		get
		{
			return this._Test_Id;
		}
		set
		{
			if ((this._Test_Id != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTest_IdChanging(value);
				this.SendPropertyChanging();
				this._Test_Id = value;
				this.SendPropertyChanged("Test_Id");
				this.OnTest_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Date_Start", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> Test_Date_Start
	{
		get
		{
			return this._Test_Date_Start;
		}
		set
		{
			if ((this._Test_Date_Start != value))
			{
				this.OnTest_Date_StartChanging(value);
				this.SendPropertyChanging();
				this._Test_Date_Start = value;
				this.SendPropertyChanged("Test_Date_Start");
				this.OnTest_Date_StartChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="Int")]
	public System.Nullable<int> group_id
	{
		get
		{
			return this._group_id;
		}
		set
		{
			if ((this._group_id != value))
			{
				if (this._subject_group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ongroup_idChanging(value);
				this.SendPropertyChanging();
				this._group_id = value;
				this.SendPropertyChanged("group_id");
				this.Ongroup_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fio", DbType="NVarChar(255)")]
	public string fio
	{
		get
		{
			return this._fio;
		}
		set
		{
			if ((this._fio != value))
			{
				this.OnfioChanging(value);
				this.SendPropertyChanging();
				this._fio = value;
				this.SendPropertyChanged("fio");
				this.OnfioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseSubject_id", DbType="Int")]
	public System.Nullable<int> BaseSubject_id
	{
		get
		{
			return this._BaseSubject_id;
		}
		set
		{
			if ((this._BaseSubject_id != value))
			{
				if (this._Test_Subject1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBaseSubject_idChanging(value);
				this.SendPropertyChanging();
				this._BaseSubject_id = value;
				this.SendPropertyChanged("BaseSubject_id");
				this.OnBaseSubject_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureNumber", AutoSync=AutoSync.Always, DbType="Int NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int MeasureNumber
	{
		get
		{
			return this._MeasureNumber;
		}
		set
		{
			if ((this._MeasureNumber != value))
			{
				this.OnMeasureNumberChanging(value);
				this.SendPropertyChanging();
				this._MeasureNumber = value;
				this.SendPropertyChanged("MeasureNumber");
				this.OnMeasureNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="UniqueIdentifier")]
	public System.Nullable<System.Guid> idUser
	{
		get
		{
			return this._idUser;
		}
		set
		{
			if ((this._idUser != value))
			{
				if (this._user_account.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidUserChanging(value);
				this.SendPropertyChanging();
				this._idUser = value;
				this.SendPropertyChanged("idUser");
				this.OnidUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailWasSent", DbType="Bit NOT NULL")]
	public bool MailWasSent
	{
		get
		{
			return this._MailWasSent;
		}
		set
		{
			if ((this._MailWasSent != value))
			{
				this.OnMailWasSentChanging(value);
				this.SendPropertyChanging();
				this._MailWasSent = value;
				this.SendPropertyChanged("MailWasSent");
				this.OnMailWasSentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTestLink", DbType="Int")]
	public System.Nullable<int> idTestLink
	{
		get
		{
			return this._idTestLink;
		}
		set
		{
			if ((this._idTestLink != value))
			{
				if (this._Test_SubjectGroup_Link.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidTestLinkChanging(value);
				this.SendPropertyChanging();
				this._idTestLink = value;
				this.SendPropertyChanged("idTestLink");
				this.OnidTestLinkChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actual", DbType="Bit NOT NULL")]
	public bool actual
	{
		get
		{
			return this._actual;
		}
		set
		{
			if ((this._actual != value))
			{
				this.OnactualChanging(value);
				this.SendPropertyChanging();
				this._actual = value;
				this.SendPropertyChanged("actual");
				this.OnactualChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Test_Data", Storage="_Test_Datas", ThisKey="id", OtherKey="Subject_ID")]
	public EntitySet<Test_Data> Test_Datas
	{
		get
		{
			return this._Test_Datas;
		}
		set
		{
			this._Test_Datas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Test_Results_Txt", Storage="_Test_Results_Txts", ThisKey="id", OtherKey="subject_id")]
	public EntitySet<Test_Results_Txt> Test_Results_Txts
	{
		get
		{
			return this._Test_Results_Txts;
		}
		set
		{
			this._Test_Results_Txts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Param_Result", Storage="_Param_Results", ThisKey="id", OtherKey="Subject_ID")]
	public EntitySet<Param_Result> Param_Results
	{
		get
		{
			return this._Param_Results;
		}
		set
		{
			this._Param_Results.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Test_Result", Storage="_Test_Results", ThisKey="id", OtherKey="Subject_ID")]
	public EntitySet<Test_Result> Test_Results
	{
		get
		{
			return this._Test_Results;
		}
		set
		{
			this._Test_Results.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_idea", Storage="_ideas", ThisKey="id", OtherKey="idSubject")]
	public EntitySet<idea> ideas
	{
		get
		{
			return this._ideas;
		}
		set
		{
			this._ideas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_test_subject_approved", Storage="_test_subject_approveds", ThisKey="id", OtherKey="idSubject")]
	public EntitySet<test_subject_approved> test_subject_approveds
	{
		get
		{
			return this._test_subject_approveds;
		}
		set
		{
			this._test_subject_approveds.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Raw_Data", Storage="_Raw_Datas", ThisKey="id", OtherKey="Subject_ID")]
	public EntitySet<Raw_Data> Raw_Datas
	{
		get
		{
			return this._Raw_Datas;
		}
		set
		{
			this._Raw_Datas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Test_Subject", Storage="_Test_Subjects", ThisKey="id", OtherKey="BaseSubject_id")]
	public EntitySet<Test_Subject> Test_Subjects
	{
		get
		{
			return this._Test_Subjects;
		}
		set
		{
			this._Test_Subjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Subject_Test_Subject", Storage="_Test_Subject1", ThisKey="BaseSubject_id", OtherKey="id", IsForeignKey=true)]
	public Test_Subject Test_Subject1
	{
		get
		{
			return this._Test_Subject1.Entity;
		}
		set
		{
			Test_Subject previousValue = this._Test_Subject1.Entity;
			if (((previousValue != value) 
						|| (this._Test_Subject1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_Subject1.Entity = null;
					previousValue.Test_Subjects.Remove(this);
				}
				this._Test_Subject1.Entity = value;
				if ((value != null))
				{
					value.Test_Subjects.Add(this);
					this._BaseSubject_id = value.id;
				}
				else
				{
					this._BaseSubject_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("Test_Subject1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_Test_Subject", Storage="_subject_group", ThisKey="group_id", OtherKey="id", IsForeignKey=true)]
	public subject_group subject_group
	{
		get
		{
			return this._subject_group.Entity;
		}
		set
		{
			subject_group previousValue = this._subject_group.Entity;
			if (((previousValue != value) 
						|| (this._subject_group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._subject_group.Entity = null;
					previousValue.Test_Subjects.Remove(this);
				}
				this._subject_group.Entity = value;
				if ((value != null))
				{
					value.Test_Subjects.Add(this);
					this._group_id = value.id;
				}
				else
				{
					this._group_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("subject_group");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_account_Test_Subject", Storage="_user_account", ThisKey="idUser", OtherKey="idUser", IsForeignKey=true, DeleteRule="CASCADE")]
	public user_account user_account
	{
		get
		{
			return this._user_account.Entity;
		}
		set
		{
			user_account previousValue = this._user_account.Entity;
			if (((previousValue != value) 
						|| (this._user_account.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user_account.Entity = null;
					previousValue.Test_Subjects.Remove(this);
				}
				this._user_account.Entity = value;
				if ((value != null))
				{
					value.Test_Subjects.Add(this);
					this._idUser = value.idUser;
				}
				else
				{
					this._idUser = default(Nullable<System.Guid>);
				}
				this.SendPropertyChanged("user_account");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_SubjectGroup_Link_Test_Subject", Storage="_Test_SubjectGroup_Link", ThisKey="idTestLink", OtherKey="id", IsForeignKey=true)]
	public Test_SubjectGroup_Link Test_SubjectGroup_Link
	{
		get
		{
			return this._Test_SubjectGroup_Link.Entity;
		}
		set
		{
			Test_SubjectGroup_Link previousValue = this._Test_SubjectGroup_Link.Entity;
			if (((previousValue != value) 
						|| (this._Test_SubjectGroup_Link.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Test_SubjectGroup_Link.Entity = null;
					previousValue.Test_Subjects.Remove(this);
				}
				this._Test_SubjectGroup_Link.Entity = value;
				if ((value != null))
				{
					value.Test_Subjects.Add(this);
					this._idTestLink = value.id;
				}
				else
				{
					this._idTestLink = default(Nullable<int>);
				}
				this.SendPropertyChanged("Test_SubjectGroup_Link");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="project_Test_Subject", Storage="_project", ThisKey="project_id", OtherKey="id", IsForeignKey=true)]
	public project project
	{
		get
		{
			return this._project.Entity;
		}
		set
		{
			project previousValue = this._project.Entity;
			if (((previousValue != value) 
						|| (this._project.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._project.Entity = null;
					previousValue.Test_Subjects.Remove(this);
				}
				this._project.Entity = value;
				if ((value != null))
				{
					value.Test_Subjects.Add(this);
					this._project_id = value.id;
				}
				else
				{
					this._project_id = default(Nullable<int>);
				}
				this.SendPropertyChanged("project");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Test_Subject", Storage="_test", ThisKey="Test_Id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.Test_Subjects.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.Test_Subjects.Add(this);
					this._Test_Id = value.id;
				}
				else
				{
					this._Test_Id = default(Nullable<int>);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Test_Datas(Test_Data entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = this;
	}
	
	private void detach_Test_Datas(Test_Data entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = null;
	}
	
	private void attach_Test_Results_Txts(Test_Results_Txt entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = this;
	}
	
	private void detach_Test_Results_Txts(Test_Results_Txt entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = null;
	}
	
	private void attach_Param_Results(Param_Result entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = this;
	}
	
	private void detach_Param_Results(Param_Result entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = null;
	}
	
	private void attach_Test_Results(Test_Result entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = this;
	}
	
	private void detach_Test_Results(Test_Result entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = null;
	}
	
	private void attach_ideas(idea entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = this;
	}
	
	private void detach_ideas(idea entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = null;
	}
	
	private void attach_test_subject_approveds(test_subject_approved entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = this;
	}
	
	private void detach_test_subject_approveds(test_subject_approved entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = null;
	}
	
	private void attach_Raw_Datas(Raw_Data entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = this;
	}
	
	private void detach_Raw_Datas(Raw_Data entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject = null;
	}
	
	private void attach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject1 = this;
	}
	
	private void detach_Test_Subjects(Test_Subject entity)
	{
		this.SendPropertyChanging();
		entity.Test_Subject1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.metric")]
public partial class metric : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idMetric;
	
	private string _name;
	
	private string _description;
	
	private System.DateTime _DateCreate;
	
	private System.Nullable<int> _idSubjectGroup;
	
	private System.Nullable<int> _idTest;
	
	private System.Nullable<int> _idScale;
	
	private System.Nullable<decimal> _index_value;
	
	private string _condition;
	
	private int _idCompany;
	
	private string _eliminate_scheme;
	
	private string _calc_description;
	
	private decimal _weight;
	
	private EntitySet<metric_subj_filter> _metric_subj_filters;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Scale> _Scale;
	
	private EntityRef<subject_group> _subject_group;
	
	private EntityRef<test> _test;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidMetricChanging(int value);
    partial void OnidMetricChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnidSubjectGroupChanging(System.Nullable<int> value);
    partial void OnidSubjectGroupChanged();
    partial void OnidTestChanging(System.Nullable<int> value);
    partial void OnidTestChanged();
    partial void OnidScaleChanging(System.Nullable<int> value);
    partial void OnidScaleChanged();
    partial void Onindex_valueChanging(System.Nullable<decimal> value);
    partial void Onindex_valueChanged();
    partial void OnconditionChanging(string value);
    partial void OnconditionChanged();
    partial void OnidCompanyChanging(int value);
    partial void OnidCompanyChanged();
    partial void Oneliminate_schemeChanging(string value);
    partial void Oneliminate_schemeChanged();
    partial void Oncalc_descriptionChanging(string value);
    partial void Oncalc_descriptionChanged();
    partial void OnweightChanging(decimal value);
    partial void OnweightChanged();
    #endregion
	
	public metric()
	{
		this._metric_subj_filters = new EntitySet<metric_subj_filter>(new Action<metric_subj_filter>(this.attach_metric_subj_filters), new Action<metric_subj_filter>(this.detach_metric_subj_filters));
		this._Company = default(EntityRef<Company>);
		this._Scale = default(EntityRef<Scale>);
		this._subject_group = default(EntityRef<subject_group>);
		this._test = default(EntityRef<test>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMetric", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idMetric
	{
		get
		{
			return this._idMetric;
		}
		set
		{
			if ((this._idMetric != value))
			{
				this.OnidMetricChanging(value);
				this.SendPropertyChanging();
				this._idMetric = value;
				this.SendPropertyChanged("idMetric");
				this.OnidMetricChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreate", DbType="DateTime NOT NULL")]
	public System.DateTime DateCreate
	{
		get
		{
			return this._DateCreate;
		}
		set
		{
			if ((this._DateCreate != value))
			{
				this.OnDateCreateChanging(value);
				this.SendPropertyChanging();
				this._DateCreate = value;
				this.SendPropertyChanged("DateCreate");
				this.OnDateCreateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSubjectGroup", DbType="Int")]
	public System.Nullable<int> idSubjectGroup
	{
		get
		{
			return this._idSubjectGroup;
		}
		set
		{
			if ((this._idSubjectGroup != value))
			{
				if (this._subject_group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidSubjectGroupChanging(value);
				this.SendPropertyChanging();
				this._idSubjectGroup = value;
				this.SendPropertyChanged("idSubjectGroup");
				this.OnidSubjectGroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTest", DbType="Int")]
	public System.Nullable<int> idTest
	{
		get
		{
			return this._idTest;
		}
		set
		{
			if ((this._idTest != value))
			{
				if (this._test.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidTestChanging(value);
				this.SendPropertyChanging();
				this._idTest = value;
				this.SendPropertyChanged("idTest");
				this.OnidTestChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idScale", DbType="Int")]
	public System.Nullable<int> idScale
	{
		get
		{
			return this._idScale;
		}
		set
		{
			if ((this._idScale != value))
			{
				if (this._Scale.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidScaleChanging(value);
				this.SendPropertyChanging();
				this._idScale = value;
				this.SendPropertyChanged("idScale");
				this.OnidScaleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_index_value", DbType="Decimal(8,0)")]
	public System.Nullable<decimal> index_value
	{
		get
		{
			return this._index_value;
		}
		set
		{
			if ((this._index_value != value))
			{
				this.Onindex_valueChanging(value);
				this.SendPropertyChanging();
				this._index_value = value;
				this.SendPropertyChanged("index_value");
				this.Onindex_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_condition", DbType="Char(2)")]
	public string condition
	{
		get
		{
			return this._condition;
		}
		set
		{
			if ((this._condition != value))
			{
				this.OnconditionChanging(value);
				this.SendPropertyChanging();
				this._condition = value;
				this.SendPropertyChanged("condition");
				this.OnconditionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCompany", DbType="Int NOT NULL")]
	public int idCompany
	{
		get
		{
			return this._idCompany;
		}
		set
		{
			if ((this._idCompany != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidCompanyChanging(value);
				this.SendPropertyChanging();
				this._idCompany = value;
				this.SendPropertyChanged("idCompany");
				this.OnidCompanyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eliminate_scheme", DbType="NVarChar(MAX)")]
	public string eliminate_scheme
	{
		get
		{
			return this._eliminate_scheme;
		}
		set
		{
			if ((this._eliminate_scheme != value))
			{
				this.Oneliminate_schemeChanging(value);
				this.SendPropertyChanging();
				this._eliminate_scheme = value;
				this.SendPropertyChanged("eliminate_scheme");
				this.Oneliminate_schemeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_calc_description", DbType="NVarChar(MAX)")]
	public string calc_description
	{
		get
		{
			return this._calc_description;
		}
		set
		{
			if ((this._calc_description != value))
			{
				this.Oncalc_descriptionChanging(value);
				this.SendPropertyChanging();
				this._calc_description = value;
				this.SendPropertyChanged("calc_description");
				this.Oncalc_descriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Decimal(4,1) NOT NULL")]
	public decimal weight
	{
		get
		{
			return this._weight;
		}
		set
		{
			if ((this._weight != value))
			{
				this.OnweightChanging(value);
				this.SendPropertyChanging();
				this._weight = value;
				this.SendPropertyChanged("weight");
				this.OnweightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="metric_metric_subj_filter", Storage="_metric_subj_filters", ThisKey="idMetric", OtherKey="idMetric")]
	public EntitySet<metric_subj_filter> metric_subj_filters
	{
		get
		{
			return this._metric_subj_filters;
		}
		set
		{
			this._metric_subj_filters.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_metric", Storage="_Company", ThisKey="idCompany", OtherKey="id", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.metrics.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.metrics.Add(this);
					this._idCompany = value.id;
				}
				else
				{
					this._idCompany = default(int);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scale_metric", Storage="_Scale", ThisKey="idScale", OtherKey="id", IsForeignKey=true)]
	public Scale Scale
	{
		get
		{
			return this._Scale.Entity;
		}
		set
		{
			Scale previousValue = this._Scale.Entity;
			if (((previousValue != value) 
						|| (this._Scale.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Scale.Entity = null;
					previousValue.metrics.Remove(this);
				}
				this._Scale.Entity = value;
				if ((value != null))
				{
					value.metrics.Add(this);
					this._idScale = value.id;
				}
				else
				{
					this._idScale = default(Nullable<int>);
				}
				this.SendPropertyChanged("Scale");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="subject_group_metric", Storage="_subject_group", ThisKey="idSubjectGroup", OtherKey="id", IsForeignKey=true)]
	public subject_group subject_group
	{
		get
		{
			return this._subject_group.Entity;
		}
		set
		{
			subject_group previousValue = this._subject_group.Entity;
			if (((previousValue != value) 
						|| (this._subject_group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._subject_group.Entity = null;
					previousValue.metrics.Remove(this);
				}
				this._subject_group.Entity = value;
				if ((value != null))
				{
					value.metrics.Add(this);
					this._idSubjectGroup = value.id;
				}
				else
				{
					this._idSubjectGroup = default(Nullable<int>);
				}
				this.SendPropertyChanged("subject_group");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_metric", Storage="_test", ThisKey="idTest", OtherKey="id", IsForeignKey=true)]
	public test test
	{
		get
		{
			return this._test.Entity;
		}
		set
		{
			test previousValue = this._test.Entity;
			if (((previousValue != value) 
						|| (this._test.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._test.Entity = null;
					previousValue.metrics.Remove(this);
				}
				this._test.Entity = value;
				if ((value != null))
				{
					value.metrics.Add(this);
					this._idTest = value.id;
				}
				else
				{
					this._idTest = default(Nullable<int>);
				}
				this.SendPropertyChanged("test");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_metric_subj_filters(metric_subj_filter entity)
	{
		this.SendPropertyChanging();
		entity.metric = this;
	}
	
	private void detach_metric_subj_filters(metric_subj_filter entity)
	{
		this.SendPropertyChanging();
		entity.metric = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.metric_hist")]
public partial class metric_hist
{
	
	private int _idMetric;
	
	private System.DateTime _mDate;
	
	private int _mNumber;
	
	private System.Nullable<int> _idDept;
	
	public metric_hist()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMetric", DbType="Int NOT NULL")]
	public int idMetric
	{
		get
		{
			return this._idMetric;
		}
		set
		{
			if ((this._idMetric != value))
			{
				this._idMetric = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mDate", DbType="DateTime NOT NULL")]
	public System.DateTime mDate
	{
		get
		{
			return this._mDate;
		}
		set
		{
			if ((this._mDate != value))
			{
				this._mDate = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mNumber", DbType="Int NOT NULL")]
	public int mNumber
	{
		get
		{
			return this._mNumber;
		}
		set
		{
			if ((this._mNumber != value))
			{
				this._mNumber = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDept", DbType="Int")]
	public System.Nullable<int> idDept
	{
		get
		{
			return this._idDept;
		}
		set
		{
			if ((this._idDept != value))
			{
				this._idDept = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.metric_subj_filter")]
public partial class metric_subj_filter : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _idFilter;
	
	private int _idMetric;
	
	private System.Nullable<int> _idJob;
	
	private System.Nullable<byte> _idState;
	
	private System.Nullable<int> _idDept;
	
	private EntityRef<metric> _metric;
	
	private EntityRef<dept> _dept;
	
	private EntityRef<Job> _Job;
	
	private EntityRef<user_state> _user_state;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidFilterChanging(int value);
    partial void OnidFilterChanged();
    partial void OnidMetricChanging(int value);
    partial void OnidMetricChanged();
    partial void OnidJobChanging(System.Nullable<int> value);
    partial void OnidJobChanged();
    partial void OnidStateChanging(System.Nullable<byte> value);
    partial void OnidStateChanged();
    partial void OnidDeptChanging(System.Nullable<int> value);
    partial void OnidDeptChanged();
    #endregion
	
	public metric_subj_filter()
	{
		this._metric = default(EntityRef<metric>);
		this._dept = default(EntityRef<dept>);
		this._Job = default(EntityRef<Job>);
		this._user_state = default(EntityRef<user_state>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFilter", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int idFilter
	{
		get
		{
			return this._idFilter;
		}
		set
		{
			if ((this._idFilter != value))
			{
				this.OnidFilterChanging(value);
				this.SendPropertyChanging();
				this._idFilter = value;
				this.SendPropertyChanged("idFilter");
				this.OnidFilterChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMetric", DbType="Int NOT NULL")]
	public int idMetric
	{
		get
		{
			return this._idMetric;
		}
		set
		{
			if ((this._idMetric != value))
			{
				if (this._metric.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidMetricChanging(value);
				this.SendPropertyChanging();
				this._idMetric = value;
				this.SendPropertyChanged("idMetric");
				this.OnidMetricChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idJob", DbType="Int")]
	public System.Nullable<int> idJob
	{
		get
		{
			return this._idJob;
		}
		set
		{
			if ((this._idJob != value))
			{
				if (this._Job.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidJobChanging(value);
				this.SendPropertyChanging();
				this._idJob = value;
				this.SendPropertyChanged("idJob");
				this.OnidJobChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idState", DbType="TinyInt")]
	public System.Nullable<byte> idState
	{
		get
		{
			return this._idState;
		}
		set
		{
			if ((this._idState != value))
			{
				if (this._user_state.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidStateChanging(value);
				this.SendPropertyChanging();
				this._idState = value;
				this.SendPropertyChanged("idState");
				this.OnidStateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDept", DbType="Int")]
	public System.Nullable<int> idDept
	{
		get
		{
			return this._idDept;
		}
		set
		{
			if ((this._idDept != value))
			{
				if (this._dept.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnidDeptChanging(value);
				this.SendPropertyChanging();
				this._idDept = value;
				this.SendPropertyChanged("idDept");
				this.OnidDeptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="metric_metric_subj_filter", Storage="_metric", ThisKey="idMetric", OtherKey="idMetric", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public metric metric
	{
		get
		{
			return this._metric.Entity;
		}
		set
		{
			metric previousValue = this._metric.Entity;
			if (((previousValue != value) 
						|| (this._metric.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._metric.Entity = null;
					previousValue.metric_subj_filters.Remove(this);
				}
				this._metric.Entity = value;
				if ((value != null))
				{
					value.metric_subj_filters.Add(this);
					this._idMetric = value.idMetric;
				}
				else
				{
					this._idMetric = default(int);
				}
				this.SendPropertyChanged("metric");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dept_metric_subj_filter", Storage="_dept", ThisKey="idDept", OtherKey="id", IsForeignKey=true)]
	public dept dept
	{
		get
		{
			return this._dept.Entity;
		}
		set
		{
			dept previousValue = this._dept.Entity;
			if (((previousValue != value) 
						|| (this._dept.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._dept.Entity = null;
					previousValue.metric_subj_filters.Remove(this);
				}
				this._dept.Entity = value;
				if ((value != null))
				{
					value.metric_subj_filters.Add(this);
					this._idDept = value.id;
				}
				else
				{
					this._idDept = default(Nullable<int>);
				}
				this.SendPropertyChanged("dept");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_metric_subj_filter", Storage="_Job", ThisKey="idJob", OtherKey="id", IsForeignKey=true)]
	public Job Job
	{
		get
		{
			return this._Job.Entity;
		}
		set
		{
			Job previousValue = this._Job.Entity;
			if (((previousValue != value) 
						|| (this._Job.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Job.Entity = null;
					previousValue.metric_subj_filters.Remove(this);
				}
				this._Job.Entity = value;
				if ((value != null))
				{
					value.metric_subj_filters.Add(this);
					this._idJob = value.id;
				}
				else
				{
					this._idJob = default(Nullable<int>);
				}
				this.SendPropertyChanged("Job");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_state_metric_subj_filter", Storage="_user_state", ThisKey="idState", OtherKey="id", IsForeignKey=true)]
	public user_state user_state
	{
		get
		{
			return this._user_state.Entity;
		}
		set
		{
			user_state previousValue = this._user_state.Entity;
			if (((previousValue != value) 
						|| (this._user_state.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._user_state.Entity = null;
					previousValue.metric_subj_filters.Remove(this);
				}
				this._user_state.Entity = value;
				if ((value != null))
				{
					value.metric_subj_filters.Add(this);
					this._idState = value.id;
				}
				else
				{
					this._idState = default(Nullable<byte>);
				}
				this.SendPropertyChanged("user_state");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
